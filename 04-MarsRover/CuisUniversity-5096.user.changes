

----STARTUP---- (1 May 2022 11:36:23) as /Users/sebascantini/Downloads/macos64/CuisUniversity-5096.image!


----End fileIn of /Users/sebascantini/Downloads/macos64/Packages/TerseGuide.pck.st----!

Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #Test category: 'CuisUniversity' stamp: 'aSSDA 5/1/2022 11:38:50'!
Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classRemoval: #Test stamp: 'aSSDA 5/1/2022 11:39:22'!
Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Test'!

!classDefinition: #Test category: 'Test' stamp: 'aSSDA 5/1/2022 11:39:31'!
Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Test'!
!Test methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 11:40:02'!
temp
	^8! !
!Test methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 11:40:26'!
return8
	^8! !

return| return8 |
8
	^8!

!classRemoval: #Test stamp: 'aSSDA 5/1/2022 11:42:58'!
Object subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Test'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:43:31'!
PASSED!

Zone subclass: #Commercials
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commercials
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commercials category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:48:01'!
Zone subclass: #Commercials
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commercial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:48:06'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:48:11'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commercials stamp: 'aSSDA 5/1/2022 11:48:18'!
Zone subclass: #Commercials
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:48:31'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commercial stamp: 'aSSDA 5/1/2022 11:48:37'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:48:47'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Residential
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:49:09'!
Object subclass: #Residential
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'aSSDA 5/1/2022 11:50:24'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:51:06'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:51:14'!
Object subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:51:19'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:51:30'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:51:42'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:53:21'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Residential stamp: 'aSSDA 5/1/2022 11:53:41'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'aSSDA 5/1/2022 11:53:42'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'aSSDA 5/1/2022 11:53:42'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'aSSDA 5/1/2022 11:53:42'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'aSSDA 5/1/2022 11:53:42'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'aSSDA 5/1/2022 11:53:43'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'aSSDA 5/1/2022 11:53:43'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

Object subclass: #Zone
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:54:45'!
Object subclass: #Zone
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:54:57'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:04'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 11:55:12'!
PASSED!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:55:29'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:55:33'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:55:49'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 11:57:20' prior: 50478522!
type
	
	self subclassResponsibility ! !
!Commertial methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 11:57:43' overrides: 50478803!
type
	^'Commertial'! !

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 11:57:54'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Industrial methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 11:59:07' overrides: 50478803!
type
	^'Industrial'! !
!Residential methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 11:59:19' overrides: 50478803!
type
	^'Residential'! !

!methodRemoval: Zone #initializeWithType: stamp: 'aSSDA 5/1/2022 11:59:44'!
initializeWithType: aZoneType 

	type := aZoneType.!

----End fileIn of /Users/sebascantini/Downloads/macos64/Solution.st----!

!classRemoval: #Residential stamp: 'aSSDA 5/1/2022 12:08:22'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'aSSDA 5/1/2022 12:08:23'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'aSSDA 5/1/2022 12:08:23'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:12:19' overrides: 16920235!
initialize
	services _ OrderedCollection new
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:25'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:26'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:12:32' prior: 50480483!
addService: aService 
	services add: aService.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:35'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:12:44'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:12:55' prior: 50480489!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:12:58' prior: 50480811!
addService: aService 

	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:05' prior: 50480524!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:09' prior: 50480542!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:14' prior: 50480555!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:24' prior: 50480574!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:28' prior: 50480592!
waterProduced
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:35' prior: 50480604!
zones

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:13:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:13:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:13:41'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:13:42'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:42'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:13:55'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:14:13'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:14:33'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:19:16' prior: 50480705 overrides: 16920235!
initialize
	services _ OrderedCollection new.
	zones _ OrderedCollection new.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:19:19'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:20:34'!
addResidentialZone: aResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:20:40' prior: 50481365!
addResidentialZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:20:41'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:21:19' prior: 50481375!
addResidentialZone: aResidentialZone
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !

!methodRemoval: City #addResidentialZone: stamp: 'aSSDA 5/1/2022 12:22:19'!
addResidentialZone: aResidentialZone
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:23:11'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:23:16'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:23:21'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Commertial methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 12:24:28' overrides: 50480685!
type
	^ self! !
!Industrial methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 12:24:39' overrides: 50480685!
type
	
	^ self! !
!Residential methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 12:24:47' overrides: 50480685!
type
	
	^ self! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:24:58' prior: 50480685!
type
	
	self subclassResponsibility ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:25:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:25:03'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:25:03'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:25:40' prior: 50480138!
commertialZone

	^ Commertial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:25:52' prior: 50480142!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:26:00' prior: 50480146!
residentialZone

	^ Residential new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:26:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:03'!
FAILURE!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:26:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:26:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:26:18'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:26:20'!
FAILURE!
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:26:58' prior: 50481568 overrides: 50481572!
type
	
	^ #Residential! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:27:07' prior: 50481564 overrides: 50481572!
type
	
	^ #Industrial! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:27:19' prior: 50481560 overrides: 50481572!
type
	^ #Commertial! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:26'!
PASSED!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:27:32'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:37'!
PASSED!

!methodRemoval: Zone class #withType: stamp: 'aSSDA 5/1/2022 12:27:47'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:27:55'!
PASSED!

!methodRemoval: Zone #initializeWithType: stamp: 'aSSDA 5/1/2022 12:28:10'!
initializeWithType: aZoneType 

	type := aZoneType.!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:31:17' prior: 50481090!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	self sum:[ : zone |
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:34:05' prior: 50482236!
waterConsumption
	^zones sum:[ : zone |
		zone type = #Residential ifTrue: [(9 * wp) * zone getNumberOfCells].	
		zone type = #Commertial ifTrue: [(2 * wp) * zone getNumberOfCells].	
		zone type = #Industrial ifTrue: [(10 * wp) * zone getNumberOfCells].	
	] ifEmpty:[^0*wp]! !

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells eneryPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:34:55'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells eneryPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:35:13'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:36:16' prior: 50482251!
waterConsumption
	^zones sum:[ : zone |
		zone waterConsumption
	] ifEmpty:[^0*wp]! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:36:30'!
waterConsumption
	
	self subclassResponsibility ! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:36:56' prior: 50482294!
waterConsumption
	
	self subclassResponsibility ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:37:33' overrides: 50482299!
waterConsumption
	(9 * wp) * self getNumberOfCells! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:38:19' overrides: 50482299!
waterConsumption
		(10 * wp) * self getNumberOfCells.	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:38:38' prior: 50482304 overrides: 50482299!
waterConsumption
		(2 * wp) * self getNumberOfCells! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:39:05' overrides: 50482299!
waterConsumption
	(9 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:09'!
ERROR!
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:39:30' prior: 50482320 overrides: 50482299!
waterConsumption
	^(9 * wp) * self getNumberOfCells! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:39:36' prior: 50482309 overrides: 50482299!
waterConsumption
		^(10 * wp) * self getNumberOfCells.	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:39:42' prior: 50482315 overrides: 50482299!
waterConsumption
		^(2 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:39:45'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:39:59' prior: 50482289!
waterConsumption
	^zones sum:[ : zone | zone waterConsumption] ifEmpty:[^0*wp]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:40:24' prior: 50481052!
energyConsumption
	
	^zones sum:[ : zone | zone energyConsumption] ifEmpty:[^0*ep]! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:40:32'!
energyConsumption
	
	self subclassResponsibility ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:41:28' overrides: 50482555!
energyConsumption
	^(5 * ep) * self getNumberOfCells! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:42:00' overrides: 50482555!
energyConsumption
		^(10 * ep) * self getNumberOfCells.	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:42:14' prior: 50482438 overrides: 50482299!
waterConsumption
		^(8 * ep) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:42:34'!
PASSED!
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:43:41' prior: 50482571 overrides: 50482299!
waterConsumption
		^(8 * wp) * self getNumberOfCells! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:43:49' overrides: 50482555!
energyConsumption
		^(8 * ep) * self getNumberOfCells! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:38:38' prior: 50482678 overrides: 50482299!
waterConsumption
		(2 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:04'!
PASSED!
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:44:40' prior: 50482689 overrides: 50482299!
waterConsumption
		^(2 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:44:44'!
PASSED!
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:46:39'!
isResidential
	
	self subclassResponsibility ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:46:50' overrides: 50482901!
isResidential
		^false! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:46:57' overrides: 50482901!
isResidential
		^false! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:47:05' overrides: 50482901!
isResidential
		^true! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:47:33' prior: 50481080!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone isResidential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:36'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:47:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:37'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:47:37'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:51:02'!
addResidentialZone
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].

! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:51:29'!
addCommertialZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:52:24'!
assertCanAddIndustrialZone
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:52:34'!
assertCanAddResidentialZone
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].

! !

!methodRemoval: City #addResidentialZone stamp: 'aSSDA 5/1/2022 12:52:44'!
addResidentialZone
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].

!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:52:50'!
assertCanAddCommertialZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !

!methodRemoval: City #addCommertialZone stamp: 'aSSDA 5/1/2022 12:52:58'!
addCommertialZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:53:31' prior: 50481018!
addZone: aZone

	aZone assertCanAddTo: self.

	zones add: aZone.
! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 12:53:46'!
assertCanAddTo: City
	
	self subclassResponsibility ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:54:13' overrides: 50483108!
assertCanAddTo: City
	City assertCanAddCommertialZone ! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:54:27' overrides: 50483108!
assertCanAddTo: City
	City assertCanAddIndustrialZone ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:54:38' overrides: 50483108!
assertCanAddTo: City
	City assertCanAddResidentialZone ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 12:54:57'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:56:49'!
assertCanAddZoneWithEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoints
	self energyAvailable < anEnergyPoints ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aWaterPoints ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells waterPoints energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 12:57:52'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells waterPoints energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:58:47' overrides: 16920235!
initialize
		energyPoints _ 8 * ep.
		waterPoints _ 2 * wp.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:00' prior: 50482796 overrides: 50482299!
waterConsumption
		^waterPoints * self getNumberOfCells! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:08' prior: 50482683 overrides: 50482555!
energyConsumption
		^energyPoints * self getNumberOfCells! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:19' overrides: 16920235!
initialize
		energyPoints _ 10 * ep.
		waterPoints _ 10 * wp.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:25' prior: 50482432 overrides: 50482299!
waterConsumption
		^waterPoints * self getNumberOfCells.	! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:32' prior: 50482565 overrides: 50482555!
energyConsumption
		^energyPoints * self getNumberOfCells.	! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:44' overrides: 16920235!
initialize
		energyPoints _ 5 * ep.
		waterPoints _ 9 * wp.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:50' prior: 50482560 overrides: 50482555!
energyConsumption
	^energyPoints * self getNumberOfCells! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:59:57' prior: 50482426 overrides: 50482299!
waterConsumption
	^waterPoints * self getNumberOfCells! !
!Residential methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:01:31' prior: 50483123 overrides: 50483108!
assertCanAddTo: City
	City assertCanAddZoneWithEnergyPoints: energyPoints AndWaterPoints: waterPoints! !

!methodRemoval: City #assertCanAddResidentialZone stamp: 'aSSDA 5/1/2022 13:01:52'!
assertCanAddResidentialZone
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].

!

!methodRemoval: City #assertCanAddIndustrialZone stamp: 'aSSDA 5/1/2022 13:01:59'!
assertCanAddIndustrialZone
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
!
!Industrial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:02:17' prior: 50483118 overrides: 50483108!
assertCanAddTo: City
	City assertCanAddZoneWithEnergyPoints: energyPoints AndWaterPoints: waterPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:02:41'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:04:11' prior: 50483078!
assertCanAddCommertialZone
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:04:32' prior: 50483113 overrides: 50483108!
assertCanAddTo: City
	City assertCanAddZoneWithEnergyPoints: energyPoints AndWaterPoints: waterPoints ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:04:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:04:35'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:04:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:04:35'!
FAILURE!
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:05:11' prior: 50483450 overrides: 50483108!
assertCanAddTo: City
	City assertCanAddZoneWithEnergyPoints: energyPoints AndWaterPoints: waterPoints.
	City assertCanAddCommertialZone .! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:05:13' prior: 50483562 overrides: 50483108!
assertCanAddTo: City
	City assertCanAddZoneWithEnergyPoints: energyPoints AndWaterPoints: waterPoints.
	City assertCanAddCommertialZone.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:05:15'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:08:52' prior: 50481069!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	^self sum: [ :service | service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)]] ifEmpty: [0*ep].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:09:21'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:21'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:21'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:21'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:21'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:09:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:09:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:09:22'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:09:22'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:10:11' prior: 50482550!
energyConsumption
	
	^zones sum:[ : zone | zone energyConsumption] ifEmpty:[0*ep]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:10:12'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:12'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:10:13'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:10:13'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:10:13'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:10:41' prior: 50483680!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	^services sum: [ :service | service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)]] ifEmpty: [0*ep].! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:11:01' prior: 50483895!
energyProduced
	
	^services sum: [ :service | service type = #SolarPlant ifTrue: [500 * ep]] ifEmpty: [0*ep].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:11:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:11:09'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:09'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:11:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:11:24'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:11:24'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:11:56'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:12:14'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:12:45'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:16:03'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:16:33'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:21:30' prior: 50483904!
energyProduced
	
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:17:05' prior: 50484132!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:07'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:17:13'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:14'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:17:14'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:18:28' prior: 50484145!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	services sum:[ :service | service type = #SolarPlant ifTrue: [500 * ep]]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:18:35' prior: 50484358!
energyProduced

	services sum:[ :service | service type = #SolarPlant ifTrue: [500 * ep]]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:18:38' prior: 50484366!
energyProduced

	^services sum:[ :service | service type = #SolarPlant ifTrue: [500 * ep]]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:18:51'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:18:51'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:18:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:18:58'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:18:58'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:19:24' prior: 50484372!
energyProduced

	^services sum:[ :service | service type = #SolarPlant ifTrue: [500 * ep]] ifEmpty:[0*ep]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:19:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:19:26'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:19:26'!
ERROR!
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:20:17' prior: 50480643!
type
	
	self subclassResponsibility ! !

!methodRemoval: Service #initializeWithType: stamp: 'aSSDA 5/1/2022 13:20:25'!
initializeWithType: aServiceType 

	type _ aServiceType.!

!methodRemoval: Service class #withType: stamp: 'aSSDA 5/1/2022 13:20:39'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:21:06'!
Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:21:26'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:21:36'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterPlant stamp: 'aSSDA 5/1/2022 13:21:49'!
Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:22:07' overrides: 50484593!
type
	^#SolarPlant! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 12:13:09' prior: 50484486!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!WaterTower methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:22:50' overrides: 50484593!
type
	^#WaterTower! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:23:01' prior: 50480150!
solarPlant

	^ SolarPlant ! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:23:21' prior: 50480446!
waterTower

	^ WaterTower! !

Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:23:31'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:23:35'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CommertialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:23:50'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:24:13' prior: 50481677!
commertialZone

	^ CommertialZone new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:24:24' prior: 50481682!
industrialZone

	^ IndustrialZone new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:24:29' prior: 50481687!
residentialZone

	^ ResidentialZone new! !

!classRemoval: #Residential stamp: 'aSSDA 5/1/2022 13:24:37'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'aSSDA 5/1/2022 13:24:41'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'aSSDA 5/1/2022 13:24:45'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:24:53'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:24:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:24:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:24:53'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:24:53'!
ERROR!

Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:26:02' prior: 50484668!
solarPlant

	^ SolarPlant new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:26:07' prior: 50484672!
waterTower

	^ WaterTower new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:26:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:26:09'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:09'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:26:48' prior: 50484653!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:26:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:26:55'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:26:55'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:27:02'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:28:13'!
ERROR!

!classRemoval: #ResidentialZone stamp: 'aSSDA 5/1/2022 13:29:51'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'aSSDA 5/1/2022 13:29:52'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'aSSDA 5/1/2022 13:29:52'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'aSSDA 5/1/2022 13:29:52'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells waterPoints energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'aSSDA 5/1/2022 13:29:53'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'aSSDA 5/1/2022 13:29:53'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'aSSDA 5/1/2022 13:29:53'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'aSSDA 5/1/2022 13:29:53'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'aSSDA 5/1/2022 13:29:54'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:30:32'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:30:33'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!methodRemoval: Service #initializeWithType: stamp: 'aSSDA 5/1/2022 13:30:39'!
initializeWithType: aServiceType 

	type _ aServiceType.!
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:30:49' prior: 50485655!
type
	
	self subclassResponsibility ! !

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:31:05'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:31:13'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:31:50' overrides: 50485744!
type
	
	^ #SolarPlant! !
!WaterTower methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:32:06' overrides: 50485744!
type
	
	^#WaterTower! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:32:29' prior: 50485458!
waterTower

	^ WaterTower new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:32:38' prior: 50485162!
solarPlant

	^ SolarPlant new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:32:43'!
PASSED!

!methodRemoval: Service class #withType: stamp: 'aSSDA 5/1/2022 13:32:53'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

!methodRemoval: Zone class #withType: stamp: 'aSSDA 5/1/2022 13:33:14'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

Zone subclass: #IndustrialZone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:33:43'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CommertialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:33:50'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:33:57'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:34:01'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CommertialZone methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:34:18' overrides: 50485697!
type
	
	^#Commertial! !
!IndustrialZone methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:34:29' overrides: 50485697!
type
	
	^#Industrial! !
!ResidentialZone methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:34:38' overrides: 50485697!
type
	
	^#Residential! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:34:54' prior: 50485697!
type
	
	self subclassResponsibility ! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:35:08' prior: 50485150!
commertialZone

	^ CommertialZone new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:35:14' prior: 50485154!
industrialZone

	^ IndustrialZone new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:35:22' prior: 50485158!
residentialZone

	^ ResidentialZone new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:35:24'!
PASSED!

!methodRemoval: Zone #initializeWithType: stamp: 'aSSDA 5/1/2022 13:35:37'!
initializeWithType: aZoneType 

	type := aZoneType.!
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:36:41' overrides: 16920235!
initialize
	numberOfCells _ 1.! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:36:47' prior: 50485687!
getNumberOfCells
	
	^ numberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:36:55'!
PASSED!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:37:35'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells eneryPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:37:58'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells eneryPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 13:39:54'!
setEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint
	eneryPoints _ anEnergyPoints.
	waterPoints _ aWaterPoint.
	! !
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 13:41:18' prior: 50486089 overrides: 16920235!
initialize
	numberOfCells _ 1.
	self setEnergyPointsAndWaterPoints! !
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 13:41:36'!
setEnergyPointsAndWaterPoints
	self subclassResponsibility ! !
!CommertialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:42:03' overrides: 50486237!
setEnergyPointsAndWaterPoints
	self setEnergyPoints: (ep) AndWaterPoints: (wp)! !
!CommertialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:42:24' prior: 50486242 overrides: 50486237!
setEnergyPointsAndWaterPoints
	self setEnergyPoints: (8*ep) AndWaterPoints: (2*wp)! !
!IndustrialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:42:37' overrides: 50486237!
setEnergyPointsAndWaterPoints
	self setEnergyPoints: (10*ep) AndWaterPoints: (10*wp)! !
!ResidentialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:43:05' overrides: 50486237!
setEnergyPointsAndWaterPoints
	self setEnergyPoints: (5*ep) AndWaterPoints: (9*wp)! !

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells energyPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:43:13'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells energyPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 13:43:19' prior: 50486224!
setEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint
	energyPoints _ anEnergyPoints.
	waterPoints _ aWaterPoint.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:43:22'!
PASSED!

Service subclass: #SolarPlant
	instanceVariableNames: 'energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:43:36'!
Service subclass: #SolarPlant
	instanceVariableNames: 'energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: 'waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:43:42'!
Service subclass: #WaterTower
	instanceVariableNames: 'waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:44:14' prior: 50485536!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:44:51' overrides: 16920235!
initialize
	zones _ OrderedCollection new.
	services _ OrderedCollection new.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:01' prior: 50485495!
addService: aService 
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:03' prior: 50485501!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:10' prior: 50485554!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:13' prior: 50485567!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:20' prior: 50485586!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:24' prior: 50485604!
waterProduced
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:32' prior: 50485616!
zones

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:45:34'!
PASSED!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:46:12' overrides: 16920235!
initialize
	waterPoints _ (200 * wp).! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:46:32' overrides: 16920235!
initialize
	energyPoints _ (500 * ep).! !
!Service class methodsFor: 'no messages' stamp: 'aSSDA 5/1/2022 13:48:09'!
withEneryPoints: anEnergyPoint! !
!Service class methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:48:27'!
withEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint! !

!methodRemoval: Service class #withEneryPoints: stamp: 'aSSDA 5/1/2022 13:48:34'!
withEneryPoints: anEnergyPoint!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:49:14' prior: 50485785!
solarPlant

	^ Service withEneryPoints: (500*ep) AndWaterPoints: (0*wp)! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:49:30' prior: 50485781!
waterTower

	^ Service withEneryPoints: (0*ep) AndWaterPoints: (0*wp)! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:49:31' prior: 50486653!
waterTower

	^ Service withEneryPoints: (0*ep) AndWaterPoints: (200*wp)! !

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:50:02'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: '0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:50:05'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!methodRemoval: WaterTower #initialize stamp: 'aSSDA 5/1/2022 13:50:14'!
initialize
	waterPoints _ (200 * wp).!

!methodRemoval: SolarPlant #initialize stamp: 'aSSDA 5/1/2022 13:50:19'!
initialize
	energyPoints _ (500 * ep).!

Object subclass: #Service
	instanceVariableNames: 'energyPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 13:50:41'!
Object subclass: #Service
	instanceVariableNames: 'energyPoints waterPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service class methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:51:07' prior: 50486638!
withEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	self initializeWithEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint! !
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:51:34'!
initializeWithEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	energyPoints _ anEnergyPoint.
	waterPoints _ aWaterPoint.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:52:22' prior: 50486414!
energyConsumption
	
	^services sum:[ :service | service]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:52:33' prior: 50486723!
energyConsumption
	
	^services sum:[ :service | service] ifEmpty:[0*ep]! !
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:53:06'!
energyPoints
	^energyPoints ! !
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:53:14'!
waterPoints
	^waterPoints ! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:53:27' prior: 50486728!
energyConsumption
	
	^services sum:[ :service | service energyPoints] ifEmpty:[0*ep]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:53:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:53:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:29'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:53:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:53:30'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:44:14' prior: 50486741!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:54:17' prior: 50486471!
energyProduced
	
	^services sum:[ :service | service energyPoints] ifEmpty:[0*ep]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:54:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:19'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:54:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:54:34'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:54:43'!
ERROR!
!Service methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 13:55:19'!
initializeWithEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	energyPoints _ anEnergyPoint.
	waterPoints _ aWaterPoint.! !
!Service class methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:55:27'!
withEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	self initializeWithEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:55:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:55:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:55:29'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:55:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:55:30'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:55:33'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:55:55' prior: 50486647!
solarPlant

	^ Service withEnergyPoints: (500*ep) AndWaterPoints: (0*wp)! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:56:02' prior: 50486659!
waterTower

	^ Service withEnergyPoints: (0*ep) AndWaterPoints: (200*wp)! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:56:04'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:56:04'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:06'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:56:31'!
ERROR!

!methodRemoval: Service #initializeWithEneryPoints:AndWaterPoints: stamp: 'aSSDA 5/1/2022 13:58:13'!
initializeWithEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	energyPoints _ anEnergyPoint.
	waterPoints _ aWaterPoint.!

!methodRemoval: Service class #withEneryPoints:AndWaterPoints: stamp: 'aSSDA 5/1/2022 13:58:29'!
withEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	self initializeWithEneryPoints: anEnergyPoint AndWaterPoints: aWaterPoint!
!Service class methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:58:33' prior: 50487081!
withEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	^self initializeWithEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:58:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:58:37'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:39'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:58:49'!
ERROR!
!Service class methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:59:52' prior: 50487327!
withEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint
	^self new initializeWithEnergyPoints: anEnergyPoint AndWaterPoints: aWaterPoint! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 13:59:54'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 13:59:54'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 13:59:54'!
ERROR!

!classRemoval: #SolarPlant stamp: 'aSSDA 5/1/2022 14:00:13'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'aSSDA 5/1/2022 14:00:22'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:00:49' prior: 50486509!
waterProduced
	^services sum:[ :service | service waterPoints] ifEmpty:[0*wp]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:00:57'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:01:30' prior: 50487564!
waterProduced
	^services sum:[ :service | service waterPoints]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:01:34' prior: 50487671!
waterProduced
	^services sum:[ :service | service waterPoints] ifEmpty:[0*wp]! !
!ResidentialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:03:28'!
isResidentialZone
	
	^true! !
!IndustrialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:03:35'!
isResidentialZone
	
	^true! !
!IndustrialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:03:42' prior: 50487685!
isResidentialZone
	
	^false! !
!CommertialZone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:03:46'!
isResidentialZone
	
	^false! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:06:52' prior: 50486482!
hasResidentialZones

	^(zones select:[:zone | zone isResidentialZone])isEmpty 
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:06:54'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:06:54'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 13:45:13' prior: 50487697!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:07:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:28:16'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:30:09' prior: 50487804!
hasResidentialZones

	| collectionOfResidences |

	collectionOfResidences _ zones select:[:zone | zone isResidentialZone].
	^collectionOfResidences isEmpty 
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:31:31' prior: 50488015!
hasResidentialZones

	| collectionOfResidences |

	collectionOfResidences _ zones select:[:zone | zone isResidentialZone].
	^collectionOfResidences size = 0
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:31:34'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:31:34'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:32:04' prior: 50488023!
hasResidentialZones

	| collectionOfResidences |

	collectionOfResidences _ zones select:[:zone | zone isResidentialZone].
	^collectionOfResidences size = 0
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:32:07' prior: 50488132!
hasResidentialZones

	| collectionOfResidences |

	collectionOfResidences _ zones select:[:zone | zone isResidentialZone].
	^collectionOfResidences size > 0
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:08'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:32:46' prior: 50488140!
hasResidentialZones

	

	^zones select:[:zone | zone isResidentialZone] size > 0.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:32:48'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:48'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:32:54'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:32:54'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:33:01' prior: 50488249!
hasResidentialZones

	

	^(zones select:[:zone | zone isResidentialZone]) size > 0.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:33:02'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:33:07' prior: 50488456!
hasResidentialZones

	^(zones select:[:zone | zone isResidentialZone]) size > 0.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:34:42' prior: 50486442!
addZone: aZone

	aZone assertCanAddTo: self.

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:35:00'!
assertCanAddTo: aCity
	
	self subclassResponsibility ! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:37:08'!
getEnergyPoints
	
	^ energyPoints ! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:37:15'!
getWaterPoints
	
	^ waterPoints ! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:37:40' prior: 50486847!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:37:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:37:40'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:40'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:37:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:37:41'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:41'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:37:50'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:37:50'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:37:50'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:38:08' prior: 50488569!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:38:10'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:39:26' prior: 50488610!
energyConsumption
	
	^zones sum:[ :zone | zone getEnergyPoints * zone getNumberOfCells] ifEmpty: [0*ep]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:28'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:39:52' prior: 50486492!
waterConsumption
	
	^zones sum:[ :zone | zone getWaterPoints * zone getNumberOfCells] ifEmpty: [0*wp]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:39:53'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:43:42'!
assertCanAddZoneWithEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint

	self energyAvailable < (anEnergyPoints ) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (aWaterPoint ) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:43:48' prior: 50489274!
assertCanAddZoneWithEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint

	self energyAvailable < anEnergyPoints ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aWaterPoint ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:45:00' prior: 50488929!
addZone: aZone

	self assertCanAddZoneWithEnergyPoints: aZone getEnergyPoints AndWaterPoints: aZone getWaterPoints.

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:45:03'!
PASSED!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells energyConsumption waterConsumption'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'aSSDA 5/1/2022 14:46:47'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells energyConsumption waterConsumption'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 14:46:55' prior: 50486280!
setEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint
	energyConsumption _ anEnergyPoints.
	waterConsumption _ aWaterPoint.
	! !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:48:55'!
waterConsumption
	
	^ waterConsumption ! !

!methodRemoval: Zone #getWaterPoints stamp: 'aSSDA 5/1/2022 14:49:06'!
getWaterPoints
	
	^ waterPoints !
!Zone methodsFor: 'accessing' stamp: 'aSSDA 5/1/2022 14:49:31'!
energyConsumption
	
	^ energyConsumption ! !

!methodRemoval: Zone #getEnergyPoints stamp: 'aSSDA 5/1/2022 14:49:45'!
getEnergyPoints
	
	^ energyPoints !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:50:01' prior: 50489298!
addZone: aZone

	self assertCanAddZoneWithEnergyPoints: aZone energyConsumption AndWaterPoints: aZone getWaterPoints.

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:50:05' prior: 50489447!
addZone: aZone

	self assertCanAddZoneWithEnergyPoints: aZone energyConsumption AndWaterPoints: aZone waterConsumption .

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:50:06' prior: 50489459!
addZone: aZone

	self assertCanAddZoneWithEnergyPoints: aZone energyConsumption AndWaterPoints: aZone waterConsumption.

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:50:16' prior: 50489059!
energyConsumption
	
	^zones sum:[ :zone | zone energyConsumption * zone getNumberOfCells] ifEmpty: [0*ep]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:50:24' prior: 50489167!
waterConsumption
	
	^zones sum:[ :zone | zone waterConsumption * zone getNumberOfCells] ifEmpty: [0*wp]! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:56:38'!
assertCanAddZone: aZone

	self energyAvailable < aZone energyConsumption ifTrue:[ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aZone waterConsumption ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !

!methodRemoval: City #assertCanAddZoneWithEnergyPoints:AndWaterPoints: stamp: 'aSSDA 5/1/2022 14:56:52'!
assertCanAddZoneWithEnergyPoints: anEnergyPoints AndWaterPoints: aWaterPoint

	self energyAvailable < anEnergyPoints ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < aWaterPoint ifTrue: [ self error: City cannotAddZoneErrorDescription ].
!
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:57:05' prior: 50489471!
addZone: aZone

	self assertCanAddZone: aZone .

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 14:57:05' prior: 50489519!
addZone: aZone

	self assertCanAddZone: aZone.

	aZone type = #Commertial ifTrue: [
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 14:57:06'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 15:04:21' prior: 50486232 overrides: 16920235!
initialize
	self setNumberOfCells: 1
	self setEnergyPointsAndWaterPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:04:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:04:22'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:22'!
ERROR!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 15:04:31' prior: 50489640 overrides: 16920235!
initialize
	self setNumberOfCells: 1.
	self setEnergyPointsAndWaterPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:32'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:33'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 15:04:35' prior: 50489747 overrides: 16920235!
initialize
	self setNumberOfCells: 2.
	self setEnergyPointsAndWaterPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:42'!
FAILURE!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 15:04:47' prior: 50489854 overrides: 16920235!
initialize
	self setNumberOfCells: 1.
	self setEnergyPointsAndWaterPoints! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:04:47'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'aSSDA 5/1/2022 15:05:16' prior: 50489965 overrides: 16920235!
initialize
	self setNumberOfCells: 1.
	self setEnergyPointsAndWaterPoints! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:06:34' prior: 50485173!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:06:41' prior: 50490078!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:06:59'!
cityWithSolarPanel

	| city |

	city _ City new.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:07:11' prior: 50490096!
cityWithSolarPanel

	| city |

	city _ City new.
	^city! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:07:40' prior: 50490103!
cityWithSolarPanel

	| city |

	city _ City new.
	city addService: self solarPlant 
	
	^city! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:07:44' prior: 50490108!
cityWithSolarPanel

	| city |

	city _ City new.
	city addService: self solarPlant.
	
	^city! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:07:44'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:08:00' prior: 50485182!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:08:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:08:01'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:08:14' prior: 50485193!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:08:20' prior: 50485205!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:08:27' prior: 50485216!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:08:31' prior: 50490360!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ self cityWithSolarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:14'!
cityWithSolarPlant

	| city |

	city _ City new.
	city addService: self solarPlant.
	
	^city! !

!methodRemoval: CityTest #cityWithSolarPanel stamp: 'aSSDA 5/1/2022 15:09:19'!
cityWithSolarPanel

	| city |

	city _ City new.
	city addService: self solarPlant.
	
	^city!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:25' prior: 50490088!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city _ self cityWithSolarPlant .
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:33' prior: 50490221!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:39' prior: 50490337!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:44' prior: 50490349!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:53' prior: 50485247!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:09:59' prior: 50485258!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:04' prior: 50485270!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ self cityWithSolarPanel.
	city addService: self waterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:12' prior: 50490444!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:15' prior: 50490455!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:17' prior: 50490467!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:32' prior: 50485281!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:36' prior: 50485295!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city _ self cityWithSolarPlant .
	city addService: self solarPlant.
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:47' prior: 50485361!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:54' prior: 50485376!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:10:58' prior: 50485389!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:11:03' prior: 50485404!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:11:08' prior: 50485417!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:11:14' prior: 50485430!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:11:19' prior: 50485445!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlant .
	city addService: self waterTower.
	
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:07'!
cityWithSolarPlantAndWaterTower

	| city |

	city _ self cityWithSolarPlant.
	city addService: self waterTower.
	
	^city! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:21' prior: 50490410!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:12:23'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:31' prior: 50490421!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:37' prior: 50490433!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:43' prior: 50490375!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:50' prior: 50485238!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:12:58' prior: 50490478!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:03' prior: 50490489!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:09' prior: 50490501!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:13' prior: 50490512!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:29' prior: 50490536!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:39' prior: 50490551!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:45' prior: 50490564!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.
	
	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:49' prior: 50490579!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.

	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:54' prior: 50490592!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:13:59' prior: 50490605!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:14:05' prior: 50490619!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.
	
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:14:55'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:17:56' prior: 50490925!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	city addIndustrialZoneWithTwoCells.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:18:57'!
addIndustrialZoneWithTwoCellsTo: aCity
	|zone|
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	aCity addZone: zone.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:00' prior: 50491054!
addIndustrialZoneWithTwoCellsTo: aCity
	| zone |
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	aCity addZone: zone.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:13'!
addCommertialZoneWithTwoCellsTo: aCity
	| zone |
	zone _ self commertialZone .
	zone setNumberOfCells: 2.
	aCity addZone: zone.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:19'!
addResidentialZoneWithTwoCellsTo: aCity
	| zone |
	zone _ self commertialZone .
	zone setNumberOfCells: 2.
	aCity addZone: zone.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:24' prior: 50491075!
addResidentialZoneWithTwoCellsTo: aCity
	| zone |
	zone _ self residentialZone .
	zone setNumberOfCells: 2.
	aCity addZone: zone.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:50' prior: 50490859!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ self cityWithSolarPlantAndWaterTower.

	self addCommertialZoneWithTwoCellsTo: city.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:19:54' prior: 50491091!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	self addCommertialZoneWithTwoCellsTo: city.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:20:18' prior: 50490911!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	
	self addCommertialZoneWithTwoCellsTo: city.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:20:35' prior: 50491043!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	self addIndustrialZoneWithTwoCellsTo: city.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:20:50' prior: 50490886!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	self addIndustrialZoneWithTwoCellsTo: city.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:21:16' prior: 50491103!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	self addResidentialZoneWithTwoCellsTo: city.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:21:27' prior: 50490899!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	self addResidentialZoneWithTwoCellsTo: city.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:21:56' prior: 50490872!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city |

	city _ self cityWithSolarPlantAndWaterTower.
	
	city addZone: self residentialZone.
	
	self addCommertialZoneWithTwoCellsTo: city.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:21:57'!
PASSED!

Object subclass: #Service
	instanceVariableNames: 'energyProduction waterProduction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Service
	instanceVariableNames: 'energyProduction waterProduction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:40:17'!
assertCityEnergyAvailableIs: energyAvailable after: aBlock

	| city |

	city _ self cityWithSolarPlantAndWaterTower.

	aBlock value: city.
	
	self assert: energyAvailable equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:40:55' prior: 50490639!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	self assertCityEnergyAvailableIs: (500 - 5 * ep) after: [:city | city addZone: self residentialZone.].! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:40:56'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:41:34' prior: 50490754!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	self assertCityEnergyAvailableIs: (500 - 5 - 8 * ep) after: [:city |
	city addZone: self residentialZone.
	city addZone: self commertialZone.].! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:41:35'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:42:14' prior: 50490766!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	self assertCityEnergyAvailableIs: (500 - 10 * ep) after: [:city |
	city addZone: self industrialZone.].! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:43:22' prior: 50490776!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	self assertCityEnergyAvailableIs: (500 - 5 - 8 - (10 * 2) * ep) after: [:city |
		city addZone: self residentialZone.
		city addZone: self commertialZone.
		city addZone: self industrialZone.	
		city addZone: self industrialZone.]! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:43:23'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:45:21' prior: 50491149!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	self assertCityEnergyAvailableIs: (500 - (5 * 2) * ep) after: [:city |

	self addResidentialZoneWithTwoCellsTo: city.]! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:45:26'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:46:24' prior: 50491171!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	self assertCityEnergyAvailableIs: (500 - 5 - (8 * 2) * ep) after: [:city |
	
	city addZone: self residentialZone.
	
	self addCommertialZoneWithTwoCellsTo: city.]! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:30'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'aSSDA 5/1/2022 15:46:48' prior: 50491138!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	self assertCityEnergyAvailableIs: (500 - (10 * 2) * ep) after: [:city |

	self addIndustrialZoneWithTwoCellsTo: city.]! !

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'aSSDA 5/1/2022 15:46:48'!
PASSED!

----STARTUP---- (1 May 2022 15:50:27) as /Users/sebascantini/Downloads/macos64/CuisUniversity-5096.image!


----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #NameOfSubclass category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 15:57:39'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #NameOfSubclass stamp: 'sdfsf 5/1/2022 15:57:44'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 15:57:53'!
PASSED!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:00:55'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:01:00'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:01:06'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Weapon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:01:54' prior: 50492537!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self subclassResponsibility.! !
!Weapon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:03:06' prior: 50492731!
attack: aVictim by: anAttacker 	

	self subclassResponsibility.! !
!Claw methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:04:27' overrides: 50492737!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:05:01' overrides: 50492737!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].
! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:05:14' prior: 50492742 overrides: 50492737!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!TurboLaserCannon methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:05:48' overrides: 50492737!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:05:58'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:05:58'!
ERROR!
!Claw class methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:08:03' overrides: 16904184!
initialize! !
!Claw class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:09:39' prior: 50492871 overrides: 16904184!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !
!HSBlaster class methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:09:57' overrides: 16904184!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !
!TurboLaserCannon class methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:10:11' overrides: 16904184!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !

!methodRemoval: HSBlaster class #initialize stamp: 'sdfsf 5/1/2022 16:10:52'!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.!

!methodRemoval: Claw class #initialize stamp: 'sdfsf 5/1/2022 16:10:58'!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.!

!methodRemoval: TurboLaserCannon class #initialize stamp: 'sdfsf 5/1/2022 16:11:03'!
initialize

	self initializeWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:14:06' overrides: 16920235!
initialize

	self initializeWithWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:14:16' overrides: 16920235!
initialize

	self initializeWithWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:14:39' prior: 50492916 overrides: 16920235!
initialize

	self initializeWithWeight: 20 * kilogram speedImpact: 10 * kilometer / hour.! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:14:51' overrides: 16920235!
initialize

	self initializeWithWeight: 40 * kilogram speedImpact: 15 * kilometer / hour.! !
!Weapon methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:16:33'!
initializeWithweight: aWeight speedImpact: aSpeedImpact 

	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'sdfsf 5/1/2022 16:16:43'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!
!Weapon class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 16:18:10' prior: 50492588!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [^Claw new].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:19:21'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:19:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:19:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:19:22'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:19:39'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:19:39'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:19:39'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:20:17'!
ERROR!
!Weapon methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:20:48'!
initializeWithWeight: aWeight speedImpact: aSpeedImpact 

	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !

!methodRemoval: Weapon #initializeWithweight:speedImpact: stamp: 'sdfsf 5/1/2022 16:20:53'!
initializeWithweight: aWeight speedImpact: aSpeedImpact 

	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:21:09'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:21:09'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:21:09'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:21:09'!
FAILURE!
!Weapon methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:22:28' prior: 50492577!
type
	
	self subclassResponsibility ! !
!HSBlaster methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:23:09' overrides: 50493180!
type
	
	self subclassResponsibility ! !
!TurboLaserCannon methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:23:09' overrides: 50493180!
type
	
	self subclassResponsibility ! !
!Claw methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:23:09' overrides: 50493180!
type
	
	self subclassResponsibility ! !

!methodRemoval: Weapon #type stamp: 'sdfsf 5/1/2022 16:23:09'!
type
	
	self subclassResponsibility !
!Weapon methodsFor: 'accesing' stamp: 'sdfsf 5/1/2022 16:23:21'!
type
	
	self subclassResponsibility ! !
!Claw methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:23:43' prior: 50493193 overrides: 50493200!
type
	
	^#Claw! !
!HSBlaster methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:23:55' prior: 50493184 overrides: 50493200!
type
	
	^self! !
!TurboLaserCannon methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:24:19' prior: 50493189 overrides: 50493200!
type
	
	^#TurboLaserCannon! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:24:20'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:24:20'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:24:20'!
FAILURE!
!HSBlaster methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:24:44' prior: 50493209 overrides: 50493200!
type
	
	^#HSBlaster! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:24:45'!
PASSED!

Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:24:55'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #Aluminuim3000
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminuim3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:27:40'!
Object subclass: #Aluminuim3000
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #Aluminuim3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminuim3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:27:49'!
Robot subclass: #Aluminuim3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:27:55'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:28:07'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'type' stamp: 'sdfsf 5/1/2022 16:28:20' prior: 50492360!
type

	self subclassResponsibility ! !
!Aluminuim3000 methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:28:55' overrides: 50493425!
type
	^#Alumunium3000! !
!TankRover methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:29:13' overrides: 50493425!
type
	^#TankRover! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:29:38'!
initializeWithLife: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !
!Aluminuim3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:30:41' overrides: 16920235!
initialize
	self initializeWithLife: 0 speed: 3 maxWeaponWeight: #class! !

!methodRemoval: Robot #initializeType:life:speed:maxWeaponWeight: stamp: 'sdfsf 5/1/2022 16:31:45'!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:32:04' prior: 50493437!
initializeWithLife: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := 100*Year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:32:39'!
initializeWithSpeed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := 100*Year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !

!methodRemoval: Robot #initializeWithLife:speed:maxWeaponWeight: stamp: 'sdfsf 5/1/2022 16:32:50'!
initializeWithLife: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := 100*Year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	!
!Aluminuim3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:33:31' prior: 50493446 overrides: 16920235!
initialize
	self initializeWithSpeed: 90 * kilometer / hour maxWeaponWeight: 50 * kilogram.! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:34:38' overrides: 16920235!
initialize
	self initializeWithSpeed: 40 * kilometer / hour maxWeaponWeight: 200 * kilogram! !
!Aluminuim3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:35:47' prior: 50493430 overrides: 50493425!
type
	^#Aluminum3000! !

Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 16:36:17'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Aluminum3000 methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 16:36:35' overrides: 16920235!
initialize
	self initializeWithSpeed: 90 * kilometer / hour maxWeaponWeight: 50 * kilogram.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 16:36:48' overrides: 50493425!
type
	^#Aluminum3000! !

!classRemoval: #Aluminuim3000 stamp: 'sdfsf 5/1/2022 16:36:53'!
Robot subclass: #Aluminuim3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 16:37:33' prior: 50492495!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new].
	aRobotType = #TankRover ifTrue: [ ^ TankRover new].

	self error: 'Invalid Robot Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:37:57'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:38:35'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:38:35'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:38:35'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:38:45'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:38:51'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:38:55'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:39:00'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:39:02'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:39:15'!
ERROR!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:40:34' prior: 50493469!
initializeWithSpeed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := (100 * Year).
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:40:35'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:40:36'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:40:39'!
ERROR!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:41:34' prior: 50493835!
initializeWithSpeed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := (100 * year).
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:41:35'!
PASSED!
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:43:47' prior: 50492774 overrides: 50492737!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:43:55' prior: 50492756 overrides: 50492737!
attack: aVictim by: anAttacker 	
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].
! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:44:04' prior: 50492788 overrides: 50492737!
attack: aVictim by: anAttacker

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
	].! !
!Weapon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:44:14' prior: 50492737!
attack: aVictim by: anAttacker 	
	
	usedTimes := usedTimes + 1.
	self subclassResponsibility.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:44:15'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:44:15'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:44:15'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:44:15'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:44:15'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:44:16'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:44:16'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:44:16'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:44:16'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:44:16'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:44:21'!
FAILURE!
!Weapon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:34' prior: 50494034!
attack: aVictim by: anAttacker 	
	
	self subclassResponsibility.! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:41' prior: 50493989 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:46' prior: 50494002 overrides: 50494111!
attack: aVictim by: anAttacker 	
	
	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].
! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:51' prior: 50494117 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:57' prior: 50494019 overrides: 50494111!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:46:00'!
PASSED!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 16:46:29' prior: 50493913!
initializeWithSpeed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := (100 * year).
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:46:37' prior: 50492382!
addWeapon: aWeapon
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:46:43' prior: 50492394!
includesWeapon: aWeapon 

	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:46:47' prior: 50492400!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:46:51' prior: 50492407!
removeWeapon: aWeapon 

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:47:00' prior: 50492413!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:47:04' prior: 50492426!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:47:08' prior: 50492438!
weaponsCount

	^ weapons size 	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:49:53' prior: 50494295!
totalWeaponWeight
	
	^ weapons sum:[ :weapon | weapon weight] ifEmpty: [0*kilogram].! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:53:16' prior: 50494283!
totalSpeedImpact

	^ (weapons collect: [ :weapon | weapon  weight > 10 * kilogram]) 
	sum: [ :weapon | weapon speedImpact]ifEmpty:[0 * kilometer / hour].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:53:18'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:53:18'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:53:18'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:53:18'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:53:18'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:53:39' prior: 50494315!
totalSpeedImpact

	^ (weapons collect: [ :weapon | weapon  weight > (10 * kilogram)]) 
	sum: [ :weapon | weapon speedImpact]ifEmpty:[0 * kilometer / hour].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:53:42'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:53:42'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:53:42'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:53:42'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:53:42'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 15:51:03' prior: 50494390!
totalSpeedImpact

	| total index |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:54:02'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:55:25' prior: 50494465!
totalSpeedImpact

	| total index w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:55:26'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:57:20' prior: 50494546!
totalSpeedImpact

	| w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].
	^ w sum: [ :weapon | weapon speedImpact] ifEmpty: [0 * kilometer / hour].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:57:24'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:57:24'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:57:24'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:57:24'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:57:24'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:58:10' prior: 50494628!
totalSpeedImpact

	| w |
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].
	^ w sum: [ :weapon | weapon speedImpact] ifEmpty: [0 * kilometer / hour].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:58:23'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 16:58:23'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 16:58:23'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 16:58:23'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 16:58:23'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 16:58:26'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 15:51:03' prior: 50494704!
totalSpeedImpact

	| total index |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:02:35' prior: 50494783!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:02:36'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:55:25' prior: 50494797!
totalSpeedImpact

	| total index w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:05:48' prior: 50494876!
totalSpeedImpact

	| total index w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].
	
	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:06:50' prior: 50494891!
totalSpeedImpact

	| total index w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [0 * kilometer / hour].
	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:06:52'!
PASSED!

----End fileIn of /Users/sebascantini/Downloads/macos64/Packages/TerseGuide.pck.st----!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 16:53:16' prior: 50494904!
totalSpeedImpact

	^ (weapons collect: [ :weapon | weapon  weight > 10 * kilogram]) 
	sum: [ :weapon | weapon speedImpact]ifEmpty:[0 * kilometer / hour].! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:07:59' prior: 50497905!
totalSpeedImpact

	^ (weapons select: [ :weapon | weapon  weight > 10 * kilogram]) 
	sum: [ :weapon | weapon speedImpact]ifEmpty:[0 * kilometer / hour].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:08:02'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:08:02'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:08:02'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:08:02'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:08:02'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:06:50' prior: 50497913!
totalSpeedImpact

	| total index w|
	
	w := weapons collect: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [0 * kilometer / hour].
	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:08:28' prior: 50497988!
totalSpeedImpact

	| total index w|
	
	w := weapons select: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [0 * kilometer / hour].
	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:08:30'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:09:00' prior: 50498002!
totalSpeedImpact

	| total index w|
	
	w := weapons select: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [^0 * kilometer / hour].
	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= w size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total +  weapon speedImpact.
		index := index + 1.	
	].

	^ total.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:09:02'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:09:37' prior: 50498083!
totalSpeedImpact

	| w|
	
	w := weapons select: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [^0 * kilometer / hour].
	^ w sum:[ :weapon | weapon speedImpact ].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:09:40'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:09:53' prior: 50498164!
totalSpeedImpact

	| w |
	
	w := weapons select: [ :weapon | weapon  weight > (10 * kilogram)].
	w ifEmpty: [^0 * kilometer / hour].
	^ w sum:[ :weapon | weapon speedImpact ] ifEmpty: [^0 * kilometer / hour].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:09:55'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:10:20' prior: 50498240!
totalSpeedImpact

	
	
	^(weapons select: [ :weapon | weapon  weight > (10 * kilogram)]) sum:[ :weapon | weapon speedImpact ] ifEmpty: [^0 * kilometer / hour].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:10:24'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:10:31' prior: 50498317!
totalSpeedImpact

	
	
	^(weapons select: [ :weapon | weapon  weight > (10 * kilogram)])
	sum:[ :weapon | weapon speedImpact ] ifEmpty: [^0 * kilometer / hour].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:10:31'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:10:49' prior: 50498392!
totalSpeedImpact

	
	
	^(weapons select: [ :weapon | weapon  weight > (10 * kilogram)]) sum:[ :weapon | weapon speedImpact ] ifEmpty: [^0 * kilometer / hour].

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:10:58' prior: 50498468!
totalSpeedImpact

	
	
	^(weapons 
		select: [ :weapon | weapon  weight > (10 * kilogram)]) 
		sum:[ :weapon | weapon speedImpact ] ifEmpty: [^0 * kilometer / hour].

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:11:18' prior: 50494309!
totalWeaponWeight
	
	^ weapons
		sum: [ :weapon | weapon weight]	
		ifEmpty: [0*kilogram].! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 17:11:35' prior: 50498476!
totalSpeedImpact

	
	
	^(weapons 
		select: [ :weapon | weapon  weight > (10 * kilogram)]) 
		sum:[ :weapon | weapon speedImpact ]
		ifEmpty: [^0 * kilometer / hour].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:11:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:11:37'!
PASSED!
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:12:44' prior: 50494149 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	
	aVictim attackedWithClawBy: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:13:06' prior: 50498566 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	
	aVictim attackedWithClawBy: anAttacker.! !
!Robot methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:15:51'!
attackedWithClawBy: anAttacker
	
	self subclassResponsibility! !
!Robot methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:16:00'!
attackedWithHSBlasterBy: anAttacker
	
	self subclassResponsibility! !
!Robot methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:16:28'!
attackedWithHSTurboLaserCannonBy: anAttacker
	
	self subclassResponsibility! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:19:48' prior: 50498581 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	
	aVictim attackedWithClawBy: anAttacker.! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 16:45:51' prior: 50498603 overrides: 50494111!
attack: aVictim by: anAttacker
	
	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!Claw methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:22:27'!
verifyWeaponUses! !
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:22:54'!
verifyWeaponUses! !
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:23:03' prior: 50498626!
verifyWeaponUses
	self subclassResponsibility ! !
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:23:41'!
incrementWeaponUsesBy: aValue! !
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:23:55' prior: 50498634!
incrementWeaponUsesBy: aValue
	! !
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:24:12' prior: 50498638!
incrementWeaponUsesBy: aValue
	usedTimes := usedTimes + aValue ! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:25:14' prior: 50498610 overrides: 50494111!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementWeaponUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementWeaponUsesBy: 2
	].
	
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !
!Claw methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:25:16' prior: 50498648 overrides: 50494111!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementWeaponUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementWeaponUsesBy: 2.
	].
	
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 17:25:54'!
attackedWithClaw: aClaw By: anAttacker
	
	self subclassResponsibility! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 17:26:05'!
attackedWithHSBlaster: aHSBlaster By: anAttacker
	
	self subclassResponsibility! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 17:26:30'!
attackedWithTurboLaserCannon: aTurboLaserCannon By: anAttacker
	
	self subclassResponsibility! !

!methodRemoval: Robot #attackedWithHSTurboLaserCannonBy: stamp: 'sdfsf 5/1/2022 17:26:37'!
attackedWithHSTurboLaserCannonBy: anAttacker
	
	self subclassResponsibility!

!methodRemoval: Robot #attackedWithHSBlasterBy: stamp: 'sdfsf 5/1/2022 17:26:43'!
attackedWithHSBlasterBy: anAttacker
	
	self subclassResponsibility!

!methodRemoval: Robot #attackedWithClawBy: stamp: 'sdfsf 5/1/2022 17:26:46'!
attackedWithClawBy: anAttacker
	
	self subclassResponsibility!
!Claw methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:28:11'!
verifyUsesFrom: anAttacker
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ]! !
!Claw methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:29:14'!
attemptRemoveWeapon: anAttacker
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ]! !

!methodRemoval: Claw #verifyUsesFrom: stamp: 'sdfsf 5/1/2022 17:29:23'!
verifyUsesFrom: anAttacker
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ]!

!methodRemoval: Claw #verifyWeaponUses stamp: 'sdfsf 5/1/2022 17:29:27'!
verifyWeaponUses!
!Weapon methodsFor: 'maintenance' stamp: 'sdfsf 5/1/2022 17:29:35'!
attemptRemoveWeapon: anAttacker
	self subclassResponsibility ! !

!methodRemoval: Weapon #verifyWeaponUses stamp: 'sdfsf 5/1/2022 17:29:39'!
verifyWeaponUses
	self subclassResponsibility !
!HSBlaster methodsFor: 'nil' stamp: 'sdfsf 5/1/2022 17:30:57' overrides: 50498723!
attemptRemoveWeapon: anAttacker
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ]! !
!TurboLaserCannon methodsFor: 'nil' stamp: 'sdfsf 5/1/2022 17:31:02' overrides: 50498723!
attemptRemoveWeapon: anAttacker
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ]! !

!classRemoval: #TurboLaserCannon stamp: 'sdfsf 5/1/2022 17:32:08'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'sdfsf 5/1/2022 17:32:08'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'sdfsf 5/1/2022 17:32:09'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'sdfsf 5/1/2022 17:32:09'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'sdfsf 5/1/2022 17:32:09'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'sdfsf 5/1/2022 17:32:10'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'sdfsf 5/1/2022 17:32:10'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'sdfsf 5/1/2022 17:32:10'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

!methodRemoval: Weapon #type stamp: 'sdfsf 5/1/2022 17:43:43'!
type
	
	^type!
!Weapon methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 17:44:09' prior: 50499317!
attack: aVictim by: anAttacker

	self subclassResponsibility.! !

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 17:44:33'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 17:44:38'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 17:44:47'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLasterCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLasterCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 17:45:10'!
Weapon subclass: #TurboLasterCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 17:45:30'!
type
	^#Claw! !
!HSBlaster methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 17:45:44'!
type
	^#HSBlaster! !
!TurboLasterCannon methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 17:46:02'!
type
	^#TurboLaserCannon! !

!classRenamed: #TurboLasterCannon as: #TurboLaserCannon stamp: 'sdfsf 5/1/2022 17:46:09'!
Smalltalk renameClassNamed: #TurboLasterCannon as: #TurboLaserCannon!
!RobotWarsTest methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:46:09' prior: 50499012!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:46:09' prior: 50499099!
createTurboLaserCannon

	^ Weapon ofType: #TurboLaserCannon ! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:46:09' prior: 50499452!
type
	^#TurboLaserCannon! !
!Weapon class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:46:09' prior: 50499368!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:47:30' overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:00' overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:25' overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
		
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
	].! !
!Weapon methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 17:48:38' prior: 50499309!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !
!Weapon methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 17:48:45' prior: 50499555!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !
!Weapon methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 17:49:17'!
initializeWithWeight: aWeight andSpeedImpact: aSpeedImpact 
	
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'sdfsf 5/1/2022 17:49:31'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:50:44' overrides: 16920235!
initialize
		self initializeWithWeight: 10 * kilogram andSpeedImpact: 5 * kilometer / hour! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:51:25' prior: 50499585 overrides: 16920235!
initialize
		self initializeWithWeight: 10 * kilogram andSpeedImpact: 5 * kilometer / hour.
		self initializeWithWeight: 20 * kilogram andSpeedImpact: 10 * kilometer / hour.
		self initializeWithWeight: 40 * kilogram andSpeedImpact: 15 * kilometer / hour.! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:51:28' prior: 50499592 overrides: 16920235!
initialize
		self initializeWithWeight: 10 * kilogram andSpeedImpact: 5 * kilometer / hour.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:51:42' overrides: 16920235!
initialize
	
	self initializeWithWeight: 20 * kilogram andSpeedImpact: 10 * kilometer / hour.! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:51:47' prior: 50499604 overrides: 16920235!
initialize
	
	self initializeWithWeight: 10 * kilogram andSpeedImpact: 5 * kilometer / hour.! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:51:58' overrides: 16920235!
initialize
	
		self initializeWithWeight: 40 * kilogram andSpeedImpact: 15 * kilometer / hour.! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:52:01' prior: 50499625 overrides: 16920235!
initialize
	
	self initializeWithWeight: 40 * kilogram andSpeedImpact: 15 * kilometer / hour.! !
!Weapon class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 17:52:30' prior: 50499489!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !
!Weapon class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 17:52:55' prior: 50499639!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new ].
	aWeaponType = #HSBlaster ifTrue: [ ^HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:52:56'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:52:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:52:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:52:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:52:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:52:57'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:53:56' prior: 50499507 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].

	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:54:02' prior: 50499733 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
		usedTimes := usedTimes + 1.
	].

	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !
!Weapon methodsFor: 'type' stamp: 'sdfsf 5/1/2022 17:54:38'!
type
	
	self subclassResponsibility.! !
!Weapon methodsFor: 'nil' stamp: 'sdfsf 5/1/2022 17:55:13'!
incrementUsesBy: aValue
	usedTimes := usedTimes + aValue ! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:55:48' prior: 50499747 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
		self incrementUsesBy: 2.
	].

	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:55:49'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:55:49'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:55:49'!
ERROR!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:56:04' prior: 50499771 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
		self incrementUsesBy: 2.
	].

	usedTimes > 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:56:05'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:56:05'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:56:05'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:56:21' prior: 50499858 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 2.
	].

	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:22'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:56:22'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:56:22'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:56:29' prior: 50499941 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 2.
	].

	usedTimes > 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:56:30'!
PASSED!
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:57:22' prior: 50499521 overrides: 50499391!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].

	usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:57:39' prior: 50500105 overrides: 50499391!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 1
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		self incrementUsesBy: 1
	].

	usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:57:40'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:58:00' prior: 50500023 overrides: 50499391!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 2.
	].

	usedTimes > 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:58:01'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:58:01'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:58:01'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:58:07' prior: 50500208 overrides: 50499391!
attack: aVictim by: anAttacker
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		self incrementUsesBy: 1.
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 2.
	].

	usedTimes >= 2 ifTrue: [ anAttacker removeWeapon: self ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 17:58:08'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 18:00:08' prior: 50499655!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new ].
	aWeaponType = #HSBlaster ifTrue: [ ^HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:00:08'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:00:09'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:00:09'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:00:09'!
PASSED!
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'sdfsf 5/1/2022 18:00:28' prior: 50499091!
createClaw

	^ Claw new ! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'sdfsf 5/1/2022 18:00:37' prior: 50499095!
createHSBlaster

	^ HSBlaster new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'sdfsf 5/1/2022 18:00:45' prior: 50499479!
createTurboLaserCannon

	^ TurboLaserCannon new! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:00:46'!
PASSED!
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:00' prior: 50500122 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:00' prior: 50500529 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:02:12' prior: 50500547 overrides: 50499391!
attack: aVictim by: anAttacker

	self incrementUsesBy: 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:02:36' prior: 50500565 overrides: 50499391!
attack: aVictim by: anAttacker

	self incrementUsesBy: 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:02:50' prior: 50499539 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
		
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:02:57'!
PASSED!

!methodRemoval: Weapon class #ofType: stamp: 'sdfsf 5/1/2022 18:03:14'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new ].
	aWeaponType = #HSBlaster ifTrue: [ ^HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new ].!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:03:18'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:03:53' prior: 50500289 overrides: 50499391!
attack: aVictim by: anAttacker

	self incrementUsesBy: 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		self incrementUsesBy: 1.
	].

	usedTimes >= 2 ifTrue: [ anAttacker removeWeapon: self ].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:04:58' prior: 50500761 overrides: 50499391!
attack: aVictim by: anAttacker

	self incrementUsesBy: 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes >= 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:47:30' prior: 50500775 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:00' prior: 50500583 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 17:48:25' prior: 50500601 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
		
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:05:45' prior: 50500821 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
		
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:05:53' prior: 50500803 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:05:58' prior: 50500855 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].

	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!Robot methodsFor: 'type' stamp: 'sdfsf 5/1/2022 18:06:46' prior: 50499140!
type

	self subclassResponsibility ! !

Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 18:06:56'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #Aluminum3000
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 18:07:21'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'sdfsf 5/1/2022 18:07:36'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!TankRover methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 18:07:48' overrides: 50500889!
type
	^#TankRover! !
!Aluminum3000 methodsFor: 'no messages' stamp: 'sdfsf 5/1/2022 18:08:00' overrides: 50500889!
type
	^Aluminum3000! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:08:03' prior: 50500940 overrides: 50500889!
type
	^#Aluminum3000! !
!Robot class methodsFor: 'instance creation' stamp: 'sdfsf 5/1/2022 18:08:13' prior: 50499275!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ].
	aRobotType = #TankRover ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:08:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:08:14'!
ERROR!

!methodRemoval: Robot class #ofType: stamp: 'sdfsf 5/1/2022 18:08:31'!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ].
	aRobotType = #TankRover ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:10:41'!
initializer

	self initializeWithSpeed: 90 * kilometer / hour andWeight: 50 * kilogram.! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:10:51'!
initializer

	self initializeWithSpeed: 40 * kilometer / hour andWeight: 200 * kilogram.! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 18:11:39'!
initializeWithSpeed: aSpeed andWeight: aMaxWeaponWeight
	life := 100 * year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:11:45'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'sdfsf 5/1/2022 18:12:21' prior: 50499082!
createAluminum3000

	^ Aluminum3000 new! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'sdfsf 5/1/2022 18:12:29' prior: 50499087!
createTankRover

	^ TankRover new! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:12:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:12:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:12:30'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:13:00' overrides: 16920235!
initialize

	self initializeWithSpeed: 90 * kilometer / hour andWeight: 50 * kilogram.! !

!methodRemoval: Aluminum3000 #initializer stamp: 'sdfsf 5/1/2022 18:13:04'!
initializer

	self initializeWithSpeed: 90 * kilometer / hour andWeight: 50 * kilogram.!
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:13:10' overrides: 16920235!
initialize

	self initializeWithSpeed: 40 * kilometer / hour andWeight: 200 * kilogram.! !

!methodRemoval: TankRover #initializer stamp: 'sdfsf 5/1/2022 18:13:14'!
initializer

	self initializeWithSpeed: 40 * kilometer / hour andWeight: 200 * kilogram.!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:13:21'!
PASSED!

!methodRemoval: Robot #initializeType:life:speed:maxWeaponWeight: stamp: 'sdfsf 5/1/2022 18:14:48'!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 18:16:00' prior: 50501055!
initializeWithSpeed: aSpeed andWeight: aMaxWeaponWeight
	life := 100 * year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new

	! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/1/2022 18:16:02' prior: 50501307!
initializeWithSpeed: aSpeed andWeight: aMaxWeaponWeight
	life := 100 * year.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new.

	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:14' prior: 50499180!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:18' prior: 50499218!
weaponsCount

	^ weapons size 	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:21' prior: 50499206!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:25' prior: 50499193!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:29' prior: 50499187!
removeWeapon: aWeapon 

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:34' prior: 50499174!
includesWeapon: aWeapon 

	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:16:44' prior: 50499162!
addWeapon: aWeapon
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:19:45' prior: 50501334!
totalWeaponWeight
	
	^ weapons sum: [ :weapon | weapon weight] ifEmpty: [ 0 * kilogram].! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 18:21:33' prior: 50501344!
totalSpeedImpact

	^(weapons
		select: [ :weapon | weapon weight > (10 * kilogram) ])
		sum: [ :weapon | weapon speedImpact ]
		ifEmpty: [ 0 * kilometer / hour ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:21:34'!
PASSED!
!Weapon methodsFor: 'accesing' stamp: 'sdfsf 5/1/2022 18:24:26'!
usesTimes
	
	^ usedTimes ! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:27:22' prior: 50500838 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
		
	aVictim attackedWithTurboLaserCanon: self By: anAttacker.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:28:35'!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		(aTurboLaserCanon usedTimes) = 10 ifTrue: [ anAttacker removeWeapon: self ]! !
!Weapon methodsFor: 'accesing' stamp: 'sdfsf 5/1/2022 18:28:42'!
usedTimes
	
	^ usedTimes ! !

!methodRemoval: Weapon #usesTimes stamp: 'sdfsf 5/1/2022 18:28:45'!
usesTimes
	
	^ usedTimes !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:28:54' prior: 50501470!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		aTurboLaserCanon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:29:39'!
attackedWithTurboLaserCanon: TurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		TurboLaserCanon usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 18:30:54'!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

	self subclassResponsibility ! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 18:31:05'!
attackedWithClaw: aClaw By: anAttacker

	self subclassResponsibility ! !
!Robot methodsFor: 'defending' stamp: 'sdfsf 5/1/2022 18:31:21'!
attackedWithHSBlaster: aHSBlaster By: anAttacker

	self subclassResponsibility ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:31:23'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:31:23'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:31:23'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:31:55' prior: 50501485 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		(aTurboLaserCanon usedTimes = 10) ifTrue: [ anAttacker removeWeapon: self ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:31:56'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:31:56'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:31:56'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:32:22'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:32:22'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:32:22'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:32:24'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:35:50' prior: 50501587 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		(aTurboLaserCanon usedTimes = 10) ifTrue: [ anAttacker removeWeapon: aTurboLaserCanon ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:35:51'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:35:51'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:35:51'!
ERROR!
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:36:09' prior: 50501494 overrides: 50501503!
attackedWithTurboLaserCanon: TurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		TurboLaserCanon usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: TurboLaserCanon .
			anAttacker addWeapon: (HSBlaster new) ]! !
!Claw methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:36:54' prior: 50500789 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim attackedWithClaw: self By: anAttacker.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:37:41' overrides: 50501508!
attackedWithClaw: aClaw By: anAttacker

		self life: self life - (25 * year).
		aClaw = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:38:34' overrides: 50501508!
attackedWithClaw: aClaw By: anAttacker

		self life: self life - (5 * year).
		anAttacker removeWeapon: aClaw .! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:38:55'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:38:55'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:38:55'!
FAILURE!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:39:07'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:39:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:39:07'!
FAILURE!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:39:22' prior: 50501836 overrides: 50501508!
attackedWithClaw: aClaw By: anAttacker

		self life: self life - (25 * year).
		aClaw usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:39:23'!
PASSED!
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:40:16' prior: 50500873 overrides: 50499391!
attack: aVictim by: anAttacker

	usedTimes := usedTimes + 1.
	
	aVictim attackedWithHSBlaster: self By: anAttacker.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:41:07' overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

	self life: self life - (5 * year).
	aHSBlaster usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: aHSBlaster .
		anAttacker addWeapon: (TurboLaserCannon new) ].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:42:45' prior: 50502077 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

	self life: self life - (5 * year).
	aHSBlaster usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: aHSBlaster .
		anAttacker addWeapon: (TurboLaserCannon new) ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:43:12' overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

		self life: self life - (50 * year).
		self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:43:13'!
PASSED!

!methodRemoval: Weapon #incrementUsesBy: stamp: 'sdfsf 5/1/2022 18:43:54'!
incrementUsesBy: aValue
	usedTimes := usedTimes + aValue !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:44:00'!
PASSED!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 18:44:29' prior: 50501736 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		self life: self life - (100 * year).
		aTurboLaserCanon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCanon ]! !
!Robot methodsFor: 'attacking' stamp: 'sdfsf 5/1/2022 18:45:44' prior: 50499152!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'sdfsf 5/1/2022 18:48:31' prior: 50498825!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRoverWithTurboLaserCannon.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'sdfsf 5/1/2022 18:48:31' prior: 50502264!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRoverWithTurboLaserCannon.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'sdfsf 5/1/2022 18:50:58' prior: 50499461!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	attacked := self createAluminum3000.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'sdfsf 5/1/2022 18:51:29' prior: 50499030!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	attacked := self createTankRover.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: #Claw).
	! !
!RobotWarsTest methodsFor: 'situations' stamp: 'sdfsf 5/1/2022 18:57:36'!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmounts
.
	self addWeapon: attackerWeapon.
	
	self attack: attacked with: attackerWeapon.! !
!RobotWarsTest methodsFor: 'situations' stamp: 'sdfsf 5/1/2022 18:57:38' prior: 50502348!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmounts
.
	self addWeapon: attackerWeapon.
	
	self attack: attacked with: attackerWeapon.! !
!RobotWarsTest methodsFor: 'situations' stamp: 'sdfsf 5/1/2022 18:57:38' prior: 50502356!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmount
.
	self addWeapon: attackerWeapon.
	
	self attack: attacked with: attackerWeapon.! !
!RobotWarsTest methodsFor: 'situations' stamp: 'sdfsf 5/1/2022 18:58:12' prior: 50502364!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmount
.
	self addWeapon: attackerWeapon.
	
	anAmount time self attack: attacked with: attackerWeapon.! !
!RobotWarsTest methodsFor: 'situations' stamp: 'sdfsf 5/1/2022 18:59:10' prior: 50502372!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmount
.
	self addWeapon: attackerWeapon.
	
	anAmount timesRepeat: [ self attack: attacked with: attackerWeapon ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:59:14'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:59:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:59:14'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'sdfsf 5/1/2022 18:59:55' prior: 50502287!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRover.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 18:59:56'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'sdfsf 5/1/2022 19:01:41' prior: 50498975!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker := self createAluminum3000With: (self createClaw) andAttack: attacked anAmount: 2.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'sdfsf 5/1/2022 19:01:55' prior: 50502555!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker := self createAluminum3000With: attackerWeapon andAttack: attacked anAmount: 2.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !

!methodRemoval: RobotWarsTest #createAluminum3000With:andAttack:anAmount: stamp: 'sdfsf 5/1/2022 19:02:31'!
createAluminum3000With: attackerWeapon andAttack: attacked anAmount: anAmount
.
	self addWeapon: attackerWeapon.
	
	anAmount timesRepeat: [ self attack: attacked with: attackerWeapon ].!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:09' prior: 50502330!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: #Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:09' prior: 50502600!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: #Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:41:40' prior: 50502573!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	2 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:04' prior: 50502311!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 19:03:30'!
PASSED!
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:06:45' prior: 50502098 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

		self life: self life - (50 * year).
		anAttacker addWeapon: (Claw new).! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 19:06:46'!
PASSED!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:52:52' prior: 50501994 overrides: 50501508!
attackedWithClaw: aClaw By: anAttacker

		life := life - (25 * year).
		aClaw usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:53:05' prior: 50502088 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

	life := life - (5 * year).
	aHSBlaster usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: aHSBlaster .
		anAttacker addWeapon: (TurboLaserCannon new) ].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:53:14' prior: 50502246 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		life := life - (100 * year).
		aTurboLaserCanon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCanon ]! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:53:28' prior: 50502844 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		life := (0 * year).
		aTurboLaserCanon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCanon ]! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:53:31' prior: 50502854 overrides: 50501503!
attackedWithTurboLaserCanon: aTurboLaserCanon By: anAttacker

		life := 0 * year.
		aTurboLaserCanon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCanon ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 19:53:36'!
PASSED!

!methodRemoval: Robot #life: stamp: 'sdfsf 5/1/2022 19:53:52'!
life: newLife

	life := newLife!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 19:53:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 19:53:57'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:54:10'!
ERROR!
!Robot methodsFor: 'life' stamp: 'sdfsf 5/1/2022 19:54:26'!
life: newLife

	life! !
!Robot methodsFor: 'life' stamp: 'sdfsf 5/1/2022 19:54:32' prior: 50503013!
life: newLife

	life := newLife! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:57:18' prior: 50501844 overrides: 50501508!
attackedWithClaw: aClaw By: anAttacker

		life := life - (5 * year).
		anAttacker removeWeapon: aClaw .! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:57:54' prior: 50502748 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

		self life: self life - (50 * year).
		self life <= 50 * year ifTrue: anAttacker addWeapon: (Claw new).! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:58:41' prior: 50503029 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

		self life: self life - (50 * year).
		anAttacker addWeapon: (Claw new).! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 19:58:57' prior: 50501818 overrides: 50501503!
attackedWithTurboLaserCanon: TurboLaserCanon By: anAttacker

		self life: 0 * year.
		TurboLaserCanon usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: TurboLaserCanon .
			anAttacker addWeapon: (HSBlaster new) ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 19:58:59'!
PASSED!
!TankRover methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/1/2022 20:06:17' prior: 50503038 overrides: 50501513!
attackedWithHSBlaster: aHSBlaster By: anAttacker

		life := life - (50 * year).
		anAttacker addWeapon: (Claw new).! !
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 20:31:30' prior: 50501383!
totalSpeedImpact

	^weapons
		sum: [ :weapon | weapon speedImpact ]
		ifEmpty: [ 0 * kilometer / hour ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/1/2022 20:31:31'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'sdfsf 5/1/2022 20:34:17' prior: 50503131!
totalSpeedImpact

	^(weapons
		select: [ :weapon | weapon weight > (10 * kilogram) ])
		sum: [ :weapon | weapon speedImpact ]
		ifEmpty: [ 0 * kilometer / hour ].! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:50:08'!
attack: attacked using: aWeapon andReduceLifeBy: damage

	| attacker|
	
	attacker := self createAluminum3000.
	attacker addWeapon: aWeapon.
	
	attacker attack: attacked with: aWeapon.
	
	self assert: (100 * year) - damage equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:51:31' prior: 50498887!
test07ClawReducesLifeOfAluminum3000By25
	
	self attack: self createAluminum3000 using: self createClaw andReduceLifeBy: (100 * year) - (25 * year)
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:51:31'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:52:38' prior: 50503226!
test07ClawReducesLifeOfAluminum3000By25
	
	self attack: self createAluminum3000 using: self createClaw andReduceLifeBy: (25 * year)
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/2/2022 09:53:12'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/2/2022 09:53:13'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:53:41' prior: 50498901!
test08ClawReducesLifeOfTankRoverBy5

	
	
	self attack: self createTankRover using: self createClaw andReduceLifeBy: (5 * year)
	
	! !

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/2/2022 09:53:46'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:54:06' prior: 50498915!
test09HSBlasterReducesLifeOfAluminum3000By5

	self attack: self createAluminum3000 using: self createHSBlaster andReduceLifeBy: (5 * year)
	! !

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/2/2022 09:54:07'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'sdfsf 5/2/2022 09:54:35' prior: 50498930!
test10HSBlasterReducesLifeOfTankRoverBy50

	self attack: self createTankRover using: self createHSBlaster andReduceLifeBy: (50 * year)
	
	! !

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sdfsf 5/2/2022 09:54:36'!
PASSED!

!classRemoval: #TurboLaserCannon stamp: 'sdfsf 5/2/2022 09:55:04'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'sdfsf 5/2/2022 09:55:04'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'sdfsf 5/2/2022 09:55:05'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'sdfsf 5/2/2022 09:55:05'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'sdfsf 5/2/2022 09:55:05'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'sdfsf 5/2/2022 09:55:06'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'sdfsf 5/2/2022 09:55:06'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'sdfsf 5/2/2022 09:55:06'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 09:55:35'!
PASSED!
!Backpack methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 09:58:15' prior: 50504030!
totalPoints
	
	^(container
		select: [ :portableObject | portableObject doesItAddPoints ])
		sum: [ :portableObject | portableObject points]
		ifEmpty: [ 0 ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:15'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:18'!
PASSED!
!Backpack methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 09:58:56' prior: 50504042!
totalWeight
	
	^container
		sum: [ :portableObject | portableObject weight]
		ifEmpty: [ 0 ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 09:58:57'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:02:25'!
InitializeBernard

	^ PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503909!
test02ADoorOpenedCanBeClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeClosedBy: mainCharacter.
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503814!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503976!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503857!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503828!
test04ADoorClosedCanBeOpened
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: mainCharacter.
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503893!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: mainCharacter using: oldKey.
	self assert: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503840!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503964!
test11WhenUsingADoorOpenedGetsClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503921!
test03ADoorClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	
	self 
		should: [ aDoor toBeClosedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503935!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503952!
test10WhenUsingADoorClosedGetsOpened
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self assert: aDoor isOpen ! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:02:25' prior: 50503874!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:03:49'!
InitializeOldRustyKey

	^ PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504884!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504924!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	oldKey := (self InitializeOldRustyKey).
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504910!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: mainCharacter using: oldKey.
	self assert: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504961!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504869!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:03:49' prior: 50504986!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:04:50' prior: 50505064!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:07:04' prior: 50505050!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:07:06'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:07:31' prior: 50505108!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:07:49' prior: 50504949!
test03ADoorClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	
	self 
		should: [ aDoor toBeClosedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:07:57' prior: 50505175!
test03ADoorClosedCanNotBeClosedAgain
	
	| aDoor |
	
	aDoor := Door closed.
	
	self 
		should: [ aDoor toBeClosedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:08:24' prior: 50504847!
test02ADoorOpenedCanBeClosed
	
	| aDoor |
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeClosedBy: self InitializeBernard.
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:08:44' prior: 50505094!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:11' prior: 50504857!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:25' prior: 50504900!
test04ADoorClosedCanBeOpened
	
	| aDoor |
	
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: self InitializeBernard.
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:43' prior: 50505023!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door closed.
	oldKey := (self InitializeOldRustyKey).
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:49' prior: 50505238!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| aDoor oldKey |

	aDoor := Door closed.
	oldKey := (self InitializeOldRustyKey).
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:57' prior: 50505009!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:10:07' prior: 50505078!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:10:18' prior: 50505037!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: self InitializeBernard using: oldKey.
	self assert: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:11:26'!
m1: aDoor m2: mainCharacter

	self assert: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:11:26' prior: 50504939!
test11WhenUsingADoorOpenedGetsClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self m1: aDoor m2: mainCharacter.! !

!methodRemoval: DoorTest #m1:m2: stamp: 'sdfsf 5/2/2022 10:11:41'!
m1: aDoor m2: mainCharacter

	self assert: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self deny: aDoor isOpen!
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:11:51' prior: 50505311!
test11WhenUsingADoorOpenedGetsClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:12:18'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:12:20'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:12:26'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:13:16' prior: 50505325!
test11WhenUsingADoorOpenedGetsClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := self InitializeBernard.
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: self InitializeBernard.	
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:13:21' prior: 50505380!
test11WhenUsingADoorOpenedGetsClosed
	
	| aDoor |
	
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: self InitializeBernard.	
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:17:15'!
compareErrorIn: aBlock with: errorBlock

self 
		should: [ aBlock]
		raise: Error
		withMessageText: errorBlock value.! !
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:17:19' prior: 50505398!
compareErrorIn: aBlock with: errorBlock

self 
		should: [ aBlock ]
		raise: Error
		withMessageText: errorBlock value.! !
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:17:25' prior: 50505405!
compareErrorIn: aBlock with: errorBlock

self 
		should: aBlock
		raise: Error
		withMessageText: errorBlock value.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:18:08' prior: 50505219!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ] with: [Door alreadyOpenedErrorDescription].
		
	self assert: aDoor isOpen.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:18:09'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:18:10'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:18:56' prior: 50505187!
test03ADoorClosedCanNotBeClosedAgain
	
	| aDoor |
	
	aDoor := Door closed.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ] with: [Door alreadyClosedErrorDescription].
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:18:57'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:20:02' prior: 50505252!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| aDoor oldKey |

	aDoor := Door closed.
	oldKey := (self InitializeOldRustyKey).
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		with: [ Door noNeedForAKeyErrorDescription ].
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:20:06' prior: 50505523!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| aDoor oldKey |

	aDoor := Door closed.
	oldKey := (self InitializeOldRustyKey).
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		with: [ Door noNeedForAKeyErrorDescription ].
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:20:14' prior: 50505419!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [Door alreadyOpenedErrorDescription].
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:20:23' prior: 50505471!
test03ADoorClosedCanNotBeClosedAgain
	
	| aDoor |
	
	aDoor := Door closed.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ]
		with: [Door alreadyClosedErrorDescription].
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:21:04' prior: 50505162!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ]
		with: [ Door alreadyClosedErrorDescription].
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:21:53' prior: 50505265!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ]
		with: [ Door closedWithKeyErrorDescription].
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:22:28' prior: 50505278!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		with: [ Door notCorrectKeyErrorDescription. ].
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:22:32' prior: 50505596!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		with: [ Door notCorrectKeyErrorDescription. ].
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:23:15' prior: 50505206!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeUsedBy: self InitializeBernard ]
		with: [Door closedWithKeyErrorDescription.].
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:16'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:16'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:16'!
FAILURE!
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:23:38' prior: 50505631!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:39'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:39'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:39'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:23:51'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:23:51'!
FAILURE!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:21:53' prior: 50505584!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ]
		with: [ Door closedWithKeyErrorDescription].
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:09:57' prior: 50505947!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: self InitializeBernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:24:28'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'sdfsf 5/2/2022 10:25:21' prior: 50505688!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeUsedBy: self InitializeBernard ]
		with: [ Door closedWithKeyErrorDescription. ].
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:25:22'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:25:54' prior: 50505959!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [ Door closedWithKeyErrorDescription.].
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:25:55'!
PASSED!
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:29:03'!
ADoorKeyClosedTryDo: aBlock compareErrorWith: anErrorBlock
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: aBlock
		with: anErrorBlock.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:29:08'!
aDoorKeyClosedTryDo: aBlock compareErrorWith: anErrorBlock
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: aBlock
		with: anErrorBlock.
		
	self deny: aDoor isOpen! !

!methodRemoval: DoorTest #ADoorKeyClosedTryDo:compareErrorWith: stamp: 'sdfsf 5/2/2022 10:29:12'!
ADoorKeyClosedTryDo: aBlock compareErrorWith: anErrorBlock
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: aBlock
		with: anErrorBlock.
		
	self deny: aDoor isOpen!

!methodRemoval: DoorTest #aDoorKeyClosedTryDo:compareErrorWith: stamp: 'sdfsf 5/2/2022 10:32:46'!
aDoorKeyClosedTryDo: aBlock compareErrorWith: anErrorBlock
	
	| aDoor oldKey |
	
	oldKey := (self InitializeOldRustyKey).
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: aBlock
		with: anErrorBlock.
		
	self deny: aDoor isOpen!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:34:31' prior: 50505617!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor |
	
	aDoor := Door closedWith: self InitializeOldRustyKey.
	
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		with: [ Door notCorrectKeyErrorDescription. ].
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 10:35:16'!
InitializeDoorWithOldKey
	^Door closedWith: self InitializeOldRustyKey.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:35:39' prior: 50506068!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor |
	aDoor := self InitializeDoorWithOldKey .
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [ Door closedWithKeyErrorDescription.].
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:35:42'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:35:43'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:36:00' prior: 50506164!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor |
	
	aDoor := self InitializeDoorWithOldKey.
	
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		with: [ Door notCorrectKeyErrorDescription. ].
		
	self deny: aDoor isOpen ! !

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:36:00'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:36:00'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:36:00'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:36:00'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:36:00'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:36:01'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:36:23' prior: 50505540!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| aDoor oldKey |

	aDoor := Door closed.
	oldKey := self InitializeOldRustyKey.
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard using: oldKey ]
		with: [ Door noNeedForAKeyErrorDescription ].
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:36:33' prior: 50505293!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: self InitializeBernard using: oldKey.
	self assert: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'sdfsf 5/2/2022 10:36:55' prior: 50505572!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| aDoor oldKey |
	
	oldKey := self InitializeOldRustyKey.
	aDoor := Door closedWith: oldKey.
	
	self compareErrorIn: [ aDoor toBeClosedBy: self InitializeBernard ]
		with: [ Door alreadyClosedErrorDescription].
		
	self deny: aDoor isOpen! !
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:38:55' prior: 50504068!
add: aPortableObject

	aPortableObject addTo: self.
	
	(aPortableObject isKindOf: NoPointsPortableObject) ifTrue: [
		self assertWeightAdding: aPortableObject tolerating: 0.
		container add: aPortableObject.
	].

	(aPortableObject isKindOf: PointsPortableObject) ifTrue: [
		self assertWeightAdding: aPortableObject tolerating: 5.
		self assertPointsAdding: aPortableObject.
		container add: aPortableObject.
	].	! !
!NoPointsPortableObject methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 10:40:10' overrides: 50504451!
addTo: aBackpack
	aBackpack addNoPointsPortableObject: self.! !
!PointsPortableObject methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 10:40:28' overrides: 50504451!
addTo: aBackpack
	aBackpack addPointsPortableObject: self.! !
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:41:56'!
addNoPointsPortableObject: aPortableObject

	self assertWeightAdding: aPortableObject tolerating: 0.
	container add: aPortableObject.! !
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:42:14'!
addPointsPortableObject: aPortableObject

	self assertWeightAdding: aPortableObject tolerating: 5.
	self assertPointsAdding: aPortableObject.
	container add: aPortableObject.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:16'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:16'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:42:16'!
FAILURE!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:16'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:16'!
FAILURE!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:16'!
ERROR!
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:42:30' prior: 50506325!
add: aPortableObject

	aPortableObject addTo: self.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:31'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:42:34'!
PASSED!

Object subclass: #Testing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Testing category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:43:22'!
Object subclass: #Testing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

Testing subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:43:46'!
Testing subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

TestCase subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Test category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:43:54'!
TestCase subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Test stamp: 'sdfsf 5/2/2022 10:44:21'!
TestCase subclass: #Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

Testing subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:44:32'!
Testing subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Testing methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:44:44'!
compareErrorIn: aBlock with: errorBlock

self 
		should: aBlock
		raise: Error
		withMessageText: errorBlock value.! !

!methodRemoval: DoorTest #compareErrorIn:with: stamp: 'sdfsf 5/2/2022 10:44:44'!
compareErrorIn: aBlock with: errorBlock

self 
		should: aBlock
		raise: Error
		withMessageText: errorBlock value.!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:45:13' prior: 50503682!
test01CanNotCreateBackpackWithZeroMaxWeight

	self compareErrorIn: [ Backpack containingUpTo: 0 limitingPointsTo: 100 ]
		with: Backpack invalidWeightCapacityErrorDescription.
! !

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:45:31'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:45:34'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:45:34'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:45:34'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:45:34'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:45:34'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:45:34'!
ERROR!

TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 10:46:01'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:46:12' prior: 50505552!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	TestCase compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [Door alreadyOpenedErrorDescription].
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:46:21' prior: 50506678!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	Testing compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [Door alreadyOpenedErrorDescription].
		
	self assert: aDoor isOpen.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:46:22'!
ERROR!
!DoorTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:46:47'!
compareErrorIn: aBlock with: errorBlock

self 
		should: aBlock
		raise: Error
		withMessageText: errorBlock value.! !
!DoorTest methodsFor: 'opening' stamp: 'sdfsf 5/2/2022 10:46:58' prior: 50506688!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	aDoor := Door opened.
	
	self compareErrorIn: [ aDoor toBeOpenedBy: self InitializeBernard ]
		with: [Door alreadyOpenedErrorDescription].
		
	self assert: aDoor isOpen.! !

!classRemoval: #Testing stamp: 'sdfsf 5/2/2022 10:47:05'!
Object subclass: #Testing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 10:47:07'!
PASSED!
!BackpackTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:47:24'!
compareErrorIn: aBlock with: errorBlock

self 
		should: aBlock
		raise: Error
		withMessageText: errorBlock value.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:47:31'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:47:58' prior: 50503691!
test02CanNotCreateBackpackWithNegativeMaxWeight

		self compareErrorIn: [ Backpack containingUpTo: -1 limitingPointsTo: 100 ]
		with: Backpack invalidWeightCapacityErrorDescription.! !

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:47:59'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:48:34' prior: 50503700!
test03CanNotCreateBackpackWithZeroMaxPoints

	self compareErrorIn: [ Backpack containingUpTo: 10 limitingPointsTo: 0 ]
		with: Backpack invalidWeightCapacityErrorDescription.
! !

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:48:35'!
FAILURE!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:48:37'!
FAILURE!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:49:06' prior: 50506841!
test03CanNotCreateBackpackWithZeroMaxPoints

	self compareErrorIn: [ Backpack containingUpTo: 10 limitingPointsTo: 0 ]
		with: [ Backpack invalidPointsCapacityErrorDescription. ].
! !

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:49:08'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:49:39' prior: 50503709!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self compareErrorIn: [ Backpack containingUpTo: 10 limitingPointsTo: -1 ]
		with: [ Backpack invalidPointsCapacityErrorDescription. ].! !

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:49:40'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:50:04' prior: 50503718!
test05CanNotCreateBackpackWithNoIntegerMaxWeight
	
	self compareErrorIn: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		with: [  Backpack weightCapacityMustBeIntegerErrorDescription.]
! !

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:50:05'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:50:28' prior: 50503727!
test06CanNotCreateBackpackWithNoIntegerMaxPoints

	self compareErrorIn: [ Backpack containingUpTo: 100 limitingPointsTo: 1.0 ]
		with: [  Backpack weightCapacityMustBeIntegerErrorDescription.]! !

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:50:29'!
FAILURE!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:51:03' prior: 50507061!
test06CanNotCreateBackpackWithNoIntegerMaxPoints

	self compareErrorIn: [ Backpack containingUpTo: 100 limitingPointsTo: 1.0 ]
		with: [ Backpack pointsCapacityMustBeIntegerErrorDescription.]
! !

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:51:04'!
PASSED!
!BackpackTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:52:37'!
compareInvalidWeightCapacityErrorDescriptionWith: aBlock

| invalidWeightCapacityErrorDescription |
self 
		should: aBlock
		raise: Error
		withMessageText: invalidWeightCapacityErrorDescription.! !
!BackpackTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:53:06' prior: 50507142!
compareInvalidWeightCapacityErrorDescriptionWith: aBlock


self 
		should: aBlock
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:53:29' prior: 50506606!
test01CanNotCreateBackpackWithZeroMaxWeight

	self compareInvalidWeightCapacityErrorDescriptionWith: [ Backpack containingUpTo: 0 limitingPointsTo: 100 ]
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:53:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:53:30'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:53:42' prior: 50506773!
test02CanNotCreateBackpackWithNegativeMaxWeight

		self compareInvalidWeightCapacityErrorDescriptionWith: [ Backpack containingUpTo: -1 limitingPointsTo: 100 ]! !

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:53:43'!
PASSED!
!BackpackTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:54:13'!
compareInvalidPointsCapacityErrorDescriptionWith: aBlock


self 
		should: aBlock
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:54:42' prior: 50506857!
test03CanNotCreateBackpackWithZeroMaxPoints

	self compareInvalidPointsCapacityErrorDescriptionWith: [ Backpack containingUpTo: 10 limitingPointsTo: 0 ]
! !

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:54:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:54:43'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:54:55' prior: 50506925!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self compareInvalidPointsCapacityErrorDescriptionWith: [ Backpack containingUpTo: 10 limitingPointsTo: -1 ]! !

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:55:02'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'sdfsf 5/2/2022 10:55:12' prior: 50506993!
test05CanNotCreateBackpackWithNoIntegerMaxWeight
	
	self compareErrorIn: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		with: [ Backpack weightCapacityMustBeIntegerErrorDescription.]
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:56:07' prior: 50503618!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self
		should: [ aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1) ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 10:56:47'!
initializeBackpack
	^Backpack containingUpTo: 42 limitingPointsTo: 100.! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:57:05' prior: 50503646!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:57:09' prior: 50503663!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:57:14' prior: 50503632!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self
		should: [ aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5) ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:28' prior: 50503784!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:32' prior: 50503769!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:36' prior: 50503760!
test13ShouldAddZeroPointsWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self assert: aBackpack totalPoints equals: 0.
	self assert: aBackpack isEmpty.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:40' prior: 50503745!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:45' prior: 50503736!
test11ShouldAddZeroWeightWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self assert: aBackpack totalWeight equals: 0.
	self assert: aBackpack isEmpty
! !

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:57:47'!
PASSED!
!BackpackTest methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 10:58:57'!
compareMaxWeightExceededErrorDescriptionWith: aBlock


self 
		should: aBlock
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 10:59:27' prior: 50507444!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1) ].
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 10:59:28'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:00:13' prior: 50507498!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5) ].
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:00:14'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:01:00' prior: 50507462!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:01:06'!
initializeBackpackWithHmmerAndWantedSign
	^Backpack containingUpTo: 42 limitingPointsTo: 100.! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:01:22' prior: 50507786!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:01:50' prior: 50507802!
initializeBackpackWithHmmerAndWantedSign
	|aBackpack|
	aBackpack  := Backpack containingUpTo: 42 limitingPointsTo: 100.
	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:01:58' prior: 50507819!
initializeBackpackWithHmmerAndWantedSign
	|aBackpack|
	aBackpack  := Backpack containingUpTo: 42 limitingPointsTo: 100.
	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	^aBackpack ! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:02:09' prior: 50507808!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign.
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:02:16' prior: 50507479!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign .
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:02:18' prior: 50507857!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign.
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:02:18'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:02:38' prior: 50507554!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign.
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:02:52' prior: 50507512!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign.
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:02:53'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:03:01' prior: 50507955!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:03:46'!
FAILURE!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:03:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:03:46'!
FAILURE!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 10:57:40' prior: 50507945!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:04:36'!
initializeHelpWantedSign
	^NoPointsPortableObject named: 'help-wanted sign' weighing: 10! !
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:04:53'!
initializeHelpWantedSignWithWeight: aWeight
	^NoPointsPortableObject named: 'help-wanted sign' weighing: aWeight ! !

!methodRemoval: BackpackTest #initializeHelpWantedSign stamp: 'sdfsf 5/2/2022 11:05:00'!
initializeHelpWantedSign
	^NoPointsPortableObject named: 'help-wanted sign' weighing: 10!
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:05:14' prior: 50507832!
initializeBackpackWithHmmerAndWantedSign
	|aBackpack|
	aBackpack  := Backpack containingUpTo: 42 limitingPointsTo: 100.
	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 1).
	^aBackpack ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:05:15'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:05:44' prior: 50508048!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:05:45'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:06:00' prior: 50507972!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:06:01'!
PASSED!
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:06:55'!
initializeHammerWithWeight: aWeight
	^PointsPortableObject named: 'left-handed hammer' weighing: aWeight worth: 5! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:06:56'!
PASSED!
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:07:08' prior: 50508081!
initializeBackpackWithHmmerAndWantedSign
	|aBackpack|
	aBackpack  := Backpack containingUpTo: 42 limitingPointsTo: 100.
	aBackpack add: (self initializeHammerWithWeight: 40).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 1).
	^aBackpack ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:07:09'!
PASSED!
!BackpackTest methodsFor: 'initializations' stamp: 'sdfsf 5/2/2022 11:07:50'!
initializeLetter
	^PointsPortableObject named: 'letter' weighing: 1 worth: 5! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:08:03' prior: 50507871!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHmmerAndWantedSign.
	aBackpack add: self initializeLetter .
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:08:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:08:05'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:08:36' prior: 50507643!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHelpWantedSignWithWeight: 43)].
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:08:37'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:09:01' prior: 50507714!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHammerWithWeight: 48) ].
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:09:02'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:10:06'!
asserIsBackpackEmpty: aBackpack

	self assert: aBackpack totalWeight equals: 0.
	self assert: aBackpack isEmpty! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:10:06' prior: 50507569!
test11ShouldAddZeroWeightWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self asserIsBackpackEmpty: aBackpack
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:10:25' prior: 50507545!
test13ShouldAddZeroPointsWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self asserIsBackpackEmpty: aBackpack.! !

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:10:26'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:11:37' prior: 50508221!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (self initializeHammerWithWeight: 10).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:11:38'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:11:54' prior: 50507530!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (self initializeHammerWithWeight: 10).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:12:19' prior: 50508148!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (self initializeHammerWithWeight: 10).
	aBackpack add: (self initializeHelpWantedSignWithWeight: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:13:34' prior: 50508573!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHammerWithWeight: 48) ].
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:13:39' prior: 50508502!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHelpWantedSignWithWeight: 43)].! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:14:02' prior: 50508834!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.
	
	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHelpWantedSignWithWeight: 43)].
	
	self assert: aBackpack isEmpty.! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:14:08' prior: 50508824!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack |
	aBackpack := self initializeBackpack.

	self compareMaxWeightExceededErrorDescriptionWith: [ aBackpack add: (self initializeHammerWithWeight: 48) ].
	
	self assert: aBackpack isEmpty.
! !
!PortableObject methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 11:15:42'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.! !

!methodRemoval: NoPointsPortableObject #initializeNamed:weighing: stamp: 'sdfsf 5/2/2022 11:15:42'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.!

!methodRemoval: PointsPortableObject #initializeNamed:weighing:worth: stamp: 'sdfsf 5/2/2022 11:16:07'!
initializeNamed: aName weighing: aWeight worth: gamePoints
	
	name := aName.
	weight := aWeight.
	points := gamePoints.!
!PointsPortableObject methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 11:17:03'!
initializePoints: gamePoints
points := gamePoints.! !
!PointsPortableObject methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 11:17:05' prior: 50508885!
initializePoints: gamePoints
	points := gamePoints.! !
!PointsPortableObject class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:17:51' prior: 50504613!
named: aName weighing: aWeight worth: gamePoints
	
	^ (self new initializeNamed: aName weighing: aWeight) initializePoints: gamePoints.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:17:52'!
PASSED!

DoorState subclass: #DoorStateOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorStateOpen category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:19:08'!
DoorState subclass: #DoorStateOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

DoorState subclass: #DoorStateClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorStateClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:19:13'!
DoorState subclass: #DoorStateClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

Door class
	instanceVariableNames: 'doorState'!

!classDefinition: 'Door class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:22:57'!
Door class
	instanceVariableNames: 'doorState'!

Door class
	instanceVariableNames: ''!

!classDefinition: 'Door class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:23:04'!
Door class
	instanceVariableNames: ''!

!classRenamed: #DoorStateClosed as: #Closed stamp: 'sdfsf 5/2/2022 11:23:39'!
Smalltalk renameClassNamed: #DoorStateClosed as: #Closed!
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:23:39' prior: 50504353 overrides: 50504292!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == #KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := #Opened ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:23:39' prior: 50504367 overrides: 50504298!
toBeUsedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state == #Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state == #KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:23:39' prior: 50504341 overrides: 50504287!
toBeOpenedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ ^ state := #Opened ].
	(state == #KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:23:39' prior: 50504386!
closed

	| door |
	
	door := Door new.
	door initializeWith: #Closed.
	
	^ door.! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:23:39' prior: 50504329 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ state := #Closed ].
	(state == #Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == #KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !

!classRenamed: #DoorStateOpen as: #Open stamp: 'sdfsf 5/2/2022 11:23:55'!
Smalltalk renameClassNamed: #DoorStateOpen as: #Open!

!classRenamed: #Open as: #Opened stamp: 'sdfsf 5/2/2022 11:24:24'!
Smalltalk renameClassNamed: #Open as: #Opened!
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50509041 overrides: 50504292!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == #KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := #Opened ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50509068 overrides: 50504287!
toBeOpenedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ ^ state := #Opened ].
	(state == #KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50509056 overrides: 50504298!
toBeUsedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state == #Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state == #KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50509086 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ state := #Closed ].
	(state == #Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == #KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50504398!
opened

	| door |
	
	door := Door new.
	door initializeWith: #Opened.
	
	^ door.! !
!Door methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:24:24' prior: 50504315!
isOpen

	^ state == #Opened
! !

DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:24:52'!
DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:14' prior: 50509144 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ state := Closed new].
	(state == #Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == #KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:20' prior: 50509179 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	(state == Opened) ifTrue: [ ^ state := Closed new].
	(state == Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:32' prior: 50509120 overrides: 50504287!
toBeOpenedBy: aPlayableCharacter

	(state == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == Closed) ifTrue: [ ^ state := Opened ].
	(state == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:40' prior: 50509105 overrides: 50504292!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := Opened ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:44' prior: 50509215 overrides: 50504292!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := Opened new].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:50' prior: 50509203 overrides: 50504287!
toBeOpenedBy: aPlayableCharacter

	(state == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == Closed) ifTrue: [ ^ state := Opened new].
	(state == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:25:59' prior: 50509132 overrides: 50504298!
toBeUsedBy: aPlayableCharacter

	(state == Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state == Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state == KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!Door methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 11:26:11' prior: 50509161!
isOpen

	^ state == Opened
! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:26:22' prior: 50509079!
closed

	| door |
	
	door := Closed new.
	door initializeWith: #Closed.
	
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:26:24' prior: 50509272!
closed

	| door |
	
	door := Closed new.
	
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:26:53' prior: 50504392!
closedWith: aKey

	| door |
	
	door := KeyClosed with: aKey.
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:26:55' prior: 50509283!
closedWith: aKey

	| door |
	
	door := KeyClosed with: aKey.
	
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:27:37' prior: 50509155!
opened

	| door |
	
	door := Opened new.
	
	^ door.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:27:37'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:27:37'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:27:37'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:27:37'!
ERROR!

!methodRemoval: DoorState #initializeFor: stamp: 'sdfsf 5/2/2022 11:28:46'!
initializeFor: aDoor

	door := aDoor!

!methodRemoval: DoorState class #for: stamp: 'sdfsf 5/2/2022 11:28:57'!
for: aDoor

	^ self new initializeFor: aDoor!
!Closed class methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:29:12'!
with: key! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:29:19'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:29:19'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:29:19'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:29:19'!
ERROR!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:29:22'!
FAILURE!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:30:18' prior: 50509191 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	state close.! !
!Closed methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:30:39' overrides: 50504185!
close
	self error: Door alreadyClosedErrorDescription! !
!KeyClosed methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:30:55' overrides: 50504185!
close
	self error: Door alreadyClosedErrorDescription! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:32:53' prior: 50509391 overrides: 50504282!
toBeClosedBy: aPlayableCharacter

	state close: self.! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:33:00'!
close: aDoor
	self error: Door alreadyClosedErrorDescription! !

!methodRemoval: Closed #close stamp: 'sdfsf 5/2/2022 11:33:05'!
close
	self error: Door alreadyClosedErrorDescription!
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:33:15'!
close: aDoor
	self error: Door alreadyClosedErrorDescription! !

!methodRemoval: KeyClosed #close stamp: 'sdfsf 5/2/2022 11:33:19'!
close
	self error: Door alreadyClosedErrorDescription!
!Opened methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:33:41'!
close: aDoor
	aDoor close.! !
!Door methodsFor: 'state change' stamp: 'sdfsf 5/2/2022 11:34:31'!
close
	state := Closed new.! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:34:58' prior: 50509245 overrides: 50504287!
toBeOpenedBy: aPlayableCharacter

	state open: self! !
!DoorState methodsFor: 'door actions' stamp: 'sdfsf 5/2/2022 11:35:18'!
close: Adoor

	self subclassResponsibility! !
!DoorState methodsFor: 'door actions' stamp: 'sdfsf 5/2/2022 11:35:21' prior: 50509442!
close: aDoor

	self subclassResponsibility! !

!methodRemoval: DoorState #close stamp: 'sdfsf 5/2/2022 11:35:25'!
close

	self subclassResponsibility!
!DoorState methodsFor: 'door actions' stamp: 'sdfsf 5/2/2022 11:35:31'!
open: aDoor

	self subclassResponsibility! !

!methodRemoval: DoorState #open stamp: 'sdfsf 5/2/2022 11:35:37'!
open

	self subclassResponsibility!
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:36:05' overrides: 50509454!
open: aDoor
	aDoor open.! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:36:16' prior: 50509421 overrides: 50509447!
close: aDoor
	self error: Door closedWithKeyErrorDescription! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:36:24' prior: 50509467 overrides: 50509447!
close: aDoor
	aDoor error: Door closedWithKeyErrorDescription! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:36:31' prior: 50509412 overrides: 50509447!
close: aDoor
	aDoor error: Door alreadyClosedErrorDescription! !

!classRemoval: #PointsPortableObject stamp: 'sdfsf 5/2/2022 11:39:37'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NoPointsPortableObject stamp: 'sdfsf 5/2/2022 11:39:38'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PortableObject stamp: 'sdfsf 5/2/2022 11:39:38'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Door stamp: 'sdfsf 5/2/2022 11:39:38'!
StageObject subclass: #Door
	instanceVariableNames: 'state key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #StageObject stamp: 'sdfsf 5/2/2022 11:39:39'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PlayableCharacter stamp: 'sdfsf 5/2/2022 11:39:39'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Opened stamp: 'sdfsf 5/2/2022 11:39:40'!
DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosed stamp: 'sdfsf 5/2/2022 11:39:40'!
DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Closed stamp: 'sdfsf 5/2/2022 11:39:40'!
DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'sdfsf 5/2/2022 11:39:41'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Backpack stamp: 'sdfsf 5/2/2022 11:39:41'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'sdfsf 5/2/2022 11:39:42'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #BackpackTest stamp: 'sdfsf 5/2/2022 11:39:42'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!
!Backpack methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:42:05' prior: 50510010!
totalWeight
	
	^container sum: [ :object | object weight ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:42:06'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:42:06'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:42:06'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:42:06'!
ERROR!
!Backpack methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:42:25' prior: 50510590!
totalWeight
	
	^container sum: [ :object | object weight ] ifEmpty: [0].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:42:26'!
PASSED!
!Backpack methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 11:43:45' prior: 50509998!
totalPoints
		
	^(container select: [ :object | object doesItAddPoints])
		sum: [ :object | object points ] ifEmpty: [0]! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:43:46'!
PASSED!
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:44:52'!
addNoPointsPortableObject: aPortableObject
		self assertWeightAdding: aPortableObject tolerating: 0.
		container add: aPortableObject.! !
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:45:22'!
addAPortableObject: aPortableObject
		self assertWeightAdding: aPortableObject tolerating: 5.
		self assertPointsAdding: aPortableObject.
		container add: aPortableObject.! !
!Backpack methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 11:45:41' prior: 50510036!
add: aPortableObject
	
	aPortableObject	 addTo: self! !
!NoPointsPortableObject methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 11:46:11' overrides: 50510419!
addTo: aBackpack
	aBackpack addNoPointsPortableObject: self! !
!PointsPortableObject methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 11:46:28' overrides: 50510419!
addTo: aBackpack
	aBackpack addAPortableObject: self! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:46:29'!
PASSED!

DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Opened category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:48:18'!
DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Closed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:48:23'!
DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:48:27'!
DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

DoorState subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 11:50:11'!
DoorState subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!methodRemoval: DoorState class #for: stamp: 'sdfsf 5/2/2022 11:50:24'!
for: aDoor

	^ self new initializeFor: aDoor!
!DoorState methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 11:50:54'!
setDoor: aDoor

	door := aDoor! !

!methodRemoval: DoorState #initializeFor: stamp: 'sdfsf 5/2/2022 11:50:54'!
initializeFor: aDoor

	door := aDoor!
!KeyClosed methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:51:22'!
setKey: aKey
	key := aKey! !
!Door methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 11:52:24' prior: 50510283!
isOpen

	^ state == Opened
! !
!Door methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 11:52:32' prior: 50510961!
isOpen

	^ state class == Opened
! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:53:19' prior: 50510297 overrides: 50510250!
toBeClosedBy: aPlayableCharacter

	(state class == Opened) ifTrue: [ ^ state := Closed for: self].
	(state class == Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state class == KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!DoorState class methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 11:53:52'!
for: a Door
	! !
!DoorState class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:53:55' prior: 50510981!
for: aDoor
	! !
!DoorState class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:54:16' prior: 50510985!
for: aDoor
	self new setDoor: aDoor! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:54:56' prior: 50510309 overrides: 50510255!
toBeOpenedBy: aPlayableCharacter

	(state class == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state class == Closed) ifTrue: [ ^ state := Opened for: self ].
	(state class == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:55:27' prior: 50510321 overrides: 50510260!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state class == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state class == Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state class == KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := Opened for: self ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 11:55:42' prior: 50510335 overrides: 50510266!
toBeUsedBy: aPlayableCharacter

	(state class == Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state class == Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state class == KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:55:44'!
FAILURE!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:55:46'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:56:36' prior: 50510354!
closed

	| door |
	
	door := Door new.
	door initializeWith: (Closed for: door).
	
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:56:44' prior: 50510366!
opened

	| door |
	
	door := Door new.
	door initializeWith: (Closed for: door).
	
	^ door.! !
!Opened class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:19' overrides: 50510989!
for: aDoor
	self new setDoor: aDoor! !
!Closed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:19' overrides: 50510989!
for: aDoor
	self new setDoor: aDoor! !
!KeyClosed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:19' overrides: 50510989!
for: aDoor
	self new setDoor: aDoor! !

!methodRemoval: DoorState class #for: stamp: 'sdfsf 5/2/2022 11:57:19'!
for: aDoor
	self new setDoor: aDoor!
!Opened class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:39' prior: 50511090!
for: aDoor
	^(self new setDoor: aDoor)! !
!KeyClosed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:45' prior: 50511100!
for: aDoor
	^self new setDoor: aDoor! !
!Closed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:57:51' prior: 50511095!
for: aDoor
	^self new setDoor: aDoor! !
!Opened class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:58:00' prior: 50511108!
for: aDoor
	^self new setDoor: aDoor! !
!KeyClosed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:58:11' prior: 50511113!
for: aDoor
	^(self new setDoor: aDoor)! !
!KeyClosed class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 11:58:34'!
for: aDoor with: aKey
	^(self new setDoor: aDoor)setKey: aKey ! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:59:10' prior: 50510360!
closedWith: aKey

	| door |
	
	door := Door new.
	door initializeWith: (KeyClosed for: door with: aKey).
	
	^ door.! !
!Door class methodsFor: 'instance creation' stamp: 'sdfsf 5/2/2022 11:59:21' prior: 50511083!
opened

	| door |
	
	door := Door new.
	door initializeWith: (Opened for: door).
	
	^ door.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:59:22'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 11:59:22'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:59:22'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:59:44'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 11:59:58'!
FAILURE!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:00:32'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:00:42'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:00:42'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:00:42'!
ERROR!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:01:03'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:01:03'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:01:03'!
ERROR!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:01:10'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:01:13'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:01:14'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:01:14'!
ERROR!

!methodRemoval: Door #initializeWith:using: stamp: 'sdfsf 5/2/2022 12:02:48'!
initializeWith: aDoorState using: aKey

	state := aDoorState.
	key := aKey.
!
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:03:37'!
getKey
	^key! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:03:49' prior: 50511007 overrides: 50510260!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state class == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state class == Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state class == KeyClosed) ifTrue: [ 
		(state key == aKey) ifTrue: [ ^ state := Opened for: self ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:03:51'!
FAILURE!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:03:51'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:03:51'!
PASSED!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:04:53' prior: 50511309 overrides: 50510260!
toBeOpenedBy: aPlayableCharacter using: aKey

	state openUsing: aKey.! !

!methodRemoval: KeyClosed #getKey stamp: 'sdfsf 5/2/2022 12:05:00'!
getKey
	^key!
!Closed methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 12:05:59'!
open: aDoor using: aKey
	aDoor error: Door alreadyOpenedErrorDescription! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:06:21' prior: 50511363 overrides: 50510260!
toBeOpenedBy: aPlayableCharacter using: aKey

	state open: self using: aKey.! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:06:34' prior: 50511377 overrides: 50510260!
toBeOpenedBy: aPlayableCharacter using: aKey

	state openUsing: aKey.! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:06:43' overrides: 50510161!
openUsing: aKey
	door error: Door alreadyOpenedErrorDescription! !

!methodRemoval: Closed #open:using: stamp: 'sdfsf 5/2/2022 12:06:49'!
open: aDoor using: aKey
	aDoor error: Door alreadyOpenedErrorDescription!
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:07:52' overrides: 50510161!
openUsing: aKey
		(key == aKey) ifTrue: [ | state | ^ state := Opened for: self ].
		self error: Door notCorrectKeyErrorDescription.! !
!Opened methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 12:08:23' overrides: 50510161!
openUsing: aKey
	door error: Door alreadyOpenedErrorDescription! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:08:56' prior: 50511407 overrides: 50510161!
openUsing: aKey
	door openOpenDoorWithKey! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:09:36'!
openOpenedDoorWithKey
	self error: Door alreadyOpenedErrorDescription! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:09:44' prior: 50511413 overrides: 50510161!
openUsing: aKey
	door openOpenedDoorWithKey! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:10:18' prior: 50511390 overrides: 50510161!
openUsing: aKey
	door openClosedDoorWithKey! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:10:32'!
openClosedDoorWithKey
		self error: Door alreadyOpenedErrorDescription! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:10:54' prior: 50511400 overrides: 50510161!
openUsing: aKey
		(key == aKey) ifTrue: [ | state | ^ state := Opened for: self ].
		door error: Door notCorrectKeyErrorDescription.! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:11:55' prior: 50511439 overrides: 50510161!
openUsing: aKey
		(key == aKey) ifTrue: [ | state | ^ state := Opened for: self ].
		door openKeyClosedDoorWithWrongKey.! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:12:10'!
openKeyClosedDoorWithWrongKey
	self error: Door notCorrectKeyErrorDescription.! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:12:17'!
openKeyClosedDoorWithCorrectKey
	self error: Door notCorrectKeyErrorDescription.! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:12:38' prior: 50511447 overrides: 50510161!
openUsing: aKey
		(key == aKey) ifTrue: [ door openKeyClosedDoorWithCorrectKey ].
		door openKeyClosedDoorWithWrongKey.! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:12:52' prior: 50511460!
openKeyClosedDoorWithCorrectKey
	^ state := Opened for: self! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:12:53'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:12:53'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:12:53'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:13:02'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:14:11'!
FAILURE!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:14:42'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:14:42'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:14:42'!
PASSED!
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:15:26' prior: 50511433!
openClosedDoorWithKey
	self error: Door alreadyOpenedErrorDescription! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:16:30' prior: 50511565!
openClosedDoorWithKey
	self error: Door noNeedForAKeyErrorDescription! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:16:31'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:16:31'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:16:31'!
ERROR!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:17:14'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:17:14'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:17:14'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:17:14'!
ERROR!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:17:14'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:17:14'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:17:48'!
ERROR!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:17:48'!
ERROR!
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:19:44' prior: 50511467 overrides: 50510161!
openUsing: aKey
		(key == aKey) ifTrue: [ ^door openKeyClosedDoorWithCorrectKey ].
		door openKeyClosedDoorWithWrongKey.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:19:48'!
PASSED!
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:20:36'!
CloseOpenedDoor
	^ state := Closed for: self! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:20:42'!
closeOpenedDoor
	^ state := Closed for: self! !

!methodRemoval: Door #CloseOpenedDoor stamp: 'sdfsf 5/2/2022 12:20:46'!
CloseOpenedDoor
	^ state := Closed for: self!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:21:05' prior: 50510970 overrides: 50510250!
toBeClosedBy: aPlayableCharacter

	state close.
	(state class == KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:21:19'!
closeClosedDoor
	self error: Door alreadyClosedErrorDescription! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:21:50' prior: 50511706 overrides: 50510250!
toBeClosedBy: aPlayableCharacter

	state close.! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:22:37' overrides: 50510153!
close
	door closeClosedDoor.! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:22:50' overrides: 50510153!
close
	door closeOpenedDoor ! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:22:59' overrides: 50510153!
close
	door closeClosedDoor ! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:23:02'!
PASSED!
!Door methodsFor: 'testing' stamp: 'sdfsf 5/2/2022 12:23:14' prior: 50510965!
isOpen

	^ state isOpen
! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:23:34' overrides: 50510165!
isOpen
	^false! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:23:44' overrides: 50510165!
isOpen
	^false! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:23:54' overrides: 50510165!
isOpen
	^true! !

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:23:58'!
PASSED!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:25:00' prior: 50510994 overrides: 50510255!
toBeOpenedBy: aPlayableCharacter
	state open.

	(state class == Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state class == Closed) ifTrue: [ ^ state := Opened for: self ].
	(state class == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:25:17'!
openOpenedDoor
	self error: Door alreadyOpenedErrorDescription! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:25:26' prior: 50511423 overrides: 50510161!
openUsing: aKey
	door openOpenedDoor! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:25:43' overrides: 50510157!
open
	door openOpenedDoor! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:25:55' overrides: 50510157!
open
	door openClosedDoor! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:26:09' overrides: 50510157!
open
	door openKeyClosedDoor! !

!methodRemoval: Door #openOpenedDoorWithKey stamp: 'sdfsf 5/2/2022 12:26:20'!
openOpenedDoorWithKey
	self error: Door alreadyOpenedErrorDescription!
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:26:46'!
openClosedDoor
	^ state := Opened for: self! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:26:55' prior: 50511831 overrides: 50510255!
toBeOpenedBy: aPlayableCharacter
	state open.
	(state class == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:27:00' prior: 50511877 overrides: 50510255!
toBeOpenedBy: aPlayableCharacter
	
	state open.
	(state class == KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:27:08' prior: 50511885 overrides: 50510255!
toBeOpenedBy: aPlayableCharacter
	
	state open.! !
!Door methodsFor: 'playable character reaction - private' stamp: 'sdfsf 5/2/2022 12:27:18'!
openKeyClosedDoor
	self error: Door closedWithKeyErrorDescription ! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:27:19'!
PASSED!
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:27:52' prior: 50511023 overrides: 50510266!
toBeUsedBy: aPlayableCharacter
	state beUsed.

	(state class == Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state class == Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state class == KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!DoorState methodsFor: 'door actions' stamp: 'sdfsf 5/2/2022 12:28:02'!
beUsed

	self subclassResponsibility! !
!Closed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:28:48' overrides: 50511956!
beUsed
	self open! !
!Opened methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:29:05' overrides: 50511956!
beUsed
	self close! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:29:56'!
isUsed
	self open! !
!Door methodsFor: 'playable character reactions' stamp: 'sdfsf 5/2/2022 12:30:07' prior: 50511944 overrides: 50510266!
toBeUsedBy: aPlayableCharacter
	
	state beUsed.! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:30:14'!
BEUsed
	self open! !
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:30:16'!
BeUsed
	self open! !

!methodRemoval: KeyClosed #BEUsed stamp: 'sdfsf 5/2/2022 12:30:20'!
BEUsed
	self open!

!methodRemoval: KeyClosed #isUsed stamp: 'sdfsf 5/2/2022 12:30:22'!
isUsed
	self open!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:30:25'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:30:25'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:30:25'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:31:14'!
FAILURE!
!KeyClosed methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 12:31:45' overrides: 50511956!
beUsed
	self open! !

!methodRemoval: KeyClosed #BeUsed stamp: 'sdfsf 5/2/2022 12:31:45'!
BeUsed
	self open!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'sdfsf 5/2/2022 12:31:48'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'sdfsf 5/2/2022 12:31:49'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:33:38' prior: 50509600!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	object := PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5.

	self
		should: [ aBackpack add: object ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:33:39'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:34:18' prior: 50509586!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	object _ NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.

	self
		should: [ aBackpack add: object ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:34:19'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:35:39'!
failToAdd: object to: aBackpack

	self
		should: [ aBackpack add: object ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:35:39' prior: 50512083!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	object := PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5.

	self failToAdd: object to: aBackpack. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:35:39' prior: 50512157!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	object _ NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.

	self failToAdd: object to: aBackpack. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:36:24'!
initializeBackpack

	^ Backpack containingUpTo: 42 limitingPointsTo: 100! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509752!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50512252!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := self initializeBackpack.
	object _ NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.

	self failToAdd: object to: aBackpack. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509614!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509728!
test13ShouldAddZeroPointsWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self assert: aBackpack totalPoints equals: 0.
	self assert: aBackpack isEmpty.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509631!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50512240!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := self initializeBackpack.
	object := PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5.

	self failToAdd: object to: aBackpack. 
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509737!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509704!
test11ShouldAddZeroWeightWhenEmpty

	| aBackpack |
	aBackpack := self initializeBackpack.

	self assert: aBackpack totalWeight equals: 0.
	self assert: aBackpack isEmpty
! !
!BackpackTest methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 12:36:24' prior: 50509713!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:37:32'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:37:49' prior: 50512287!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	| aBackpack object |
	aBackpack := self initializeBackpack.
	object := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.

	self failToAdd: object to: aBackpack. 
! !
!BackpackTest methodsFor: 'testing - should fail' stamp: 'sdfsf 5/2/2022 12:38:35'!
failToAddToBackPack: object
	
	| aBackpack |
	aBackpack := self initializeBackpack.

	self
		should: [ aBackpack add: object ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty! !

!methodRemoval: BackpackTest #failToAdd:to: stamp: 'sdfsf 5/2/2022 12:38:41'!
failToAdd: object to: aBackpack

	self
		should: [ aBackpack add: object ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:39:02' prior: 50512343!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	| object |
	object := PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5.

	self failToAddToBackPack: object. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:39:14' prior: 50512478!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	self failToAddToBackPack: (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5). 
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:39:31' prior: 50512448!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	self failToAddToBackPack: (NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1). 
! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:39:33'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:42:37'!
assertBackpackAfterAddingHammerAndSignShouldShouldHaveSize: aSize totalWeight: aTotalWeight totalPoints: aTotalPoints

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: aSize.
	self assert: aBackpack totalWeight equals: aTotalWeight .
	self assert: aBackpack totalPoints equals: aTotalPoints .
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:43:04' prior: 50512298!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	self assertBackpackAfterAddingHammerAndSignShouldShouldHaveSize: 2 totalWeight: 41 totalPoints: 5
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:43:38'!
assertBackpack: aBackpack ShouldShouldHaveSize: aSize totalWeight: aTotalWeight totalPoints: aTotalPoints
	
	self assert: aBackpack size equals: aSize.
	self assert: aBackpack totalWeight equals: aTotalWeight .
	self assert: aBackpack totalPoints equals: aTotalPoints .
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:44:16'!
initializeBackpackWithHammerAndSign
	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	^aBackpack.
! !

!methodRemoval: BackpackTest #assertBackpackAfterAddingHammerAndSignShouldShouldHaveSize:totalWeight:totalPoints: stamp: 'sdfsf 5/2/2022 12:44:26'!
assertBackpackAfterAddingHammerAndSignShouldShouldHaveSize: aSize totalWeight: aTotalWeight totalPoints: aTotalPoints

	| aBackpack |
	aBackpack := self initializeBackpack.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: aSize.
	self assert: aBackpack totalWeight equals: aTotalWeight .
	self assert: aBackpack totalPoints equals: aTotalPoints .
!
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/14/2020 14:35:57' prior: 50512581!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:47:05' prior: 50512632!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	self assertBackpack: self initializeBackpackWithHammerAndSign ShouldShouldHaveSize: 2 totalWeight: 41 totalPoints: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:47:14' prior: 50512649!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	self assertBackpack: (self initializeBackpackWithHammerAndSign) ShouldShouldHaveSize: 2 totalWeight: 41 totalPoints: 5.
! !

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:47:15'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:47:46' prior: 50512324!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHammerAndSign 
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	self assertBackpack: aBackpack ShouldShouldHaveSize: 3 totalWeight: 42 totalPoints: 10
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:47:47'!
ERROR!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:48:12' prior: 50512726!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHammerAndSign 
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:48:13'!
ERROR!
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/14/2020 14:35:57' prior: 50512743!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:48:54'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:49:25' prior: 50512761!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHammerAndSign.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1).
	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:49:26'!
ERROR!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:49:42' prior: 50512840!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHammerAndSign.

	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:49:42'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'sdfsf 5/2/2022 12:50:15' prior: 50512864!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self initializeBackpackWithHammerAndSign.

	aBackpack add: (PointsPortableObject named: 'letter' weighing: 1 worth: 5).
	
	self assertBackpack: aBackpack ShouldShouldHaveSize: 3 totalWeight: 42 totalPoints: 10
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'sdfsf 5/2/2022 12:50:16'!
PASSED!

!classRemoval: #PointsPortableObject stamp: 'sdfsf 5/2/2022 13:34:59'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NoPointsPortableObject stamp: 'sdfsf 5/2/2022 13:34:59'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PortableObject stamp: 'sdfsf 5/2/2022 13:35:00'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Door stamp: 'sdfsf 5/2/2022 13:35:00'!
StageObject subclass: #Door
	instanceVariableNames: 'state key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #StageObject stamp: 'sdfsf 5/2/2022 13:35:01'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PlayableCharacter stamp: 'sdfsf 5/2/2022 13:35:01'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Opened stamp: 'sdfsf 5/2/2022 13:35:01'!
DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosed stamp: 'sdfsf 5/2/2022 13:35:02'!
DoorState subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Closed stamp: 'sdfsf 5/2/2022 13:35:02'!
DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'sdfsf 5/2/2022 13:35:03'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Backpack stamp: 'sdfsf 5/2/2022 13:35:03'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'sdfsf 5/2/2022 13:35:03'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #BackpackTest stamp: 'sdfsf 5/2/2022 13:35:04'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

Object subclass: #RobotStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #RobotStatus category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:37:10'!
Object subclass: #RobotStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #R1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #R1 category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:37:29'!
RobotStatus subclass: #R1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #MechanicalFailure category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:37:52'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #SensorsFailure category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:38:17'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #OutOfOrder category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:38:23'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRenamed: #R1 as: #WorkingNormal stamp: 'sdfsf 5/2/2022 13:38:34'!
Smalltalk renameClassNamed: #R1 as: #WorkingNormal!
!Robot methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:38:34' prior: 50513739!
take: aProduct

	status = #WorkingNormal ifTrue: [ ^ trailer carry: aProduct ].
	status = #SensorsFailure ifTrue: [ ^ trailer carry: aProduct ].
	status = #MechanicalFailure ifTrue: [ ^ trailer carry: aProduct ].
	status = #OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:38:34' prior: 50513521!
receiveOrder: aRobot
	
	aRobot status = #WorkingNormal ifTrue: [ | aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status = #SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status = #MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Robot methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:38:34' prior: 50513768!
initializeWith: aTrailer

	trailer := aTrailer.
	status := #WorkingNormal.
! !
!Robot methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:38:34' prior: 50513727!
closeOrderUsing: aCashier
	
	status = #WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:39:18' prior: 50514098!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 13:39:38' prior: 50514092!
initializeWith: aTrailer

	trailer := aTrailer.
	status := WorkingNormal new.
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:40:04' prior: 50514057!
take: aProduct

	status class = WorkingNormal ifTrue: [ ^ trailer carry: aProduct ].
	status class = SensorsFailure ifTrue: [ ^ trailer carry: aProduct ].
	status class = MechanicalFailure ifTrue: [ ^ trailer carry: aProduct ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:40:09' prior: 50513750!
outOfOrder

	status := OutOfOrder new
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:40:14' prior: 50513754!
withMechanicalFailure

	status := MechanicalFailure new
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:40:18' prior: 50513758!
withSensorsFailure

	status := SensorsFailure new
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:40:24'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:40:24'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:40:24'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:40:24'!
PASSED!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 13:40:48' prior: 50514069!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [ | aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status = #SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status = #MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 13:40:57'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:40:57'!
FAILURE!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 13:40:57'!
FAILURE!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:40:57'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:00'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:00'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:00'!
PASSED!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 13:41:17' prior: 50514187!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [ | aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !

!testRun: #ProductTest #test01CanNotCreateProductWithCeroOrLessWeight stamp: 'sdfsf 5/2/2022 13:41:21'!
PASSED!

!testRun: #ProductTest #test02CanNotCreateProductWithCeroOrLessHeight stamp: 'sdfsf 5/2/2022 13:41:21'!
PASSED!

!testRun: #ProductTest #test03CanNotCreateProductWithNoIntegerWeight stamp: 'sdfsf 5/2/2022 13:41:21'!
PASSED!

!testRun: #ProductTest #test04CanNotCreateProductWithNoIntegerHeight stamp: 'sdfsf 5/2/2022 13:41:21'!
PASSED!

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 13:41:23'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:41:23'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 13:41:23'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:41:23'!
PASSED!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:27'!
PASSED!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:41:29'!
PASSED!

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 13:41:31'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:41:31'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 13:41:31'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:41:31'!
PASSED!

!testRun: #ProductTest #test01CanNotCreateProductWithCeroOrLessWeight stamp: 'sdfsf 5/2/2022 13:41:33'!
PASSED!

!testRun: #ProductTest #test02CanNotCreateProductWithCeroOrLessHeight stamp: 'sdfsf 5/2/2022 13:41:33'!
PASSED!

!testRun: #ProductTest #test03CanNotCreateProductWithNoIntegerWeight stamp: 'sdfsf 5/2/2022 13:41:33'!
PASSED!

!testRun: #ProductTest #test04CanNotCreateProductWithNoIntegerHeight stamp: 'sdfsf 5/2/2022 13:41:33'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:42:20'!
closeOrderWhenWorkingNormalUsing: aCashier
	^ aCashier receiveOrder: self
	
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:42:54'!
closeOrderWhenSensorsFailureUsing: aCashier
	^ aCashier receiveOrder: self
	
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:43:16'!
closeOrderWhenMechanicalFailureUsing: aCashier
	^ aCashier receiveOrder: self
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:43:31'!
closeOrderWhenOutOfOrderUsing: aCashier
	^ self class signalOutOfOrder
! !

!methodRemoval: Robot #closeOrderWhenWorkingNormalUsing: stamp: 'sdfsf 5/2/2022 13:44:05'!
closeOrderWhenWorkingNormalUsing: aCashier
	^ aCashier receiveOrder: self
	
!

!methodRemoval: Robot #closeOrderWhenSensorsFailureUsing: stamp: 'sdfsf 5/2/2022 13:44:07'!
closeOrderWhenSensorsFailureUsing: aCashier
	^ aCashier receiveOrder: self
	
!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:44:33'!
closeOrderDefaultUsing: aCashier
	^ aCashier receiveOrder: self
! !

!methodRemoval: Robot #closeOrderWhenMechanicalFailureUsing: stamp: 'sdfsf 5/2/2022 13:44:44'!
closeOrderWhenMechanicalFailureUsing: aCashier
	^ aCashier receiveOrder: self
!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:44:57'!
closeOrderWhenNotOutOfOrderUsing: aCashier
	^ aCashier receiveOrder: self
! !

!methodRemoval: Robot #closeOrderDefaultUsing: stamp: 'sdfsf 5/2/2022 13:45:02'!
closeOrderDefaultUsing: aCashier
	^ aCashier receiveOrder: self
!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:45:25' prior: 50514111!
closeOrderUsing: aCashier
	
	status closeOrderUsing: aCashier
! !
!RobotStatus methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:45:35'!
closeOrderUsing: aCashier
	self subclassResponsibility! !
!MechanicalFailure methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:46:24' overrides: 50514454!
closeOrderUsing: aCashier
	! !

Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #RobotStatus category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:46:28'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!
!RobotStatus class methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:46:55'!
for: aRobot! !
!RobotStatus class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:47:14' prior: 50514476!
for: aRobot
	self new setRobot: aRobot .! !
!RobotStatus class methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:47:16' prior: 50514480!
for: aRobot
	self new setRobot: aRobot.! !
!RobotStatus methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:47:37'!
setRobot: aRobot
	robot := aRobot ! !
!MechanicalFailure methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 13:47:57' prior: 50514459 overrides: 50514454!
closeOrderUsing: aCashier
	robot closeOrderWhenNotOutOfOrderUsing: aCashier ! !
!SensorsFailure methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:48:03' overrides: 50514454!
closeOrderUsing: aCashier
	robot closeOrderWhenNotOutOfOrderUsing: aCashier ! !
!WorkingNormal methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:48:08' overrides: 50514454!
closeOrderUsing: aCashier
	robot closeOrderWhenNotOutOfOrderUsing: aCashier ! !
!OutOfOrder methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 13:48:17' overrides: 50514454!
closeOrderUsing: aCashier
	robot closeOrderWhenOutOfOrderUsing: aCashier ! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 13:48:35' prior: 50514124!
initializeWith: aTrailer

	trailer := aTrailer.
	status := WorkingNormal for: self.
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:48:53' prior: 50514146!
withMechanicalFailure

	status := MechanicalFailure for: self
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:48:57' prior: 50514151!
withSensorsFailure

	status := SensorsFailure for: self
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:49:00' prior: 50514142!
outOfOrder

	status := OutOfOrder for: self
! !

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:09'!
ERROR!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:09'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:09'!
FAILURE!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:09'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:49:26'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:26'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:26'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:26'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:49:30'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:30'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:30'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:30'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:30'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:30'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:30'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:30'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:31'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:49:41'!
ERROR!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:49:41'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:49:41'!
FAILURE!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:49:41'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:50:19'!
ERROR!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:50:19'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:50:19'!
FAILURE!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:50:19'!
FAILURE!
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 13:51:33'!
takeWhenNotSensorsFailure: aProduct
	^ trailer carry: aProduct
! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 13:52:25'!
takeWhenNotOutOfOrder: aProduct
	^ trailer carry: aProduct
! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 13:52:33'!
takeWhenOutOfOrder: aProduct
	^ self class signalOutOfOrder
! !

!methodRemoval: Robot #takeWhenNotSensorsFailure: stamp: 'sdfsf 5/2/2022 13:52:39'!
takeWhenNotSensorsFailure: aProduct
	^ trailer carry: aProduct
!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:52:44'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:52:44'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:52:44'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:52:44'!
FAILURE!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:39:18' prior: 50514449!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:54:03'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:03'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:03'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:03'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:54:12'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:12'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:12'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:12'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:54:30'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:30'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:54:30'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:54:30'!
FAILURE!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:54:31'!
FAILURE!

!classRemoval: #Trailer stamp: 'sdfsf 5/2/2022 13:54:44'!
Object subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #WorkingNormal stamp: 'sdfsf 5/2/2022 13:54:44'!
RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #SensorsFailure stamp: 'sdfsf 5/2/2022 13:54:44'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #OutOfOrder stamp: 'sdfsf 5/2/2022 13:54:45'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #MechanicalFailure stamp: 'sdfsf 5/2/2022 13:54:45'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotStatus stamp: 'sdfsf 5/2/2022 13:54:45'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Robot stamp: 'sdfsf 5/2/2022 13:54:46'!
Object subclass: #Robot
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductB stamp: 'sdfsf 5/2/2022 13:54:46'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductA stamp: 'sdfsf 5/2/2022 13:54:46'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Product stamp: 'sdfsf 5/2/2022 13:54:47'!
Object subclass: #Product
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Cashier stamp: 'sdfsf 5/2/2022 13:54:47'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #TrailerTest stamp: 'sdfsf 5/2/2022 13:54:47'!
TestCase subclass: #TrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotTest stamp: 'sdfsf 5/2/2022 13:54:48'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductTest stamp: 'sdfsf 5/2/2022 13:54:48'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #CashierTest stamp: 'sdfsf 5/2/2022 13:54:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

----End fileIn of /Users/sebascantini/Downloads/macos64/Practice.st----!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:55:27'!
PASSED!

Object subclass: #RobotStatus
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #RobotStatus category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:55:48'!
Object subclass: #RobotStatus
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #WorkingNormal
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #WorkingNormal category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:56:34'!
RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #RobotStatus category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:56:38'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #OutOfOrder category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:56:53'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #SensorsFailure category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:57:13'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classDefinition: #MechanicalFailure category: 'ISW1-2020-1C-Parcial-Enunciado' stamp: 'sdfsf 5/2/2022 13:57:18'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:57:36' prior: 50515545!
take: aProduct

	status class = WorkingNormal ifTrue: [ ^ trailer carry: aProduct ].
	status class = SensorsFailure ifTrue: [ ^ trailer carry: aProduct ].
	status class = MechanicalFailure ifTrue: [ ^ trailer carry: aProduct ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:57:50' prior: 50515533!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 13:58:09' prior: 50515327!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [ | aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 13:58:12'!
FAILURE!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:58:12'!
FAILURE!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 13:58:12'!
FAILURE!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:58:12'!
FAILURE!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:58:16'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:58:16'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:58:16'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:58:16'!
FAILURE!
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 13:58:27' prior: 50515574!
initializeWith: aTrailer

	trailer := aTrailer.
	status := WorkingNormal.
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:40' prior: 50515560!
withMechanicalFailure

	status := MechanicalFailure
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:44' prior: 50515564!
withSensorsFailure

	status := SensorsFailure
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:46' prior: 50516016!
withSensorsFailure

	status := SensorsFailure new
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:49' prior: 50515556!
outOfOrder

	status := OutOfOrder
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:53' prior: 50516025!
outOfOrder

	status := OutOfOrder new
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 13:58:58' prior: 50516011!
withMechanicalFailure

	status := MechanicalFailure new
! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 13:59:08' prior: 50516006!
initializeWith: aTrailer

	trailer := aTrailer.
	status := WorkingNormal new.
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 13:59:09'!
PASSED!

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 13:59:10'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:59:10'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 13:59:10'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 13:59:10'!
PASSED!
!RobotStatus class methodsFor: 'instance creator' stamp: 'sdfsf 5/2/2022 13:59:53'!
for: aRobot! !
!RobotStatus class methodsFor: 'instance creator' stamp: 'sdfsf 5/2/2022 14:00:13' prior: 50516090!
for: aRobot
	self new setRobot: aRobot! !
!RobotStatus methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 14:00:47'!
setRobot: aRobot! !
!RobotStatus methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:00:53' prior: 50516098!
setRobot: aRobot
	robot := aRobot ! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:00:56'!
PASSED!
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 14:01:15' prior: 50516029!
outOfOrder

	status := OutOfOrder for: self
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:01:16'!
FAILURE!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:01:16'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:01:16'!
FAILURE!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:01:19'!
FAILURE!
!RobotStatus class methodsFor: 'instance creator' stamp: 'sdfsf 5/2/2022 14:02:08' prior: 50516094!
for: aRobot
	^self new setRobot: aRobot! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:02:11'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:02:12'!
PASSED!
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 14:02:25' prior: 50516033!
withMechanicalFailure

	status := MechanicalFailure for: self
! !
!Robot methodsFor: 'status' stamp: 'sdfsf 5/2/2022 14:02:31' prior: 50516020!
withSensorsFailure

	status := SensorsFailure for: self
! !
!Robot methodsFor: 'initialization' stamp: 'sdfsf 5/2/2022 14:02:38' prior: 50516038!
initializeWith: aTrailer

	trailer := aTrailer.
	status := WorkingNormal for: self.
! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:04:25'!
takeWhenNotOutOfOrder: aProduct
	^ trailer carry: aProduct! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:04:35'!
takeWhenOutOfOrder
	^ self class signalOutOfOrder! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:05:15' prior: 50515910!
take: aProduct

	status class = WorkingNormal ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct].
	status class = SensorsFailure ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct ].
	status class = MechanicalFailure ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:05:28' prior: 50516238!
take: aProduct

	status class = WorkingNormal ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct].
	status class = SensorsFailure ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct ].
	status class = MechanicalFailure ifTrue: [ ^ self takeWhenNotOutOfOrder: aProduct ].
	status class = OutOfOrder ifTrue: [ ^ self takeWhenOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:05:30'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:06:00' prior: 50516252!
take: aProduct

	status take: aProduct 
! !
!RobotStatus methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 14:06:16'!
take: aProduct
	self subclassResponsibility ! !
!MechanicalFailure methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 14:06:34' overrides: 50516301!
take: aProduct
	^ self takeWhenNotOutOfOrder: aProduct! !
!SensorsFailure methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 14:06:38' overrides: 50516301!
take: aProduct
	^ self takeWhenNotOutOfOrder: aProduct! !
!WorkingNormal methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 14:06:46' overrides: 50516301!
take: aProduct
	^ self takeWhenNotOutOfOrder: aProduct! !
!OutOfOrder methodsFor: 'no messages' stamp: 'sdfsf 5/2/2022 14:07:08' overrides: 50516301!
take: aProduct
	^ robot takeWhenOutOfOrder! !
!SensorsFailure methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:07:15' prior: 50516311 overrides: 50516301!
take: aProduct
	^ robot takeWhenNotOutOfOrder: aProduct! !
!WorkingNormal methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:07:21' prior: 50516316 overrides: 50516301!
take: aProduct
	^ robot takeWhenNotOutOfOrder: aProduct! !
!MechanicalFailure methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:07:27' prior: 50516306 overrides: 50516301!
take: aProduct
	^ robot takeWhenNotOutOfOrder: aProduct! !

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:07:31'!
PASSED!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:07:34'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:08:08' prior: 50515922!
closeOrderUsing: aCashier
	
	status closeOrderUsing: aCashier
! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:08:44'!
takeWhenOutOfOrder: aCashier
	^ aCashier receiveOrder: self.! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:09:31'!
closeOrderWhenNotOutOfOrderUsing: aCashier
	^ aCashier receiveOrder: self.! !

!methodRemoval: Robot #takeWhenOutOfOrder: stamp: 'sdfsf 5/2/2022 14:09:31'!
takeWhenOutOfOrder: aCashier
	^ aCashier receiveOrder: self.!
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:09:40'!
closeOrderWhenOutOfOrderUsing: aCashier
	^ self class signalOutOfOrder.! !
!RobotStatus methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:10:00'!
closeOrderUsing: aCashier
	self subclassResponsibility ! !
!MechanicalFailure methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:10:23' overrides: 50516428!
closeOrderUsing: aCashier
	^ robot closeOrderWhenNotOutOfOrderUsing: aCashier! !
!SensorsFailure methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:10:35' overrides: 50516428!
closeOrderUsing: aCashier
	^ robot closeOrderWhenNotOutOfOrderUsing: aCashier! !
!WorkingNormal methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:10:39' overrides: 50516428!
closeOrderUsing: aCashier
	^ robot closeOrderWhenNotOutOfOrderUsing: aCashier! !
!OutOfOrder methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:11:03' overrides: 50516428!
closeOrderUsing: aCashier
	^ robot closeOrderWhenNotOutOfOrder! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:11:18'!
closeOrderWhenOutOfOrder
	^ self class signalOutOfOrder.! !

!methodRemoval: Robot #closeOrderWhenOutOfOrderUsing: stamp: 'sdfsf 5/2/2022 14:11:20'!
closeOrderWhenOutOfOrderUsing: aCashier
	^ self class signalOutOfOrder.!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:11:25'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:11:25'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:11:25'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:11:25'!
FAILURE!
!OutOfOrder methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:11:50' prior: 50516452 overrides: 50516428!
closeOrderUsing: aCashier
	^ robot closeOrderWhenOutOfOrder! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:11:55'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:11:55'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:11:55'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'FRT 5/4/2020 18:41:25' prior: 50516403!
closeOrderUsing: aCashier
	
	status = #WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status = #OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:13:28'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:13:29'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:13:29'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:13:29'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:13:29'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:13:29'!
ERROR!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:13:29'!
FAILURE!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:13:29'!
ERROR!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:13:29'!
FAILURE!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 13:57:50' prior: 50516535!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = OutOfOrder ifTrue: [ ^ self class signalOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:13:51'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:14:05' prior: 50516579!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = OutOfOrder ifTrue: [ ^ self closeOrderWhenOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:05'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:14:24' prior: 50516623!
closeOrderUsing: aCashier
	
	status class = WorkingNormal ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = SensorsFailure ifTrue: [ ^ aCashier receiveOrder: self ].
	status class = MechanicalFailure ifTrue: [ ^ self closeOrderWhenNotOutOfOrderUsing: aCashier].
	status class = OutOfOrder ifTrue: [ ^ self closeOrderWhenOutOfOrder ].
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:25'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:08:08' prior: 50516667!
closeOrderUsing: aCashier
	
	status closeOrderUsing: aCashier
! !
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:14:34' prior: 50516712!
closeOrderUsing: aCashier
	
	^status closeOrderUsing: aCashier
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:14:35'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:15:08' prior: 50516297!
take: aProduct

	^status take: aProduct 
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:15:08'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:08'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:08'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:09'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:15:12' prior: 50516753!
take: aProduct

	status take: aProduct 
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:12'!
PASSED!

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:30'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:15:35' prior: 50516788!
take: aProduct

	^status take: aProduct 
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:36'!
PASSED!
!Robot methodsFor: 'actions' stamp: 'sdfsf 5/2/2022 14:15:44' prior: 50516855!
take: aProduct

	status take: aProduct 
! !

!testRun: #RobotTest #test01ShouldReceiveAnEmptyTrailer stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test02ShouldTakeProductsWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test03ShouldTakeProductsWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test04ShouldTakeProductsWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test05ShouldNotTakeProductsWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test06CanCloseOrderWhenWorkingNormal stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test07CanNotCloseOrderWhenWorkingWithSensorsFailures stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test08CanCloseOrderWhenWorkingWithMechanicalFailures stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!

!testRun: #RobotTest #test09CanNotCloseOrderWhenOutOfOrder stamp: 'sdfsf 5/2/2022 14:15:44'!
PASSED!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:19:42' prior: 50515936!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self recieveOrderWhenWorkingNormal.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:19:42' prior: 50516926!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self recieveOrderWhenWorkingNormal.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:20:23' prior: 50516945!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self recieveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:20:31'!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self recieveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:20:38' prior: 50516982!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:20:50' prior: 50517001!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:21:02' prior: 50517020!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		| aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:21:35'!
receiveOrderWhenSensorsFailure: aRobot

	aRobot outOfOrder.
	self signalRobotSensorsFailure

! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:21:47' prior: 50517039!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		| aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."
		
		^ true
	].

	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:19'!
receiveOrderWhenMechanicalFailure: aRobot
	
	| aTrailer |
		
	aRobot outOfOrder.
		
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	"Comentario: en este punto el cashier realizaría el checkout de los productos."

	^ true
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:24' prior: 50517088!
receiveOrderWhenMechanicalFailure: aRobot
	
	| aTrailer |
		
	aRobot outOfOrder.
		
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.


	^ true
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:26' prior: 50517099!
receiveOrderWhenMechanicalFailure: aRobot
	
	| aTrailer |
		
	aRobot outOfOrder.
		
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.

	^ true
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:30' prior: 50517068!
receiveOrderWhenWorkingNormal: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		| aTrailer | 
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		^ true
	].

	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:44' prior: 50517117!
receiveOrderWhenWorkingNormal: aRobot

	| aTrailer | 
	
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	^ true
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:22:53' prior: 50516964!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		aRobot outOfOrder.
		self signalRobotSensorsFailure
	].
	
	aRobot status class = MechanicalFailure ifTrue: [ | aTrailer |
		aRobot outOfOrder.
		
		aTrailer := aRobot trailer.	
		self assertTrailerNotEmpty: aTrailer.
		
		"Comentario: en este punto el cashier realizaría el checkout de los productos."

		^ true
	].
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:23:32' prior: 50517143!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderWhenWorkingNormal: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		^self receiveOrderWhenSensorsFailure: aRobot.
	].
	
	aRobot status class = MechanicalFailure ifTrue: [
		self receiveOrderWhenMechanicalFailure: aRobot
	].
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:23:33'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:23:33'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:23:33'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:23:33'!
PASSED!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:24:50' prior: 50517108!
receiveOrderWhenMechanicalFailure: aRobot
	
	| aTrailer |
		
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.

	^ true
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:25:25'!
receiveOrderNotSensorsFailure: aRobot

	| aTrailer | 
	
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	^ true
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:25:25' prior: 50517162!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderNotSensorsFailure: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		^self receiveOrderWhenSensorsFailure: aRobot.
	].
	
	aRobot status class = MechanicalFailure ifTrue: [
		self receiveOrderWhenMechanicalFailure: aRobot
	].
! !

!methodRemoval: Cashier #receiveOrderWhenWorkingNormal: stamp: 'sdfsf 5/2/2022 14:25:26'!
receiveOrderWhenWorkingNormal: aRobot

	| aTrailer | 
	
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	^ true
!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:25:57' prior: 50517191!
receiveOrderWhenMechanicalFailure: aRobot
	
	self receiveOrderNotSensorsFailure: aRobot
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:26:06' prior: 50517227!
receiveOrderWhenMechanicalFailure: aRobot
	
	aRobot outOfOrder 
	self receiveOrderNotSensorsFailure: aRobot
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:26:15'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:26:15'!
FAILURE!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:26:15'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:26:15'!
FAILURE!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:26:33'!
receiveOrderWhenNotSensorsFailure: aRobot

	| aTrailer | 
	
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	^ true
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:26:33' prior: 50517233!
receiveOrderWhenMechanicalFailure: aRobot
	
	aRobot outOfOrder 
	self receiveOrderWhenNotSensorsFailure: aRobot
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sdfsf 5/2/2022 14:26:33' prior: 50517206!
receiveOrder: aRobot
	
	aRobot status class = WorkingNormal ifTrue: [  
		^self receiveOrderWhenNotSensorsFailure: aRobot.
	].

	aRobot status class = SensorsFailure ifTrue: [ 	
		^self receiveOrderWhenSensorsFailure: aRobot.
	].
	
	aRobot status class = MechanicalFailure ifTrue: [
		self receiveOrderWhenMechanicalFailure: aRobot
	].
! !

!methodRemoval: Cashier #receiveOrderNotSensorsFailure: stamp: 'sdfsf 5/2/2022 14:26:33'!
receiveOrderNotSensorsFailure: aRobot

	| aTrailer | 
	
	aTrailer := aRobot trailer.	
	self assertTrailerNotEmpty: aTrailer.
	
	^ true
!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:26:45' prior: 50517263!
receiveOrderWhenMechanicalFailure: aRobot
	
	aRobot outOfOrder.
	self receiveOrderWhenNotSensorsFailure: aRobot
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:26:45'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:26:45'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:26:45'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:26:45'!
PASSED!
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:28:11' prior: 50517270!
receiveOrder: aRobot
	
	aRobot receiveOrder: aRobot
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:28:32' prior: 50517313!
receiveOrder: aRobot
	
	aRobot status receiveOrder: aRobot
! !
!RobotStatus methodsFor: 'cashier - closing buy order' stamp: 'sdfsf 5/2/2022 14:29:34'!
receiveOrder: aRobot
	self subclassResponsibility ! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:29:45' prior: 50517318!
receiveOrder: aRobot
	
	^aRobot status receiveOrder: aRobot
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:29:47' prior: 50517328!
receiveOrder: aRobot
	
	aRobot status receiveOrder: aRobot
! !
!Cashier methodsFor: 'closing buy order' stamp: 'sdfsf 5/2/2022 14:30:20' prior: 50517333!
receiveOrder: aRobot
	
	aRobot status receiveOrder: aRobot Using: self
! !
!RobotStatus methodsFor: 'cashier - closing buy order' stamp: 'sdfsf 5/2/2022 14:30:43'!
receiveOrder: aRobot Using: aCashier
	self subclassResponsibility ! !

!methodRemoval: RobotStatus #receiveOrder: stamp: 'sdfsf 5/2/2022 14:30:46'!
receiveOrder: aRobot
	self subclassResponsibility !
!MechanicalFailure methodsFor: 'robot - actions' stamp: 'sdfsf 5/2/2022 14:31:36' overrides: 50517344!
receiveOrder: aRobot Using: aCashier
	aCashier receiveOrderWhenMechanicalFailure: aRobot! !
!SensorsFailure methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 14:32:16' overrides: 50517344!
receiveOrder: aRobot Using: aCashier
	aCashier receiveOrderWhenSensorsFailure: aRobot! !
!WorkingNormal methodsFor: 'nil' stamp: 'sdfsf 5/2/2022 14:32:27' overrides: 50517344!
receiveOrder: aRobot Using: aCashier
	aCashier receiveOrderWhenNotSensorsFailure: aRobot! !

!testRun: #ProductTest #test01CanNotCreateProductWithCeroOrLessWeight stamp: 'sdfsf 5/2/2022 14:32:58'!
PASSED!

!testRun: #ProductTest #test02CanNotCreateProductWithCeroOrLessHeight stamp: 'sdfsf 5/2/2022 14:32:58'!
PASSED!

!testRun: #ProductTest #test03CanNotCreateProductWithNoIntegerWeight stamp: 'sdfsf 5/2/2022 14:32:58'!
PASSED!

!testRun: #ProductTest #test04CanNotCreateProductWithNoIntegerHeight stamp: 'sdfsf 5/2/2022 14:32:59'!
PASSED!

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:33:01'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:33:01'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:33:01'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:33:01'!
PASSED!
!Cashier methodsFor: 'closing buy order - private' stamp: 'sdfsf 5/2/2022 14:34:09' prior: 50517255!
receiveOrderWhenNotSensorsFailure: aRobot
	self assertTrailerNotEmpty: (aRobot trailer).
	
	^ true
! !
!Cashier methodsFor: 'closing buy order - private' stamp: 'sdfsf 5/2/2022 14:34:10' prior: 50517402!
receiveOrderWhenNotSensorsFailure: aRobot

	self assertTrailerNotEmpty: (aRobot trailer).
	
	^ true
! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:34:11'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:34:11'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:34:11'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:34:11'!
PASSED!
!Cashier methodsFor: 'closing buy order - private' stamp: 'sdfsf 5/2/2022 14:34:18' prior: 50517409!
receiveOrderWhenNotSensorsFailure: aRobot

	self assertTrailerNotEmpty: (aRobot trailer).
	^ true
! !
!Cashier methodsFor: 'assertions' stamp: 'sdfsf 5/2/2022 14:34:50' prior: 50515354!
signalTrailerIsEmpty
	
	self error: Cashier trailerIsEmptyErrorDescription! !
!Cashier methodsFor: 'exceptions' stamp: 'sdfsf 5/2/2022 14:35:02' prior: 50515359!
signalRobotSensorsFailure
	
	self error: Cashier robotSensorsFailureErrorDescription! !

!testRun: #CashierTest #test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot stamp: 'sdfsf 5/2/2022 14:35:03'!
PASSED!

!testRun: #CashierTest #test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:35:03'!
PASSED!

!testRun: #CashierTest #test03ShouldNotAcceptSensorsFailureRobot stamp: 'sdfsf 5/2/2022 14:35:03'!
PASSED!

!testRun: #CashierTest #test04ShouldChangeRobotStatusToOutOfOrderWhenMechanicalFailureRobot stamp: 'sdfsf 5/2/2022 14:35:03'!
PASSED!
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:35:31' prior: 50516233!
takeWhenOutOfOrder

	^ self class signalOutOfOrder! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:35:35' prior: 50516228!
takeWhenNotOutOfOrder: aProduct

	^ trailer carry: aProduct! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:35:37' prior: 50516457!
closeOrderWhenOutOfOrder

	^ self class signalOutOfOrder.! !
!Robot methodsFor: 'actions - private' stamp: 'sdfsf 5/2/2022 14:35:40' prior: 50516413!
closeOrderWhenNotOutOfOrderUsing: aCashier

	^ aCashier receiveOrder: self.! !
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:37:39' prior: 50515655!
totalProductsWeight
	
	^container sum: [ :product | product weight ]! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:37:39'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:37:39'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:37:39'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:37:39'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:37:39'!
FAILURE!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:37:39'!
FAILURE!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:37:39'!
ERROR!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:37:39'!
ERROR!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:39'!
ERROR!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:39'!
ERROR!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:39'!
ERROR!
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:37:50' prior: 50517485!
totalProductsWeight
	
	| total index |

	total := 0.
	index := 1.
	
	[index <= container size] whileTrue: [
		total := total + (container at: index) weight.
		index := index + 1.	
	].

	^ total.! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:37:50'!
PASSED!
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:37:50' prior: 50517531!
totalProductsWeight
	
	| total index |

	total := 0.
	index := 1.
	
	[index <= container size] whileTrue: [
		total := total + (container at: index) weight.
		index := index + 1.	
	].

	^ total.! !
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:37:39' prior: 50517581!
totalProductsWeight
	
	^container sum: [ :product | product weight ]! !
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:38:22' prior: 50517590!
totalProductsWeight
	
	^container sum: [ :product | product weight ] ifEmpty: [ 0 ]! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:38:23'!
PASSED!
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:39:13' prior: 50515643!
totalProductsHeight
	
	^(container select: [ :product | product isStackable ])
		sum: [ :product | product weight ]
		ifEmpty: [ 0 ]! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:13'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:13'!
FAILURE!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:13'!
FAILURE!
!Trailer methodsFor: 'accessing' stamp: 'sdfsf 5/2/2022 14:39:38' prior: 50517642!
totalProductsHeight
	
	^(container select: [ :product | product isStackable ])
		sum: [ :product | product height ]
		ifEmpty: [ 0 ]! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:39:39'!
PASSED!
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:41:41' prior: 50515676!
carryProductB: aProduct

	self assertHeightAdding: aProduct.
	self assertWeightAdding: aProduct.
	
	container add: aProduct.! !
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:41:50' prior: 50517738!
carryProductB: aProduct

	self assertHeightAdding: aProduct.
	
	self assertWeightAdding: aProduct.
	container add: aProduct.! !
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:41:58' prior: 50517745!
carryProductB: aProduct

	self assertHeightAdding: aProduct.
	self assertWeightAdding: aProduct.
	container add: aProduct.! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:41:59'!
PASSED!
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:42:29'!
assertWeightAddingAndAdd: aProduct

	self assertWeightAdding: aProduct.
	container add: aProduct! !
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:42:29' prior: 50515671!
carryProductA: aProduct
	
	self assertWeightAddingAndAdd: aProduct.! !
!Trailer methodsFor: 'action' stamp: 'sdfsf 5/2/2022 14:42:29' prior: 50517752!
carryProductB: aProduct

	self assertHeightAdding: aProduct.
	self assertWeightAddingAndAdd: aProduct.! !
!Trailer methodsFor: 'exceptions' stamp: 'sdfsf 5/2/2022 14:43:16' prior: 50515703!
signalMaxWeightCapacityExceeded

	self error: Trailer maxWeightExceededErrorDescription
! !
!Trailer methodsFor: 'exceptions' stamp: 'sdfsf 5/2/2022 14:43:26' prior: 50515697!
signalMaxHeightCapacityExceeded

	self error: self class maxHeightExceededErrorDescription
! !
!Trailer methodsFor: 'exceptions' stamp: 'sdfsf 5/2/2022 14:43:32' prior: 50517816!
signalMaxWeightCapacityExceeded

	self error: self class maxWeightExceededErrorDescription
! !

!testRun: #TrailerTest #test01CanNotCreateTrailerWithCeroOrLessMaxWeight stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test02CanNotCreateTrailerWithCeroOrLessMaxHeight stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test03CanNotCreateTrailerWithNoIntegerMaxWeight stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test04CanNotCreateTrailerWithNoIntegerMaxHeight stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test05ShouldRejectProductAIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test06ShouldRejectProductBIfWeightExceeded stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test07ShouldAcceptProductsIfWeightUnderMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test08ShouldAcceptProductsIfWeightEqualsMaxWeightCapacity stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test09ShouldAcceptProductAIgnoringMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test10ShouldIgnoreAProductsInMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

!testRun: #TrailerTest #test11ShouldRejectProductBExceedingMaxTotalHeightOfBProducts stamp: 'sdfsf 5/2/2022 14:43:33'!
PASSED!

----STARTUP---- (14 May 2022 11:08:35) as /Users/sebascantini/Documents/Ejercicios-Ing-I/macos64/CuisUniversity-5096.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers'!

!classDefinition: #MarsRoverTest category: 'MarsRovers' stamp: 'ejfsdf 5/14/2022 11:10:03'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ejfsdf 5/14/2022 11:17:43'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ejfsdf 5/14/2022 11:18:18'!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: '') isAt: 0@0 heading: #North)! !

!classRemoval: #MarsRover stamp: 'ejfsdf 5/14/2022 11:18:34'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ejfsdf 5/14/2022 11:18:54'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:18:50' prior: 50517897!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: '') isAt: 0@0 heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:19:00' prior: 50517918!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: '') isAt: 0@0 heading: #North)! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:19:08'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:19:08'!
ERROR!
!MarsRover methodsFor: '*DenotativeObject' stamp: 'ejfsdf 5/14/2022 11:19:22'!
process: aString 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:19:28'!
ERROR!
!MarsRover methodsFor: 'error handling' stamp: 'ejfsdf 5/14/2022 11:19:31' overrides: 16902107!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRover #error: stamp: 'ejfsdf 5/14/2022 11:19:48'!
error: aString 
	self shouldBeImplemented.!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:22:20'!
isAt: coordinates heading: orientation
	
	^ coordinates = 0@0 and: orientation = #North! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:22:26'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:22:26'!
ERROR!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:22:43' prior: 50517941!
process: aString
! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:22:45'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:22:45'!
ERROR!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:22:58' prior: 50517957!
isAt: coordinates heading: orientation
	
	^ coordinates = (0@0) and: orientation = #North! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:22:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:24:30'!
test01MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: '') isAt: 0@0 heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:25:28' prior: 50517991!
test01MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: 0@1 heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:25:52'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: 0@1 heading: #North)! !

!methodRemoval: MarsRoverTest #test01MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:25:52'!
test01MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: 0@1 heading: #North)!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:25:56'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ejfsdf 5/14/2022 11:26:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/14/2022 11:27:01' overrides: 16920235!
initialize
	position := 0@0! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:29:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:29:47'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:29:47'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:31:59' prior: 50517970!
process: aString
	
	aString = 'f' ifTrue: [position := position + (0@1)]! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:32:00'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:32:00'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:32:00'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:33:50' prior: 50517926!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: '') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:33:56' prior: 50518009!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:34:03'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/14/2022 11:34:37' prior: 50517981!
isAt: coordinates heading: orientation
	
	^ coordinates = position and: orientation = #North! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:34:38'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:34:38'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:35:21'!
test02MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:35:42'!
test03MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:35:42'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:35:53'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test03MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:35:53'!
test03MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:35:57'!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB stamp: 'ejfsdf 5/14/2022 11:35:57'!
test02MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:36:17'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileRecievingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth stamp: 'ejfsdf 5/14/2022 11:36:17'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorth
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:36:28'!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB stamp: 'ejfsdf 5/14/2022 11:36:28'!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenStringIsB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:36:33'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileRecievingF stamp: 'ejfsdf 5/14/2022 11:36:33'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileRecievingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:37:04' prior: 50518216!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:37:10' prior: 50518196!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'b') isAt: (0@-1) heading: #North)! !

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:37:14'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:37:41' prior: 50518059!
process: aString
	
	aString = 'f' ifTrue: [position := position + (0@1)].
	aString = 'b' ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:38:11'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:38:11'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:38:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:41:11'!
test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #East)! !

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:41:14'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/14/2022 11:42:27' prior: 50518098!
isAt: coordinates heading: queriedOrientation
	
	^ coordinates = position and: queriedOrientation = #North! !
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/14/2022 11:42:38' prior: 50518294!
isAt: queriedCoordinates heading: queriedOrientation
	
	^ queriedCoordinates = position and: queriedOrientation = #North! !
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/14/2022 11:42:53' prior: 50518301!
isAt: queriedPosition heading: queriedOrientation
	
	^ queriedPosition = position and: queriedOrientation = #North! !

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ejfsdf 5/14/2022 11:43:08'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/14/2022 11:43:15' prior: 50518308!
isAt: queriedPosition heading: queriedOrientation
	
	^ queriedPosition = position and: queriedOrientation = orientation! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/14/2022 11:43:53' prior: 50518043 overrides: 16920235!
initialize
	position := 0@0.
	orientation := #North! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/14/2022 11:43:54' prior: 50518335 overrides: 16920235!
initialize
	position := 0@0.
	orientation := #North.! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:45:28' prior: 50518260!
process: aString
	
	aString = 'f' ifTrue: [position := position + (0@1)].
	aString = 'b' ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:45:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:45:31'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:45:31'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:45:31'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:45:31'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:45:41' prior: 50518346!
process: aString
	
	aString = 'f' ifTrue: [position := position + (0@1)].
	aString = 'b' ifTrue: [position := position - (0@1)].
	aString = 'r' ifTrue: [orientation := #East].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:45:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:45:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:45:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:45:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:45:59'!
test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #East)! !

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:46:08'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:46:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:46:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:46:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:46:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/14/2022 11:46:27' prior: 50518401!
test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #West)! !

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:46:28'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:46:51' prior: 50518375!
process: aString
	
	aString = 'f' ifTrue: [position := position + (0@1)].
	aString = 'b' ifTrue: [position := position - (0@1)].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:46:52'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:46:52'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:46:52'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:46:52'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:46:52'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:49:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:49:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:49:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:49:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:49:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:49:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:49:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:49:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:49:26'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 11:52:03'!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 11:52:30'!
test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:52:30'!
test02MarsRoverMovesToZeroOneFromZeroZeroOnFWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:53:04'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:55:06' prior: 50518447!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		].
	aString = 'b' ifTrue: [position := position - (0@1)].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:55:09'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:55:09'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:55:09'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:55:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:55:09'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:55:09'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:55:09'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:57:33' prior: 50518554!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [position := position - (0@1)].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:57:44'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 11:58:33'!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:58:39'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 11:59:07' prior: 50518596!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:59:09'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:09'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:09'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 11:59:14'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:14'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 11:59:14'!
FAILURE!
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 12:00:04' prior: 50518636!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:00:18' prior: 50518650!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:00:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:00:20'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:00:20'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:00:37' prior: 50518749!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [orientation := #East].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:00:38'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading east' stamp: 'ejfsdf 5/14/2022 12:01:32'!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #South)! !

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:01:41'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:02:11' prior: 50518799!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:02:12'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:12'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:12'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:12'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:02:12'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:12'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:12'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:12'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:02:22' prior: 50518862!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:23'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:23'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:02:34' prior: 50518916!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [orientation := #West].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:02:44' prior: 50518974!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East].
		orientation = #East ifTrue: [orientation := #South].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:02:45'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:45'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:45'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:45'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:02:45'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:02:45'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:02:45'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:02:45'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:03:41' prior: 50518993!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [^orientation := #East].
		orientation = #East ifTrue: [^orientation := #South].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:03:42'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:03:42'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:03:42'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:04:09'!
ERROR!

----End fileIn of /Users/sebascantini/Documents/Ejercicios-Ing-I/macos64/Packages/TerseGuide.pck.st----!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:06:20' prior: 50519048!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)] ifFalse:[
		orientation = #East ifTrue: [position := position - (1@0)]].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [^orientation := #East].
		orientation = #East ifTrue: [^orientation := #South].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:06:23'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:06:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:06:23'!
ERROR!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:07:09' prior: 50522028!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [^orientation := #East].
		orientation = #East ifTrue: [^orientation := #South].
		].
	aString = 'l' ifTrue: [orientation := #West].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:07:20' prior: 50522083!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [^orientation := #East] ifFalse: [
		orientation = #East ifTrue: [^orientation := #South]].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:07:21'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:07:21'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:07:21'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:07:35'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:07:35'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:07:35'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:07:37'!
ERROR!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:08:39' prior: 50522102!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [orientation := #West].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:08:41'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:11:41'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading east' stamp: 'ejfsdf 5/14/2022 12:12:38'!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #North)! !

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:12:39'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:13:08' prior: 50522198!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:13:10'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 12:16:17'!
test10MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'test - heading north' stamp: 'ejfsdf 5/14/2022 12:19:40'!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !

!methodRemoval: MarsRoverTest #test10MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:00'!
test10MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:06'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:06'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:10'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:10'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:10'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:20:30' prior: 50522304!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:32'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:32'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:20:43'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:43'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:20:43'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:02'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:02'!
FAILURE!
!MarsRoverTest methodsFor: 'test - heading south' stamp: 'ejfsdf 5/14/2022 12:21:47' prior: 50522378!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:21:56' prior: 50522460!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:21:57'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:57'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:21:57'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:22:04' prior: 50522606!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:22:05'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading south' stamp: 'ejfsdf 5/14/2022 12:23:06'!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (0@1) heading: #South)! !

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:23:07'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:23:21' prior: 50522679!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East] ifFalse: [
		orientation = #East ifTrue: [orientation := #South]].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:23:22'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:24:20'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:24:29' prior: 50522764!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #North ifTrue: [orientation := #East].
		orientation = #East ifTrue: [orientation := #South].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:24:36' prior: 50522890!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North]].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:03'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:25:24' prior: 50522917!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:25:26'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading south' stamp: 'ejfsdf 5/14/2022 12:26:30'!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #West)! !

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:26:31'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:26:53' prior: 50522993!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:07'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:27:16'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading south' stamp: 'ejfsdf 5/14/2022 12:27:58'!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #East)! !

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:28:00'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:28:29' prior: 50523084!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:28:30'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading west' stamp: 'ejfsdf 5/14/2022 12:30:21'!
test014MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (-1@0) heading: #West)! !

!testRun: #MarsRoverTest #test014MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:30:25'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:30:49' prior: 50523236!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		].
	aString = 'r' ifTrue: [
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		].! !

!testRun: #MarsRoverTest #test014MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:30:50'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:30:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:30:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:30:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:30:51'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading west' stamp: 'ejfsdf 5/14/2022 12:31:23'!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'b') isAt: (1@0) heading: #West)! !

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:31:25'!
FAILURE!
!MarsRoverTest methodsFor: 'test - heading west' stamp: 'ejfsdf 5/14/2022 12:31:46'!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (-1@0) heading: #West)! !

!methodRemoval: MarsRoverTest #test014MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:31:46'!
test014MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (-1@0) heading: #West)!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:00'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:00'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:00'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:32:25' prior: 50523340!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:32:26'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading west' stamp: 'ejfsdf 5/14/2022 12:35:30'!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #North)! !

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:35:32'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:36:20' prior: 50523543!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #East ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:36:23'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:36:23'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:36:46'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:37:59' prior: 50523660!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #West ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:38:01'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:39:22'!
PASSED!
!MarsRoverTest methodsFor: 'test - heading west' stamp: 'ejfsdf 5/14/2022 12:39:49'!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := MarsRover new.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #South)! !

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:39:50'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:40:35' prior: 50523773!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #West ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		orientation = #West ifTrue: [orientation := #North].].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:37'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:37'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:37'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:40:46' prior: 50523969!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #West ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		orientation = #West ifTrue: [orientation := #South].].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:47'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:40:49' prior: 50524089!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #West ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [.
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		orientation = #West ifTrue: [orientation := #South].].
		].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:50'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:40:51'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 12:40:53' prior: 50524204!
process: aString
	
	aString = 'f' ifTrue: [
		orientation = #North ifTrue: [position := position + (0@1)].
		orientation = #East ifTrue: [position := position + (1@0)].
		orientation = #South ifTrue: [position := position - (0@1)].
		orientation = #West ifTrue: [position := position - (1@0)].
		].
	aString = 'b' ifTrue: [
		orientation = #North ifTrue: [position := position - (0@1)].
		orientation = #East ifTrue: [position := position - (1@0)].
		orientation = #South ifTrue: [position := position + (0@1)].
		orientation = #West ifTrue: [position := position + (1@0)].
		].
	aString = 'r' ifTrue: [
		orientation = #West ifTrue: [orientation := #North] ifFalse:[
		orientation = #South ifTrue: [orientation := #West].
		orientation = #East ifTrue: [orientation := #South].
		orientation = #North ifTrue: [orientation := #East].].
		].
	aString = 'l' ifTrue: [
		orientation = #North ifTrue: [orientation := #West] ifFalse: [
		orientation = #East ifTrue: [orientation := #North].
		orientation = #South ifTrue: [orientation := #East].
		orientation = #West ifTrue: [orientation := #South].].
		].! !

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:42:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 12:42:28'!
PASSED!
!MarsRoverTest methodsFor: 'test - multiple char' stamp: 'ejfsdf 5/14/2022 13:00:15'!
test18MarsRoverStaysAtZeroZeroAndNorthWestWhenReceivingFBLR
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'fblr') isAt: (0@0) heading: #North).! !

!testRun: #MarsRoverTest #test18MarsRoverStaysAtZeroZeroAndNorthWestWhenReceivingFBLR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverStaysAtZeroZeroAndNorthWestWhenReceivingFBLR stamp: 'ejfsdf 5/14/2022 13:00:17'!
PASSED!
!MarsRoverTest methodsFor: 'test - multiple char' stamp: 'ejfsdf 5/14/2022 13:04:21'!
test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'lfdb') isAt: (-1@-1) heading: #North).! !

!testRun: #MarsRoverTest #test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF stamp: 'ejfsdf 5/14/2022 13:04:26'!
FAILURE!
!MarsRoverTest methodsFor: 'test - multiple char' stamp: 'ejfsdf 5/14/2022 13:05:39' prior: 50524533!
test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'db') isAt: (-1@-1) heading: #North).
	! !

!methodRemoval: MarsRoverTest #test18MarsRoverStaysAtZeroZeroAndNorthWestWhenReceivingFBLR stamp: 'ejfsdf 5/14/2022 13:05:45'!
test18MarsRoverStaysAtZeroZeroAndNorthWestWhenReceivingFBLR
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'fblr') isAt: (0@0) heading: #North).!
!MarsRoverTest methodsFor: 'test - multiple char' stamp: 'ejfsdf 5/14/2022 13:11:15' prior: 50524546!
test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'rb') isAt: (-1@-1) heading: #North).
	self assert: ((marsRover process: 'frfrfrlb') isAt: (0@0) heading: #South).
	! !
!MarsRoverTest methodsFor: 'test - multiple char' stamp: 'ejfsdf 5/14/2022 13:12:22'!
test18MarsRoverRecievesMultipleCharacteredStrings
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'rb') isAt: (-1@-1) heading: #North).
	self assert: ((marsRover process: 'frfrfrlb') isAt: (0@0) heading: #South).
	! !

!methodRemoval: MarsRoverTest #test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF stamp: 'ejfsdf 5/14/2022 13:12:22'!
test18MarsRoverStaysAtZeroThreeAndNorthWestWhenReceivingFFF
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'rb') isAt: (-1@-1) heading: #North).
	self assert: ((marsRover process: 'frfrfrlb') isAt: (0@0) heading: #South).
	!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/14/2022 13:12:30'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 13:13:55' prior: 50524319!
process: aString
	aString do:[ :aChar | 	
		aChar = 'f' ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			].
		aChar = 'b' ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			].
		aChar = 'r' ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			].
		aChar = 'l' ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			].].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 13:13:57'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:13:57'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:13:57'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/14/2022 13:13:57'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:14:01'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/14/2022 13:16:12' prior: 50524611!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			].
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			].
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			].
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			].].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/14/2022 13:16:13'!
PASSED!

----SNAPSHOT----(14 May 2022 13:17:30) CuisUniversity-5096.image priorSource: 4557982!

----SNAPSHOT----(14 May 2022 13:17:35) CuisUniversity-5096.image priorSource: 6182553!

----STARTUP---- (15 May 2022 17:59:36) as /Users/sebascantini/Documents/Ejercicios-Ing-I/macos64/CuisUniversity-5096.image!


!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:00:43'!
PASSED!
!MarsRoverTest methodsFor: 'test - general' stamp: 'ejfsdf 5/15/2022 18:16:02'!
test19MarsRoverStopsProcessingAfterAnErroneousCommand
	|marsRover|
	marsRover := MarsRover new.
	self assert: ((marsRover process: 'ffqfr') isAt: (0@2) heading: #North).
	! !

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:16:05'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:22:56' prior: 50524736!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			] ifFalse: [
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			]]]]].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:22:57'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:22:57'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:22:57'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:23:47' prior: 50524959!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			] ifFalse: [
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
		aString = ''.
			]]]]].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:23:49'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:23:49'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:23:49'!
FAILURE!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:31:18' prior: 50525088!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			] ifFalse: [
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
				^nil.
			]]]]].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:31:19'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:31:19'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:31:19'!
ERROR!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:32:48' prior: 50525218!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)].
			] ifFalse: [
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
				^self.
			]]]]].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:32:51'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:36:39'!
moveForward

	orientation = #North ifTrue: [position := position + (0@1)].
			orientation = #East ifTrue: [position := position + (1@0)].
			orientation = #South ifTrue: [position := position - (0@1)].
			orientation = #West ifTrue: [position := position - (1@0)]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:36:39' prior: 50525348!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			self moveForward.
			] ifFalse: [
		aChar = $b ifTrue: [
			orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)].
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
				^self.
			]]]]].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:36:59'!
moveBackwards

	orientation = #North ifTrue: [position := position - (0@1)].
			orientation = #East ifTrue: [position := position - (1@0)].
			orientation = #South ifTrue: [position := position + (0@1)].
			orientation = #West ifTrue: [position := position + (1@0)]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:36:59' prior: 50525484!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			self moveForward.
			] ifFalse: [
		aChar = $b ifTrue: [
			self moveBackwards.
			]  ifFalse: [
		aChar = $r ifTrue: [
			orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].].
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
				^self.
			]]]]].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:37:18'!
turnRight

	^ orientation = #West ifTrue: [orientation := #North] ifFalse:[
			orientation = #South ifTrue: [orientation := #West].
			orientation = #East ifTrue: [orientation := #South].
			orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:37:18' prior: 50525529!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			self moveForward.
			] ifFalse: [
		aChar = $b ifTrue: [
			self moveBackwards.
			]  ifFalse: [
		aChar = $r ifTrue: [
			self turnRight.
			]  ifFalse: [
		aChar = $l ifTrue: [
			orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].].
			] ifFalse: [
				^self.
			]]]]].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:37:41'!
turnLeft

	^ orientation = #North ifTrue: [orientation := #West] ifFalse: [
			orientation = #East ifTrue: [orientation := #North].
			orientation = #South ifTrue: [orientation := #East].
			orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:37:41' prior: 50525566!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [
			self moveForward.
			] ifFalse: [
		aChar = $b ifTrue: [
			self moveBackwards.
			]  ifFalse: [
		aChar = $r ifTrue: [
			self turnRight.
			]  ifFalse: [
		aChar = $l ifTrue: [
			self turnLeft.
			] ifFalse: [
				^self.
			]]]]].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:39:34' prior: 50525596!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [self moveForward.] ifFalse: [
		aChar = $b ifTrue: [self moveBackwards.]  ifFalse: [
		aChar = $r ifTrue: [self turnRight.]  ifFalse: [
		aChar = $l ifTrue: [self turnLeft.] ifFalse: [
		^self.]]]]].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:41:17' prior: 50525517!
moveBackwards

	orientation = #North ifTrue: [position := position - (0@1)].
	orientation = #East ifTrue: [position := position - (1@0)].
	orientation = #South ifTrue: [position := position + (0@1)].
	orientation = #West ifTrue: [position := position + (1@0)]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:41:26' prior: 50525473!
moveForward

	orientation = #North ifTrue: [position := position + (0@1)].
	orientation = #East ifTrue: [position := position + (1@0)].
	orientation = #South ifTrue: [position := position - (0@1)].
	orientation = #West ifTrue: [position := position - (1@0)]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:41:40' prior: 50525585!
turnLeft

	^orientation = #North ifTrue: [orientation := #West] ifFalse: [
	orientation = #East ifTrue: [orientation := #North].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:41:55' prior: 50525555!
turnRight

	^orientation = #West ifTrue: [orientation := #North] ifFalse:[
	orientation = #South ifTrue: [orientation := #West].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:42:11' prior: 50525653!
turnRight

	orientation = #West ifTrue: [orientation := #North] ifFalse:[
	orientation = #South ifTrue: [orientation := #West].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:42:12'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:42:17' prior: 50525642!
turnLeft

	orientation = #North ifTrue: [orientation := #West] ifFalse: [
	orientation = #East ifTrue: [orientation := #North].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:42:19'!
PASSED!

Object subclass: #Orientations
	instanceVariableNames: 'orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientations category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 18:45:49'!
Object subclass: #Orientations
	instanceVariableNames: 'orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:45:59'!
PASSED!

!classRenamed: #Orientations as: #Orientation stamp: 'ejfsdf 5/15/2022 18:48:06'!
Smalltalk renameClassNamed: #Orientations as: #Orientation!
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 18:48:16' prior: 50518341 overrides: 16920235!
initialize
	position := 0@0.
	orientation := Orientation new.! !
!Orientation methodsFor: 'no messages' stamp: 'ejfsdf 5/15/2022 18:48:42' overrides: 16920235!
initialize
	orientation := #North! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 18:48:43' prior: 50525963 overrides: 16920235!
initialize
	orientation := #North.! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 18:50:50' prior: 50525958 overrides: 16920235!
initialize
	position := 0@0.
	orientation := #North.! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:50:51'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:16'!
moveSouth

	^ position := position - (0@1)! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:16' prior: 50525620!
moveBackwards

	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [position := position - (1@0)].
	orientation = #South ifTrue: [position := position + (0@1)].
	orientation = #West ifTrue: [position := position + (1@0)]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:16' prior: 50525631!
moveForward

	orientation = #North ifTrue: [position := position + (0@1)].
	orientation = #East ifTrue: [position := position + (1@0)].
	orientation = #South ifTrue: [self moveSouth].
	orientation = #West ifTrue: [position := position - (1@0)]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:52'!
moveNorth

	^ position := position + (0@1)! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:52' prior: 50526067!
moveBackwards

	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [position := position - (1@0)].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [position := position + (1@0)]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:52:52' prior: 50526078!
moveForward

	orientation = #North ifTrue: [self moveNorth].
	orientation = #East ifTrue: [position := position + (1@0)].
	orientation = #South ifTrue: [self moveSouth].
	orientation = #West ifTrue: [position := position - (1@0)]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:07'!
moveEast

	^ position := position + (1@0)! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:07' prior: 50526093!
moveBackwards

	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [position := position - (1@0)].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [self moveEast]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:07' prior: 50526104!
moveForward

	orientation = #North ifTrue: [self moveNorth].
	orientation = #East ifTrue: [self moveEast].
	orientation = #South ifTrue: [self moveSouth].
	orientation = #West ifTrue: [position := position - (1@0)]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:22'!
moveWest

	^ position := position - (1@0)! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:22' prior: 50526119!
moveBackwards

	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [self moveWest].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [self moveEast]! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 18:53:22' prior: 50526129!
moveForward

	orientation = #North ifTrue: [self moveNorth].
	orientation = #East ifTrue: [self moveEast].
	orientation = #South ifTrue: [self moveSouth].
	orientation = #West ifTrue: [self moveWest]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:34'!
turnWest

	^ orientation := #West! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:34' prior: 50525760!
turnLeft

	orientation = #North ifTrue: [self turnWest] ifFalse: [
	orientation = #East ifTrue: [orientation := #North].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:34' prior: 50525664!
turnRight

	orientation = #West ifTrue: [orientation := #North] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:50'!
turnNorth

	^ orientation := #North! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:50' prior: 50526166!
turnLeft

	orientation = #North ifTrue: [self turnWest] ifFalse: [
	orientation = #East ifTrue: [self turnNorth].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:55:50' prior: 50526176!
turnRight

	orientation = #West ifTrue: [self turnNorth] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 18:55:50' prior: 50525973 overrides: 16920235!
initialize
	position := 0@0.
	self turnNorth.! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:05'!
turnEast

	^ orientation := #East! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:05' prior: 50526190!
turnLeft

	orientation = #North ifTrue: [self turnWest] ifFalse: [
	orientation = #East ifTrue: [self turnNorth].
	orientation = #South ifTrue: [self turnEast].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:05' prior: 50526200!
turnRight

	orientation = #West ifTrue: [self turnNorth] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [self turnEast].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:18'!
turnSouth

	^ orientation := #South! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:18' prior: 50526219!
turnLeft

	orientation = #North ifTrue: [self turnWest] ifFalse: [
	orientation = #East ifTrue: [self turnNorth].
	orientation = #South ifTrue: [self turnEast].
	orientation = #West ifTrue: [self turnSouth].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:56:18' prior: 50526229!
turnRight

	orientation = #West ifTrue: [self turnNorth] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [self turnSouth].
	orientation = #North ifTrue: [self turnEast].]! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 18:56:21'!
PASSED!
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:57:34' prior: 50526243!
turnLeft

	orientation = #North ifTrue: [self turnWest] ifFalse: [
	orientation = #East ifTrue: [self turnNorth].
	orientation = #South ifTrue: [self turnEast].
	orientation = #West ifTrue: [self turnSouth].]! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 18:58:17' prior: 50526211 overrides: 16920235!
initialize
	position := 0@0.
	orientation := Orientation new.! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:00:00' prior: 50526253!
turnRight

	orientation turnRight.! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:00:18' prior: 50526364!
turnRight

	orientation turnRight! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:00:19' prior: 50526368!
turnRight

	orientation turnRight.! !
!Orientation methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 19:00:40'!
turnRight

	orientation = #West ifTrue: [self turnNorth] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [self turnSouth].
	orientation = #North ifTrue: [self turnEast].]! !

!methodRemoval: Orientation #turnRight stamp: 'ejfsdf 5/15/2022 19:01:10'!
turnRight

	orientation = #West ifTrue: [self turnNorth] ifFalse:[
	orientation = #South ifTrue: [self turnWest].
	orientation = #East ifTrue: [self turnSouth].
	orientation = #North ifTrue: [self turnEast].]!

!methodRemoval: MarsRover #moveEast stamp: 'ejfsdf 5/15/2022 19:01:31'!
moveEast

	^ position := position + (1@0)!
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 19:01:49'!
moveEast

	^ position := position + (1@0)! !

!methodRemoval: MarsRover #turnEast stamp: 'ejfsdf 5/15/2022 19:01:57'!
turnEast

	^ orientation := #East!

!methodRemoval: MarsRover #turnNorth stamp: 'ejfsdf 5/15/2022 19:02:06'!
turnNorth

	^ orientation := #North!

!methodRemoval: MarsRover #turnSouth stamp: 'ejfsdf 5/15/2022 19:02:08'!
turnSouth

	^ orientation := #South!

!methodRemoval: MarsRover #turnWest stamp: 'ejfsdf 5/15/2022 19:02:10'!
turnWest

	^ orientation := #West!
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:42:17' prior: 50526348!
turnLeft

	orientation = #North ifTrue: [orientation := #West] ifFalse: [
	orientation = #East ifTrue: [orientation := #North].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 18:42:11' prior: 50526372!
turnRight

	orientation = #West ifTrue: [orientation := #North] ifFalse:[
	orientation = #South ifTrue: [orientation := #West].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:03:07' prior: 50526416!
turnLeft

	orientation turnLeft.! !
!Orientation methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 19:03:17'!
turnLeft

	orientation = #North ifTrue: [orientation := #West] ifFalse: [
	orientation = #East ifTrue: [orientation := #North].
	orientation = #South ifTrue: [orientation := #East].
	orientation = #West ifTrue: [orientation := #South].]! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:03:56' prior: 50526427!
turnRight

	orientation turnRight.! !
!Orientation methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:04:03'!
turnRight

	orientation = #West ifTrue: [orientation := #North] ifFalse:[
	orientation = #South ifTrue: [orientation := #West].
	orientation = #East ifTrue: [orientation := #South].
	orientation = #North ifTrue: [orientation := #East].]! !
!MarsRover methodsFor: 'testing' stamp: 'ejfsdf 5/15/2022 19:04:56' prior: 50518327!
isAt: queriedPosition heading: queriedOrientation
	
	^ queriedPosition = position and: (orientation isEqual: queriedOrientation)! !
!Orientation methodsFor: 'testing' stamp: 'ejfsdf 5/15/2022 19:07:17'!
isEqual: queriedOrientation

	^ queriedOrientation = orientation.! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 19:09:02' prior: 50526153!
moveForward

	orientation giveMovementTo: self.! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:10:03'!
giveMovementTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 19:10:27' prior: 50526143!
moveBackwards

	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [self moveWest].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [self moveEast].! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:12:09'!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:12:09' prior: 50526480!
moveForward

	orientation giveMovementForwardTo: self.! !

!methodRemoval: Orientation #giveMovementTo: stamp: 'ejfsdf 5/15/2022 19:12:09'!
giveMovementTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].!
!MarsRover methodsFor: 'movement' stamp: 'ejfsdf 5/15/2022 19:12:41' prior: 50526495!
moveBackwards

	orientation giveMovementBackwardsTo: self.! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:12:53' prior: 50526504!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [self moveWest].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [self moveEast].! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:13:00' prior: 50526535!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:13:15'!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [self moveSouth].
	orientation = #East ifTrue: [self moveWest].
	orientation = #South ifTrue: [self moveNorth].
	orientation = #West ifTrue: [self moveEast].! !
!Orientation methodsFor: 'xxx' stamp: 'ejfsdf 5/15/2022 19:13:30' prior: 50526555!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:13:35'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:14:38'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:14:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:19:06'!
PASSED!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 19:20:30' prior: 50525609!
process: aString
	aString do:[ :aChar | 	
		self processChar: aChar
		].! !
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 19:21:01'!
processChar: aChar
	aChar = $f ifTrue: [self moveForward.] ifFalse: [
	aChar = $b ifTrue: [self moveBackwards.]  ifFalse: [
	aChar = $r ifTrue: [self turnRight.]  ifFalse: [
	aChar = $l ifTrue: [self turnLeft.] ifFalse: [
	^self.]]]]! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:21:02'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:21:02'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:21:02'!
FAILURE!

!methodRemoval: MarsRover #processChar: stamp: 'ejfsdf 5/15/2022 19:22:21'!
processChar: aChar
	aChar = $f ifTrue: [self moveForward.] ifFalse: [
	aChar = $b ifTrue: [self moveBackwards.]  ifFalse: [
	aChar = $r ifTrue: [self turnRight.]  ifFalse: [
	aChar = $l ifTrue: [self turnLeft.] ifFalse: [
	^self.]]]]!
!MarsRover methodsFor: 'process' stamp: 'ejfsdf 5/15/2022 18:39:34' prior: 50526831!
process: aString
	aString do:[ :aChar | 	
		aChar = $f ifTrue: [self moveForward.] ifFalse: [
		aChar = $b ifTrue: [self moveBackwards.]  ifFalse: [
		aChar = $r ifTrue: [self turnRight.]  ifFalse: [
		aChar = $l ifTrue: [self turnLeft.] ifFalse: [
		^self.]]]]].! !

Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 19:25:14'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 19:25:20'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 19:25:23'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 19:25:26'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation methodsFor: 'testing' stamp: 'ejfsdf 5/15/2022 19:25:56' prior: 50526475!
isEqual: queriedOrientation

	self subclassResponsibility.! !

Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'ejfsdf 5/15/2022 19:28:38'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'no messages' stamp: 'ejfsdf 5/15/2022 19:28:50' overrides: 50526998!
isEqual: orientation! !
!East methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:29:08' prior: 50527014 overrides: 50526998!
isEqual: orientation

	^ orientation = #East! !
!East methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:29:22' prior: 50527019 overrides: 50526998!
isEqual: orientation

	^orientation = #East! !
!North methodsFor: 'no messages' stamp: 'ejfsdf 5/15/2022 19:30:04' overrides: 50526998!
isEqual: orientation

	^orientation = #North! !
!South methodsFor: 'no messages' stamp: 'ejfsdf 5/15/2022 19:30:14' overrides: 50526998!
isEqual: orientation

	^orientation = #South! !
!West methodsFor: 'no messages' stamp: 'ejfsdf 5/15/2022 19:30:24' overrides: 50526998!
isEqual: orientation

	^orientation = #West! !
!MarsRover methodsFor: 'initialization' stamp: 'ejfsdf 5/15/2022 19:30:56' prior: 50526359 overrides: 16920235!
initialize
	position := 0@0.
	orientation := North new.! !

!methodRemoval: Orientation #initialize stamp: 'ejfsdf 5/15/2022 19:31:32'!
initialize
	orientation := #North.!
!Orientation methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:31:51' prior: 50526457!
turnRight

	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:32:33' overrides: 50527053!
turnRight

	^ South new! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:32:46' prior: 50526438!
turnLeft

	orientation = orientation turnLeft.! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:32:54' prior: 50526453!
turnRight

	orientation := orientation turnRight.! !
!MarsRover methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:32:58' prior: 50527062!
turnLeft

	orientation := orientation turnLeft.! !
!North methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:33:15' overrides: 50527053!
turnRight

	^ East new! !
!South methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:33:30' overrides: 50527053!
turnRight

	^ West new! !
!West methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:34:10' overrides: 50527053!
turnRight

	^ North new! !
!Orientation methodsFor: 'rotation' stamp: 'ejfsdf 5/15/2022 19:35:08' prior: 50526442!
turnLeft

	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:35:25' overrides: 50527089!
turnLeft

	^ North new! !
!North methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:35:36' overrides: 50527089!
turnLeft

	^ West new! !
!South methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:35:48' overrides: 50527089!
turnLeft

	^ East new! !
!West methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:35:56' overrides: 50527089!
turnLeft

	^ South new! !
!North methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:36:35' overrides: 50526565!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].! !
!East methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:36:35' overrides: 50526565!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].! !
!West methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:36:35' overrides: 50526565!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].! !
!South methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:36:35' overrides: 50526565!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].! !

!methodRemoval: Orientation #giveMovementBackwardsTo: stamp: 'ejfsdf 5/15/2022 19:36:35'!
giveMovementBackwardsTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveSouth].
	orientation = #East ifTrue: [aMarsRover moveWest].
	orientation = #South ifTrue: [aMarsRover moveNorth].
	orientation = #West ifTrue: [aMarsRover moveEast].!
!Orientation methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:36:46'!
giveMovementBackwardsTo: aMarsRover

	self subclassResponsibility.! !
!North methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:37:02' overrides: 50526545!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!East methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:37:02' overrides: 50526545!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!West methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:37:02' overrides: 50526545!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !
!South methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:37:02' overrides: 50526545!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].! !

!methodRemoval: Orientation #giveMovementForwardTo: stamp: 'ejfsdf 5/15/2022 19:37:02'!
giveMovementForwardTo: aMarsRover
	
	orientation = #North ifTrue: [aMarsRover moveNorth].
	orientation = #East ifTrue: [aMarsRover moveEast].
	orientation = #South ifTrue: [aMarsRover moveSouth].
	orientation = #West ifTrue: [aMarsRover moveWest].!
!Orientation methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:37:07'!
giveMovementForwardTo: aMarsRover

	self subclassResponsibility.! !
!West methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:38:43' prior: 50527193 overrides: 50527225!
giveMovementForwardTo: aMarsRover
	
	aMarsRover moveWest.! !
!West methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:38:58' prior: 50527132 overrides: 50527165!
giveMovementBackwardsTo: aMarsRover
	
	aMarsRover moveEast! !
!East methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:09' prior: 50527121 overrides: 50527165!
giveMovementBackwardsTo: aMarsRover
	
	aMarsRover moveWest! !
!East methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:19' prior: 50527182 overrides: 50527225!
giveMovementForwardTo: aMarsRover
	
	aMarsRover moveEast! !
!North methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:29' prior: 50527110 overrides: 50527165!
giveMovementBackwardsTo: aMarsRover
	
	aMarsRover moveSouth! !
!North methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:37' prior: 50527171 overrides: 50527225!
giveMovementForwardTo: aMarsRover
	
	aMarsRover moveNorth! !
!South methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:46' prior: 50527143 overrides: 50527165!
giveMovementBackwardsTo: aMarsRover
	
	aMarsRover moveNorth! !
!South methodsFor: 'movement queries' stamp: 'ejfsdf 5/15/2022 19:39:54' prior: 50527204 overrides: 50527225!
giveMovementForwardTo: aMarsRover
	
	aMarsRover moveSouth! !

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:39:56'!
PASSED!

!classRenamed: #Orientation as: #MarsRoverOrientation stamp: 'ejfsdf 5/15/2022 19:42:27'!
Smalltalk renameClassNamed: #Orientation as: #MarsRoverOrientation!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:42:35'!
PASSED!
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:44:58'!
InitiateMarsRoverHeadingNorth

	^ MarsRover new! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523645!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50522749!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (0@1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - general' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50524946!
test19MarsRoverStopsProcessingAfterAnErroneousCommand
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'ffqfr') isAt: (0@2) heading: #North).
	! !
!MarsRoverTest methodsFor: 'test - general' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518077!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: '') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518530!
test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50522595!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518520!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518847!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523449!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (-1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50522289!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518246!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'b') isAt: (0@-1) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523435!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'b') isAt: (1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523954!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523221!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518433!
test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518739!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50518280!
test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - general' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50524580!
test18MarsRoverRecievesMultipleCharacteredStrings
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'rb') isAt: (-1@-1) heading: #North).
	self assert: ((marsRover process: 'frfrfrlb') isAt: (0@0) heading: #South).
	! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:44:58' prior: 50523069!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := self InitiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'initializations' stamp: 'ejfsdf 5/15/2022 19:46:12'!
initiateMarsRoverHeadingNorth

	^ MarsRover new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527576!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527541!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527430!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527442!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527552!
test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527453!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527464!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'f') isAt: (-1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527389!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (0@1) heading: #South)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527378!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527531!
test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527420!
test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'f') isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527486!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'b') isAt: (0@-1) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527508!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527401!
test19MarsRoverStopsProcessingAfterAnErroneousCommand
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'ffqfr') isAt: (0@2) heading: #North).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527562!
test18MarsRoverRecievesMultipleCharacteredStrings
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: 'lf') isAt: (-1@0) heading: #West).
	self assert: ((marsRover process: 'rb') isAt: (-1@-1) heading: #North).
	self assert: ((marsRover process: 'frfrfrlb') isAt: (0@0) heading: #South).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527497!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((marsRover process: 'b') isAt: (1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527411!
test01MarsRoverDoesNothingOnEmptyString
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((marsRover process: '') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:12' prior: 50527475!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ejfsdf 5/15/2022 19:46:13' prior: 50527519!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #East)! !

!methodRemoval: MarsRoverTest #InitiateMarsRoverHeadingNorth stamp: 'ejfsdf 5/15/2022 19:46:13'!
InitiateMarsRoverHeadingNorth

	^ MarsRover new!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:46:32'!
PASSED!
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:47:30' prior: 50527627!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:48:04' prior: 50527604!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:48:10' prior: 50527648!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:48:16' prior: 50527778!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:48:29' prior: 50527615!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'r'.
	marsRover process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:49:05' prior: 50527935!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := (self initiateMarsRoverHeadingNorth process: 'r') process: 'r'.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:49:14' prior: 50527670!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := (self initiateMarsRoverHeadingNorth process: 'r') process: 'r'.
	self assert: ((marsRover process: 'b') isAt: (0@1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:49:19' prior: 50527592!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := (self initiateMarsRoverHeadingNorth process: 'r') process: 'r'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:49:24' prior: 50527789!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := (self initiateMarsRoverHeadingNorth process: 'r') process: 'r'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:51:26'!
initiateMarsRoverHeadingSouth

	^ (self initiateMarsRoverHeadingNorth process: 'r') process: 'r'! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:51:26' prior: 50527969!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:51:26' prior: 50527947!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((marsRover process: 'f') isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:51:26' prior: 50527958!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((marsRover process: 'b') isAt: (0@1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:51:26' prior: 50527980!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:52:02'!
initiateMarsRoverHeadingEast

	^ self initiateMarsRoverHeadingNorth process: 'r'! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:52:02' prior: 50527924!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:52:02' prior: 50527913!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'initializations' stamp: 'ejfsdf 5/15/2022 19:52:02' prior: 50527991!
initiateMarsRoverHeadingSouth

	^ (self initiateMarsRoverHeadingEast) process: 'r'! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:52:02' prior: 50527891!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((marsRover process: 'f') isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:52:02' prior: 50527902!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((marsRover process: 'b') isAt: (-1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:53:03'!
sendMoveForwardSignalTo: marsRover

	^ marsRover process: 'f'! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:53:03' prior: 50527703!
test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (0@1) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:53:03' prior: 50528008!
test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (0@-1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:53:03' prior: 50528072!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:53:03' prior: 50527659!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (-1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:53:08' prior: 50528120!
test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:54:13'!
sendMoveBackwardsSignalTo: marsRover

	^ marsRover process: 'b'! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:54:13' prior: 50528082!
test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (-1@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:54:13' prior: 50528019!
test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (0@1) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:54:13' prior: 50527713!
test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (0@-1) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:54:13' prior: 50527758!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	marsRover process: 'l'.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:54:59' prior: 50528131!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'l'.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (-1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:04' prior: 50528192!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'l'.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:09' prior: 50527682!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'l'.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:17' prior: 50527723!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth process: 'l'.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #South)! !

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverDoesNothingOnEmptyString stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingNorthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingNorthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingEastWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingEastWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesToZeroMinusOneFromZeroZeroWhilstHeadingSouthWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesToZeroOneFromZeroZeroWhilstHeadingSouthWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRecievesMultipleCharacteredStrings stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverStopsProcessingAfterAnErroneousCommand stamp: 'ejfsdf 5/15/2022 19:55:18'!
PASSED!
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:38'!
initiateMarsRoverHeadingWest

	^ self initiateMarsRoverHeadingNorth process: 'l'! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:38' prior: 50528226!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((marsRover process: 'r') isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:38' prior: 50528237!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((marsRover process: 'l') isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:38' prior: 50528204!
test14MarsRoverMovesToMinusOneZeroFromZeroZeroWhilstHeadingWestWhileReceivingF
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((self sendMoveForwardSignalTo: marsRover) isAt: (-1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:55:38' prior: 50528215!
test15MarsRoverMovesToOneZeroFromZeroZeroWhilstHeadingWestWhenReceivingB
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((self sendMoveBackwardsSignalTo: marsRover) isAt: (1@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:56:50'!
sendTurnLeftSignalTo: marsRover

	^ marsRover process: 'l'! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:56:50' prior: 50528353!
test17MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingWestWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((self sendTurnLeftSignalTo: marsRover) isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:56:50' prior: 50528029!
test13MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingSouthWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((self sendTurnLeftSignalTo: marsRover) isAt: (0@0) heading: #East)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:56:50' prior: 50528045!
test09MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingEastWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((self sendTurnLeftSignalTo: marsRover) isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:56:50' prior: 50527693!
test05MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingNorthWhenReceivingL
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((self sendTurnLeftSignalTo: marsRover) isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:57:26'!
sendTurnRightSignalTo: marsRover

	^ marsRover process: 'r'! !
!MarsRoverTest methodsFor: 'test - single char - west' stamp: 'ejfsdf 5/15/2022 19:57:26' prior: 50528343!
test16MarsRoverStaysAtZeroZeroAndRotatesNorthWhilstHeadingWestWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingWest.
	self assert: ((self sendTurnRightSignalTo: marsRover) isAt: (0@0) heading: #North)! !
!MarsRoverTest methodsFor: 'test - single char - east' stamp: 'ejfsdf 5/15/2022 19:57:26' prior: 50528055!
test08MarsRoverStaysAtZeroZeroAndRotatesSouthWhilstHeadingEastWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingEast.
	self assert: ((self sendTurnRightSignalTo: marsRover) isAt: (0@0) heading: #South)! !
!MarsRoverTest methodsFor: 'test - single char - south' stamp: 'ejfsdf 5/15/2022 19:57:26' prior: 50527998!
test12MarsRoverStaysAtZeroZeroAndRotatesWestWhilstHeadingSouthWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingSouth.
	self assert: ((self sendTurnRightSignalTo: marsRover) isAt: (0@0) heading: #West)! !
!MarsRoverTest methodsFor: 'test - single char - north' stamp: 'ejfsdf 5/15/2022 19:57:26' prior: 50527638!
test04MarsRoverStaysAtZeroZeroAndRotatesEastWhilstHeadingNorthWhenReceivingR
	|marsRover|
	marsRover := self initiateMarsRoverHeadingNorth.
	self assert: ((self sendTurnRightSignalTo: marsRover) isAt: (0@0) heading: #East)! !

----SNAPSHOT----(15 May 2022 20:00:28) CuisUniversity-5096.image priorSource: 6182641!