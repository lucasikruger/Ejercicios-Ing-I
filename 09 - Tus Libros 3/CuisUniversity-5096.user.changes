

----STARTUP---- (12 June 2022 16:06:43) as /Users/sebascantini/Downloads/macos64/CuisUniversity-5096.image!


Object subclass: #ObjectFactory
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/12/2022 16:13:50'!
Object subclass: #ObjectFactory
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectFactory class methodsFor: 'no messages' stamp: 'scb 6/12/2022 16:15:19'!
initializeCartWith: aCatalog

	^ Cart with: aCatalog! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 16:17:09' prior: 50492994!
checkout: aCatalog 

	^ self new checkout: aCatalog.
	! !
!ObjectFactory class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:17:40' prior: 50500332!
initializeCartWith: aCatalog

	^ Cart checkout: aCatalog! !
!Cart methodsFor: 'configuration' stamp: 'scb 6/12/2022 16:18:23'!
with: aCollection

	catalog := aCollection! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 16:18:23'!
with: aCatalog 

	^ self new checkout: aCatalog.
	! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:18:23' prior: 50500337!
checkout: aCatalog 

	^ self new with: aCatalog.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:18:23' prior: 50499914!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := Cart with: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:18:23' prior: 50492988!
initializeCartWithCollectionOfBooks

	^ Cart with: self initializeCatalogOfBooks! !
!ObjectFactory class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:18:23' prior: 50500343!
initializeCartWith: aCatalog

	^ Cart with: aCatalog! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:18:23' prior: 50500351!
with: aCatalog 

	^ self new with: aCatalog.
	! !

!methodRemoval: Cart #checkout: stamp: 'scb 6/12/2022 16:18:23'!
checkout: aCollection

	catalog := aCollection!

!methodRemoval: Cart class #checkout: stamp: 'scb 6/12/2022 16:18:23'!
checkout: aCatalog 

	^ self new with: aCatalog.
	!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 16:18:30'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 16:18:33'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 16:18:33'!
PASSED!
!Cart methodsFor: 'configuration' stamp: 'scb 6/12/2022 16:19:52'!
initializeWith: aCollection

	catalog := aCollection! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:19:52' prior: 50500381!
with: aCatalog 

	^ self new initializeWith: aCatalog.
	! !

!methodRemoval: Cart #with: stamp: 'scb 6/12/2022 16:19:52'!
with: aCollection

	catalog := aCollection!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 16:19:56'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 16:20:01'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 16:20:01'!
PASSED!
!CashierTest methodsFor: 'initialization' stamp: 'scb 6/12/2022 16:21:24' prior: 50498112!
initializeEmptyCart

	^ Cart with: Dictionary new.! !
!CashierTest methodsFor: 'initialization' stamp: 'scb 6/12/2022 16:22:42' prior: 50500361!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := ObjectFactory createCartWith: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !
!CashierTest methodsFor: 'initialization' stamp: 'scb 6/12/2022 16:23:10' prior: 50500544!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := ObjectFactory initializeCartWith: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !
!ObjectFactory class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:24:50'!
expiredCreditCard

	^ CreditCard withExpirationDate: 0.! !
!ObjectFactory class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:25:14'!
cartWith: aCatalog

	^ Cart with: aCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 16:25:14' prior: 50500553!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := ObjectFactory cartWith: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !

!methodRemoval: ObjectFactory class #initializeCartWith: stamp: 'scb 6/12/2022 16:25:14'!
initializeCartWith: aCatalog

	^ Cart with: aCatalog!

----STARTUP---- (12 June 2022 17:35:32) as /Users/sebascantini/Downloads/macos64/CuisUniversity-5096.image!


Object subclass: #Objectfactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Objectfactory category: 'TusLibros' stamp: 'scb 6/12/2022 17:39:23'!
Object subclass: #Objectfactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Objectfactory methodsFor: 'no messages' stamp: 'scb 6/12/2022 17:40:24'!
initiate
	
	today := 0! !

!classRenamed: #Objectfactory as: #ObjectFactory stamp: 'scb 6/12/2022 17:40:31'!
Smalltalk renameClassNamed: #Objectfactory as: #ObjectFactory!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:40:56' prior: 50500331!
initiate
	
	today := DateAndTime now.! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:41:25'!
today
	
	^today! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:41:29' prior: 50500340!
initiate
	
	today := DateAndTime now! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:42:17' overrides: 16920235!
initialize
	
	today := DateAndTime now! !

!methodRemoval: ObjectFactory #initiate stamp: 'scb 6/12/2022 17:42:17'!
initiate
	
	today := DateAndTime now!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:13'!
defaultCatalog

	^ Dictionary with: 'book' -> 10! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:29' prior: 50500361!
defaultCatalog

	^ Dictionary with: 'validBook' -> 10! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:41'!
validBookPrice

	^ 10! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:41' prior: 50500366!
defaultCatalog

	^ Dictionary with: 'validBook' -> self validBookPrice! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:49'!
validBook

	^ 'validBook'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:43:49' prior: 50500375!
defaultCatalog

	^ Dictionary with: self validBook -> self validBookPrice! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:44:24'!
invalidBook

	^ 'invalidBook'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:44:52'!
createCart

	^ Cart with: self defaultCatalog! !
!Cart methodsFor: 'configuration' stamp: 'scb 6/12/2022 17:45:07'!
with: aCollection

	catalog := aCollection! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 17:45:07'!
with: aCollection 

	^ self new checkout: aCollection.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:45:07' prior: 50492988!
initializeCartWithCollectionOfBooks

	^ Cart with: self initializeCatalogOfBooks! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:45:07' prior: 50499914!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := Cart with: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:45:07' prior: 50492994!
checkout: aCollection 

	^ self new with: aCollection.
	! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:45:07' prior: 50500401!
with: aCollection 

	^ self new with: aCollection.
	! !

!methodRemoval: Cart #checkout: stamp: 'scb 6/12/2022 17:45:07'!
checkout: aCollection

	catalog := aCollection!

!methodRemoval: Cart class #checkout: stamp: 'scb 6/12/2022 17:45:07'!
checkout: aCollection 

	^ self new with: aCollection.
	!
!Cart methodsFor: 'configuration' stamp: 'scb 6/12/2022 17:45:23'!
initializeWith: aCollection

	catalog := aCollection! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:45:23' prior: 50500426!
with: aCollection 

	^ self new initializeWith: aCollection.
	! !

!methodRemoval: Cart #with: stamp: 'scb 6/12/2022 17:45:23'!
with: aCollection

	catalog := aCollection!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 17:45:31'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 17:45:31'!
PASSED!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:46:37'!
expiredCreditCard

	^ CreditCard withExpirationDate: 0! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:48:05' prior: 50500504!
expiredCreditCard

	^ CreditCard withExpirationDate: (Month month: today monthIndex year: today thisYear - 1)! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:48:19'!
notExpiredCreditCard

	^ CreditCard withExpirationDate: (Month month: today monthIndex year: today thisYear + 1)! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'scb 6/12/2022 17:51:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:51:07' overrides: 16961394!
setUp
	
	factory := ObjectFactory new! !

!methodRemoval: CartTest #bookPrice stamp: 'scb 6/12/2022 17:51:53'!
bookPrice

	^ 10!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:52:16' prior: 50492627!
test01NewCartIsEmpty

	self assert: factory createCart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:52:17'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:52:17'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:52:17'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:52:17'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:52:17'!
ERROR!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:52:17'!
ERROR!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:52:17'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:52:17'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:52:17'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:52:17'!
ERROR!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:52:20'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:52:54' prior: 50500537!
test01NewCartIsEmpty

	self assert: factory createCart list isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:53:16' prior: 50500576!
test01NewCartIsEmpty

	self assert: factory createCart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:53:18'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:53:18'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:53:18'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:53:18'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:53:18'!
ERROR!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:53:18'!
ERROR!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:53:18'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:53:18'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:53:18'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:53:18'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:53:50' prior: 50492631!
test02CartCantAddBookOutsideOfCollection

	| aCart |
	
	aCart := factory createCart.
	
	self with: aCart should: [ aCart add: factory invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:53:51'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:53:51'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:53:51'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:53:51'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:53:51'!
ERROR!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:53:51'!
ERROR!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:53:51'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:53:51'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:53:51'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:53:51'!
ERROR!

!methodRemoval: CartTest #initializeCatalogOfBooks stamp: 'scb 6/12/2022 17:54:15'!
initializeCatalogOfBooks

	^ Dictionary with: self book -> self bookPrice!

!methodRemoval: CartTest #book stamp: 'scb 6/12/2022 17:54:18'!
book

	^ 'book'!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:54:39'!
initializeCart

	^ factory createCart! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:54:40'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:54:40'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:54:40'!
FAILURE!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:54:40'!
ERROR!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:54:43'!
ERROR!

!methodRemoval: CartTest #initializeCart stamp: 'scb 6/12/2022 17:54:54'!
initializeCart

	^ factory createCart!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:55:03'!
initializeCart

	^ Cart with: self initializeCatalogOfBooks! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:03' prior: 50492656!
test04_5CartCantAddNonIntegerAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 1.5 of: self book ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:03' prior: 50492615!
initializeCartWithCollectionOfBooksAndBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 2 of: self book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:03' prior: 50492646!
test04CartCantAddNonStrictlyPositiveAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: -1 of: self book ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !

!methodRemoval: CartTest #initializeCartWithCollectionOfBooks stamp: 'scb 6/12/2022 17:55:03'!
initializeCartWithCollectionOfBooks

	^ Cart with: self initializeCatalogOfBooks!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:55:11' prior: 50500703!
initializeCart

	^ factory createCart! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:55:14'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:55:14'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:55:14'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:55:14'!
FAILURE!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:55:14'!
FAILURE!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:55:14'!
FAILURE!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:55:14'!
ERROR!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:55:14'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:55:14'!
ERROR!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:55:16'!
ERROR!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:55:42'!
initializeCartWithValidBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 2 of: self book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:42' prior: 50492686!
test08CartKnowsOccurrancesOfBooks

	| aCart |
	
	aCart := self initializeCartWithValidBookIncluded.
	
	self assert: 2 equals: (aCart occurrencesOf: self book)
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:42' prior: 50492679!
test07CartKnowsAddedBooks

	| aCart |
	
	aCart := self initializeCartWithValidBookIncluded.
	
	self assert: aCart includes: self book
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:55:42' prior: 50492639!
test03CartWithBookIsNotEmpty

	| aCart |
	
	aCart := self initializeCartWithValidBookIncluded.
	
	self deny: aCart isEmpty! !

!methodRemoval: CartTest #initializeCartWithCollectionOfBooksAndBookIncluded stamp: 'scb 6/12/2022 17:55:42'!
initializeCartWithCollectionOfBooksAndBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 2 of: self book.!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:55:56' prior: 50500775!
initializeCartWithValidBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 1 of: factory validBook .! !
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:55:57' prior: 50500814!
initializeCartWithValidBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 1 of: factory validBook.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:55:58'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:55:58'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:55:58'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:55:58'!
FAILURE!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:55:58'!
FAILURE!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:55:58'!
FAILURE!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:55:58'!
ERROR!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:55:58'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:55:58'!
ERROR!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:56:01'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:56:31' prior: 50500725!
test04CartCantAddNonStrictlyPositiveAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: -1 of: factory validBook ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:56:32'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:56:32'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:56:32'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:56:32'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:56:32'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:56:32'!
FAILURE!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:56:32'!
FAILURE!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:56:32'!
ERROR!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:56:32'!
ERROR!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:56:32'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:56:45' prior: 50500708!
test04_5CartCantAddNonIntegerAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 1.5 of: factory validBook ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:56:51' prior: 50492665!
test05CartCantAddMultipleCopiesOfBookOutsideOfCollection

	| aCart |
	
	aCart := Cart new.
	
	self with: aCart should: [ aCart add: 2 of: factory validBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:57:01'!
book

	^ factory validBook! !
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:57:01' prior: 50500821!
initializeCartWithValidBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 1 of: self book.! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:57:01' prior: 50500859!
test04CartCantAddNonStrictlyPositiveAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: -1 of: self book ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:57:01' prior: 50500900!
test04_5CartCantAddNonIntegerAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 1.5 of: self book ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:57:01' prior: 50500910!
test05CartCantAddMultipleCopiesOfBookOutsideOfCollection

	| aCart |
	
	aCart := Cart new.
	
	self with: aCart should: [ aCart add: 2 of: self book ] riseErrorWithMessage: aCart invalidBookErrorMessage! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:57:37'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:57:40'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:57:40'!
FAILURE!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:57:40'!
FAILURE!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:57:56'!
initializeCartWithTwoValidBooksIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 1 of: self book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:57:56' prior: 50500791!
test07CartKnowsAddedBooks

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: aCart includes: self book
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:57:56' prior: 50500782!
test08CartKnowsOccurrancesOfBooks

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: 2 equals: (aCart occurrencesOf: self book)
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 17:57:56' prior: 50500799!
test03CartWithBookIsNotEmpty

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self deny: aCart isEmpty! !

!methodRemoval: CartTest #initializeCartWithValidBookIncluded stamp: 'scb 6/12/2022 17:57:56'!
initializeCartWithValidBookIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 1 of: self book.!
!CartTest methodsFor: 'initializations' stamp: 'scb 6/12/2022 17:57:58' prior: 50500991!
initializeCartWithTwoValidBooksIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 2 of: self book.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:57:59'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:57:59'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:58:29' prior: 50500581!
test01NewCartIsEmpty

	self assertIsEmpty: factory createCart.! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:58:37' prior: 50501064!
test01NewCartIsEmpty

	self assertIsEmpty: self initializeCart.! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:58:38' prior: 50501069!
test01NewCartIsEmpty

	self assertIsEmpty: self initializeCart! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:58:39'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:58:39'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:58:51' prior: 50500617!
test02CartCantAddBookOutsideOfCollection

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: factory invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:58:53'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:58:53'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:59:31' prior: 50500948!
test05CartCantAddMultipleCopiesOfBookOutsideOfCollection

	| aCart |
	
	aCart := self initializeCart .
	
	self with: aCart should: [ aCart add: 2 of: factory invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:59:32' prior: 50501151!
test05CartCantAddMultipleCopiesOfBookOutsideOfCollection

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 2 of: factory invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 17:59:33'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 17:59:33'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 17:59:58' prior: 50492674!
test06CartDoesntKnowNotAddedBooks

	
	self deny: (self initializeCart includes: self book)
	
	! !
!CartTest methodsFor: 'store - items' stamp: 'scb 6/12/2022 18:00:12'!
validBook

	^ factory validBook! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50500998!
test07CartKnowsAddedBooks

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: aCart includes: self validBook
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50501029!
initializeCartWithTwoValidBooksIncluded

	| aCart |
	
	aCart := self initializeCart.
	^aCart add: 2 of: self validBook.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50501006!
test08CartKnowsOccurrancesOfBooks

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: 2 equals: (aCart occurrencesOf: self validBook)
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50500939!
test04_5CartCantAddNonIntegerAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 1.5 of: self validBook ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50501203!
test06CartDoesntKnowNotAddedBooks

	
	self deny: (self initializeCart includes: self validBook)
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:00:12' prior: 50500929!
test04CartCantAddNonStrictlyPositiveAmountOfBooks

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: -1 of: self validBook ] riseErrorWithMessage: aCart invalidAmountErrorMessage! !

!methodRemoval: CartTest #book stamp: 'scb 6/12/2022 18:00:12'!
book

	^ factory validBook!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:01:15'!
invalidBook

	^ factory invalidBook! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:01:15' prior: 50501161!
test05CartCantAddMultipleCopiesOfBookOutsideOfCollection

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: 2 of: self invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:01:15' prior: 50501110!
test02CartCantAddBookOutsideOfCollection

	| aCart |
	
	aCart := self initializeCart.
	
	self with: aCart should: [ aCart add: self invalidBook ] riseErrorWithMessage: aCart invalidBookErrorMessage! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:02:21'!
test09CartCanListContents

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: (OrderedCollection with: self validBook with: self validBook) equals: aCart list
	
	! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:02:48'!
orderedCollectionWithTwoValidBooks

	^ OrderedCollection with: self validBook with: self validBook! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:02:48' prior: 50501289!
test09CartCanListContents

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: (self orderedCollectionWithTwoValidBooks) equals: aCart list
	
	! !
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:02:53' prior: 50501304!
test09CartCanListContents

	| aCart |
	
	aCart := self initializeCartWithTwoValidBooksIncluded.
	
	self assert: self orderedCollectionWithTwoValidBooks equals: aCart list
	
	! !

!testRun: #CartTest #test09CartCanListContents stamp: 'scb 6/12/2022 18:02:54'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'scb 6/12/2022 18:03:08'!
list
	
	^ contents! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!testRun: #CartTest #test09CartCanListContents stamp: 'scb 6/12/2022 18:03:10'!
PASSED!

!methodRemoval: CashierTest #initializeCatalog stamp: 'scb 6/12/2022 18:03:42'!
initializeCatalog

	^ Dictionary with: self bookValueRelation!

!methodRemoval: CashierTest #initializeEmptyCart stamp: 'scb 6/12/2022 18:03:45'!
initializeEmptyCart

	^ Cart new!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'scb 6/12/2022 18:04:18'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'debitedAmount debitedCreditCard error factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'initialization' stamp: 'scb 6/12/2022 18:04:17' overrides: 16961394!
setUp

	factory := ObjectFactory new! !

!methodRemoval: CashierTest #initializeCartWithCatalogAndAnAmountOfBooks: stamp: 'scb 6/12/2022 18:04:37'!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := Cart with: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart!

!methodRemoval: CashierTest #initializeCashierCheckout:on:registerOn: stamp: 'scb 6/12/2022 18:04:37'!
initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger 

	^ Cashier checkout: aCart with: aCreditCard on: (self initializeMonthYearNow) using: self registerOn: aLedger!

!methodRemoval: CashierTest #initializeEmptyOrderedCollection stamp: 'scb 6/12/2022 18:04:37'!
initializeEmptyOrderedCollection

	^ OrderedCollection new!

!methodRemoval: CashierTest #initializeExpiredCreditCard stamp: 'scb 6/12/2022 18:04:37'!
initializeExpiredCreditCard

	^ CreditCard withExpirationDate: (self initializeMonthYearLastYear)!

!methodRemoval: CashierTest #initializeMonthYearLastYear stamp: 'scb 6/12/2022 18:04:37'!
initializeMonthYearLastYear

	^ Month month: self thisMonth year: self thisYear - 1!

!methodRemoval: CashierTest #initializeMonthYearNextYear stamp: 'scb 6/12/2022 18:04:37'!
initializeMonthYearNextYear

	^ Month month: self thisMonth year: self thisYear + 1!

!methodRemoval: CashierTest #initializeMonthYearNow stamp: 'scb 6/12/2022 18:04:37'!
initializeMonthYearNow

	^ Month month: self thisMonth year: self thisYear!

!methodRemoval: CashierTest #initializeNotExpiredCreditCard stamp: 'scb 6/12/2022 18:04:37'!
initializeNotExpiredCreditCard

	^ CreditCard withExpirationDate: (self initializeMonthYearNextYear)!

!methodRemoval: CashierTest #bookValueRelation stamp: 'scb 6/12/2022 18:04:46'!
bookValueRelation

	^ self book -> self bookValue!

!methodRemoval: CashierTest #thisMonth stamp: 'scb 6/12/2022 18:04:48'!
thisMonth

	^ self today monthIndex!

!methodRemoval: CashierTest #thisYear stamp: 'scb 6/12/2022 18:04:48'!
thisYear

	^ self today yearNumber!

!methodRemoval: CashierTest #today stamp: 'scb 6/12/2022 18:04:48'!
today

	^ Date today!

!methodRemoval: CashierTest #book stamp: 'scb 6/12/2022 18:05:08'!
book

	^ 'book'!

!methodRemoval: CashierTest #bookValue stamp: 'scb 6/12/2022 18:05:08'!
bookValue

	^ 10!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:05:35' prior: 50499947!
test01CantCheckoutEmptyCart

	| aCart aCreditCard aLedger|
	
	aCart := self initializeCartWithCatalogAndAnAmountOfBooks: 0.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := self initializeEmptyOrderedCollection.
	
	self assertCheckoutOf: aCart on: aCreditCard registerOn: aLedger raisesErrorWithMessageText: Cashier emptyCartErrorMessage.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:06:47' prior: 50501449!
test01CantCheckoutEmptyCart
	
	self assertCheckoutOf: factory initializeCart on: factory notExpiredCreditCard registerOn: OrderedCollection new raisesErrorWithMessageText: Cashier emptyCartErrorMessage.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:06:49'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:06:54'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:07:00' prior: 50501463!
test01CantCheckoutEmptyCart
	
	self assertCheckoutOf: factory createCart on: factory notExpiredCreditCard registerOn: OrderedCollection new raisesErrorWithMessageText: Cashier emptyCartErrorMessage.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:07:01'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:07:08'!
ERROR!
!ObjectFactory methodsFor: 'credit card' stamp: 'scb 6/12/2022 18:07:26' prior: 50500509!
expiredCreditCard

	^ CreditCard withExpirationDate: (Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:07:27'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CartTest #test09CartCanListContents stamp: 'scb 6/12/2022 18:07:27'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:07:38'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:07:38'!
ERROR!
!ObjectFactory methodsFor: 'credit card' stamp: 'scb 6/12/2022 18:08:55' prior: 50500516!
notExpiredCreditCard

	^ CreditCard withExpirationDate: (Month month: today monthIndex year: today yearNumber + 1)! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CartTest #test09CartCanListContents stamp: 'scb 6/12/2022 18:08:56'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:08:56'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:08:56'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:08:59'!
FAILURE!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:09:17'!
FAILURE!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:09:17'!
FAILURE!
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:10:20' prior: 50499995!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := self initializeCartWithCatalogAndAnAmountOfBooks: anAmount.
	aCreditCard := self initializeNotExpiredCreditCard.
	aLedger := self initializeEmptyOrderedCollection.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: self bookValue * anAmount equals: aCashier checkout.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CartTest #test09CartCanListContents stamp: 'scb 6/12/2022 18:10:20'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:10:20'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:10:20'!
ERROR!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:10:20'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:10:20'!
ERROR!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:10:20'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:10:20'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:10:20'!
ERROR!
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:10:31' prior: 50501632!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := self initializeCartWithCatalogAndAnAmountOfBooks: anAmount.
	aCreditCard := self initializeNotExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: self bookValue * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:10:42' prior: 50501704!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := self initializeCartWithCatalogAndAnAmountOfBooks: anAmount.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: self bookValue * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:11:18' prior: 50501720!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: self bookValue * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:11:32' prior: 50501736!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: factory validBookPrice * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:11:54' prior: 50501752!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier Checkout: aCart on: aCreditCard registerOn: aLedger.
	
	self assert: factory validBookPrice * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:12:48' prior: 50501769!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	
	self assert: factory validBookPrice * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:13:06' prior: 50501785!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: OrderedCollection new.
	
	self assert: factory validBookPrice * anAmount equals: aCashier checkout.
! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 18:13:54' prior: 50499311!
assertCheckoutOf: aCart on: aCreditCard registerOn: aLedger raisesErrorWithMessageText: anErrorMessage

	self assert: [Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger]
	raiseErrorWithMessageText: anErrorMessage! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:13:56'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:13:56'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:13:56'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:13:56'!
ERROR!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:13:56'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:13:56'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:13:56'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:14:30' prior: 50499898!
test04CantCheckoutWithExpiredCard
	
	| aCart aCreditCard aLedger |
	
	aCart := self initializeCartWithCatalogAndAnAmountOfBooks: 1.
	aCreditCard := self initializeExpiredCreditCard.
	aLedger := OrderedCollection new.
	
	self assertCheckoutOf: aCart on: aCreditCard registerOn: 0 raisesErrorWithMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:15:52' prior: 50501854!
test04CantCheckoutWithExpiredCard
	
	| aCart aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := self initializeExpiredCreditCard.
	aLedger := OrderedCollection new.
	
	self assertCheckoutOf: aCart on: aCreditCard registerOn: 0 raisesErrorWithMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:16:11' prior: 50501869!
test04CantCheckoutWithExpiredCard
	
	| aCart aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory expiredCreditCard.
	aLedger := OrderedCollection new.
	
	self assertCheckoutOf: aCart on: aCreditCard registerOn: 0 raisesErrorWithMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:16:42' prior: 50500270!
test05CashierCheckoutsCart
	
	| aCart aCashier aCreditCard aPrice aLedger|
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := self initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger.
	
	aPrice := aCashier checkout.
	
	self assert: aLedger includesOneItemOfPrice: aPrice.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:17:02' prior: 50501884!
test04CantCheckoutWithExpiredCard
	
	| aCart aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory expiredCreditCard.
	aLedger := OrderedCollection new.
	
	self assertCheckoutOf: aCart on: aCreditCard registerOn: aLedger raisesErrorWithMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:17:43' prior: 50501899!
test05CashierCheckoutsCart
	
	| aCart aCashier aCreditCard aPrice aLedger|
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	
	aPrice := aCashier checkout.
	
	self assert: aLedger includesOneItemOfPrice: aPrice.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:18:23' prior: 50499790!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	error := OrderedCollection new.
	
	aCashier checkout.
	
	self assert: self bookValue equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:18:32' prior: 50501946!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	error := [OrderedCollection new].
	
	aCashier checkout.
	
	self assert: self bookValue equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:18:50' prior: 50501965!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	error := [OrderedCollection new].
	
	aCashier checkout.
	
	self assert: factory validBookPrice equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:19:12' prior: 50499830!
test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	
	error := self riseNotEnoughCreditErrorClosure.
	
	self assert: [aCashier checkout] raiseErrorWithMessageText: Cashier notEnoughCreditOnCreditCardErrorMessage.
	self assertIsEmpty: aLedger.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:19:27' prior: 50501984!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	error := [].
	
	aCashier checkout.
	
	self assert: factory validBookPrice equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:19:28'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:19:28'!
PASSED!
!ObjectFactory methodsFor: 'cart' stamp: 'scb 6/12/2022 18:20:53' prior: 50500393!
createCart

	^ Cart with: self defaultCatalog! !
!ObjectFactory methodsFor: 'cart' stamp: 'scb 6/12/2022 18:27:15'!
createCashierCheckoutOfCartWithBooks: anAmount withCard: aCreditCard using: aMerchantProcessor

	| aCart aCashier aLedger|
	
	aCart := self createCart.
	anAmount timesRepeat: [aCart add: self validBook].
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!ObjectFactory methodsFor: 'cart' stamp: 'scb 6/12/2022 18:27:30' prior: 50502074!
createCashierCheckoutOfCartWithBooks: anAmount withCard: aCreditCard using: aMerchantProcessor

	| aCart aLedger|
	
	aCart := self createCart.
	anAmount timesRepeat: [aCart add: self validBook].
	aLedger := OrderedCollection new.
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!ObjectFactory methodsFor: 'cart' stamp: 'scb 6/12/2022 18:27:47' prior: 50502089!
createCashierCheckoutOfCartWithBooks: anAmount withCard: aCreditCard using: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	anAmount timesRepeat: [aCart add: self validBook].
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!ObjectFactory methodsFor: 'cart' stamp: 'scb 6/12/2022 18:29:09'!
createCashierCheckoutOfCartWithBooks: anAmount withCard: aCreditCard using: aMerchantProcessor registerOn: aLedger

	| aCart |
	
	aCart := self createCart.
	anAmount timesRepeat: [aCart add: self validBook].
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: aLedger.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:30:53' prior: 50501478!
test01CantCheckoutEmptyCart
	
	self should: [factory createCashierCheckoutOfCartWithBooks: 0 withCard: factory using: self] raise: Error withMessageText: Cashier emptyCartErrorMessage.! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:31:37'!
createCashierCheckoutOfCartWithBooks: anAmount using: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	anAmount timesRepeat: [aCart add: self validBook].
	^ Cashier checkout: aCart with: self notExpiredCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:31:53'!
createCashierCheckoutOfCartUsing: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	^ Cashier checkout: aCart with: self notExpiredCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:32:13' prior: 50502128!
test01CantCheckoutEmptyCart
	
	self should: [factory createCashierCheckoutOfCartUsing: self] raise: Error withMessageText: Cashier emptyCartErrorMessage.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:32:14'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:32:14'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:32:14'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:32:14'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:32:15'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:32:15'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:32:15'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:32:15'!
PASSED!
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:32:32'!
createCashierCheckoutOfEmptyCartUsing: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	^ Cashier checkout: aCart with: self notExpiredCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:32:32' prior: 50502159!
test01CantCheckoutEmptyCart
	
	self should: [factory createCashierCheckoutOfEmptyCartUsing: self] raise: Error withMessageText: Cashier emptyCartErrorMessage.! !

!methodRemoval: ObjectFactory #createCashierCheckoutOfCartUsing: stamp: 'scb 6/12/2022 18:32:32'!
createCashierCheckoutOfCartUsing: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	^ Cashier checkout: aCart with: self notExpiredCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.!

!methodRemoval: CashierTest #assert:raiseErrorWithMessageText: stamp: 'scb 6/12/2022 18:34:01'!
assert: aClosure raiseErrorWithMessageText: anErrorMessage

	self should: aClosure
	raise: Error
	withMessageText: anErrorMessage!

!methodRemoval: CashierTest #assertCheckoutOf:on:registerOn:raisesErrorWithMessageText: stamp: 'scb 6/12/2022 18:34:07'!
assertCheckoutOf: aCart on: aCreditCard registerOn: aLedger raisesErrorWithMessageText: anErrorMessage

	self assert: [Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger]
	raiseErrorWithMessageText: anErrorMessage!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:34:43' prior: 50499977!
test02CashierCanCalculateCheckoutPriceOfCartWithOneBook
	
	| aCart aCashier aCreditCard |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: OrderedCollection new.
	
	self assert: factory validBookPrice * 1 equals: aCashier checkout.
! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:34:57' prior: 50499984!
test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks
	
	| aCart aCashier aCreditCard |
	
	aCart := factory createCart.
	aCart add: 5 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: OrderedCollection new.
	
	self assert: factory validBookPrice * 5 equals: aCashier checkout.
! !

!methodRemoval: CashierTest #assertCheckoutPriceEqualsBooksValueAfterPurchasing: stamp: 'scb 6/12/2022 18:35:04'!
assertCheckoutPriceEqualsBooksValueAfterPurchasing: anAmount
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: anAmount of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: OrderedCollection new.
	
	self assert: factory validBookPrice * anAmount equals: aCashier checkout.
!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:37:06' prior: 50502242!
test02CashierCanCalculateCheckoutPriceOfCartWithOneBook
	
	self assert: factory validBookPrice * 1 equals: (factory createCashierCheckoutOfCartWithBooks: 1 using: self) checkout.
! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:37:22' prior: 50502258!
test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks
	
	self assert: factory validBookPrice * 5 equals: (factory createCashierCheckoutOfCartWithBooks: 5 using: self) checkout.
! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:37:38' prior: 50502205!
test01CantCheckoutEmptyCart
	
	self should: [factory createCashierCheckoutOfEmptyCartUsing: self]
	raise: Error
	withMessageText: Cashier emptyCartErrorMessage.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:40:13' prior: 50501915!
test04CantCheckoutWithExpiredCard
	
	| aLedger |
	
	aLedger := OrderedCollection new.
	
	self should: [ factory createCashierCheckoutOfCartWithBooks: 1 withCard: factory expiredCreditCard using: self registerOn: aLedger ]
	raise: Error
	withMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:40:14'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:14'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:14'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:40:22'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:22'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:22'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:40:29'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:29'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:40:29'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:40:54' prior: 50502003!
test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit
	
	| aCart aCashier aCreditCard aLedger |
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	
	error := self riseNotEnoughCreditErrorClosure.
	
	self should: [aCashier checkout]
	raise: Error
	withMessageText: Cashier notEnoughCreditOnCreditCardErrorMessage.
	self assertIsEmpty: aLedger.! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:41:50'!
createCashierCheckoutOfCartWithCard: aCreditCard using: aMerchantProcessor registerOn: aLedger

	| aCart |
	
	aCart := self createCart.
	aCart add: self validBook.
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: aLedger.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:42:02' prior: 50502317!
test04CantCheckoutWithExpiredCard
	
	| aLedger |
	
	aLedger := OrderedCollection new.
	
	self should: [ factory createCashierCheckoutOfCartWithCard: factory expiredCreditCard using: self registerOn: aLedger ]
	raise: Error
	withMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:42:17'!
createCashierCheckoutOfCartWithOneBookWithCard: aCreditCard using: aMerchantProcessor registerOn: aLedger

	| aCart |
	
	aCart := self createCart.
	aCart add: self validBook.
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: aLedger.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:42:17' prior: 50502457!
test04CantCheckoutWithExpiredCard
	
	| aLedger |
	
	aLedger := OrderedCollection new.
	
	self should: [ factory createCashierCheckoutOfCartWithOneBookWithCard: factory expiredCreditCard using: self registerOn: aLedger ]
	raise: Error
	withMessageText: Cashier expiredCreditCardErrorMessage.
	self assertIsEmpty: aLedger
	! !

!methodRemoval: ObjectFactory #createCashierCheckoutOfCartWithCard:using:registerOn: stamp: 'scb 6/12/2022 18:42:18'!
createCashierCheckoutOfCartWithCard: aCreditCard using: aMerchantProcessor registerOn: aLedger

	| aCart |
	
	aCart := self createCart.
	aCart add: self validBook.
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: aLedger.!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:43:32' prior: 50501930!
test05CashierCheckoutsCart
	
	| aCashier aPrice aLedger|
	
	aLedger := OrderedCollection new.
	aCashier := factory createCashierCheckoutOfCartWithOneBookWithCard: factory notExpiredCreditCard using: self registerOn: aLedger.
	
	aPrice := aCashier checkout.
	
	self assert: aLedger includesOneItemOfPrice: aPrice.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:44:08' prior: 50502506!
test05CashierCheckoutsCart
	
	| aPrice aLedger|
	
	aLedger := OrderedCollection new.
	aPrice := (factory createCashierCheckoutOfCartWithOneBookWithCard: factory notExpiredCreditCard using: self registerOn: aLedger) checkout.
	
	self assert: aLedger includesOneItemOfPrice: aPrice.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:46:42' prior: 50502023!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCart aCashier aCreditCard aLedger |
	
	error := [].
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := factory createCashierCheckoutOfEmptyCartUsing: self
	
	
	aCashier checkout.
	
	self assert: factory validBookPrice equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:47:11'!
createCashierCheckoutOfCartWithOneBookWithCard: aCreditCard using: aMerchantProcessor

	| aCart |
	
	aCart := self createCart.
	aCart add: self validBook.
	^ Cashier checkout: aCart with: aCreditCard on: self today using: aMerchantProcessor registerOn: OrderedCollection new.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:49:06' prior: 50502531!
test06CashierCheckoutsCartUsingMerchantProcessor
	
	| aCreditCard |
	
	error := [].
	
	aCreditCard := factory notExpiredCreditCard.
	(factory createCashierCheckoutOfCartWithOneBookWithCard: aCreditCard using: self) checkout.
	
	self assert: factory validBookPrice equals: debitedAmount.
	self assert: aCreditCard equals: debitedCreditCard.! !
!ObjectFactory methodsFor: 'cashier' stamp: 'scb 6/12/2022 18:50:09'!
createCashierCheckoutOfCartWithOneBookUsing: aMerchantProcessor registerOn: aLedger

	| aCart |
	
	aCart := self createCart.
	aCart add: self validBook.
	^ Cashier checkout: aCart with: self notExpiredCreditCard on: self today using: aMerchantProcessor registerOn: aLedger.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:50:45' prior: 50502425!
test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit
	
	| aCart aCashier aCreditCard aLedger |
	
	error := self riseNotEnoughCreditErrorClosure.
	
	aCart := factory createCart.
	aCart add: 1 of: factory validBook.
	aCreditCard := factory notExpiredCreditCard.
	aLedger := OrderedCollection new.
	aCashier := Cashier checkout: aCart with: aCreditCard on: factory today using: self registerOn: aLedger.
	
	self should: [aCashier checkout]
	raise: Error
	withMessageText: Cashier notEnoughCreditOnCreditCardErrorMessage.
	self assertIsEmpty: aLedger.! !
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:52:12' prior: 50502585!
test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit
	
	| aLedger |
	
	error := self riseNotEnoughCreditErrorClosure.
	aLedger := OrderedCollection new.
	
	self should: [factory createCashierCheckoutOfCartWithOneBookUsing: self registerOn: aLedger checkout]
	raise: Error
	withMessageText: Cashier notEnoughCreditOnCreditCardErrorMessage.
	self assertIsEmpty: aLedger.! !

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:52:18'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'scb 6/12/2022 18:52:43' prior: 50502606!
test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit
	
	| aLedger |
	
	error := self riseNotEnoughCreditErrorClosure.
	aLedger := OrderedCollection new.
	
	self should: [(factory createCashierCheckoutOfCartWithOneBookUsing: self registerOn: aLedger) checkout]
	raise: Error
	withMessageText: Cashier notEnoughCreditOnCreditCardErrorMessage.
	self assertIsEmpty: aLedger.! !

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 18:52:44'!
PASSED!

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'scb 6/12/2022 18:54:27'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'no messages' stamp: 'scb 6/12/2022 18:55:00' overrides: 16961394!
setUp

	factory := ObjectFactory! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:55:04' prior: 50502681 overrides: 16961394!
setUp

	factory := ObjectFactory new! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 18:57:28'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 18:57:25'!
test01CantCreateCartWithInvalidUsername

	self should: 0
	raise: Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidCredentials.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:02:14' prior: 50502699!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := TusLibrosInterface with: Dictionary new.

	self should: [interface createCartWithUsername: 'invalid username' withPassword: 'valid password']
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentials.! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:03:26'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:03:41'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:03:47' prior: 50502724!
with: aDictionary

	^self new initializeWith: aDictionary ! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:03:48'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:03:48'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:03:57'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'scb 6/12/2022 19:03:57'!
initializeWith: aDictionary 
	self shouldBeImplemented.
	dictionary := aDictionary.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:04:11'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'dictionary credentials'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'scb 6/12/2022 19:04:09' prior: 50502753!
initializeWith: aDictionary 
	
	credentials := aDictionary.! !

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:04:24'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:04:29'!
ERROR!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:04:41'!
invalidCredentials
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:04:53' prior: 50502788!
invalidCredentials
	
	^ 'invalid username or password'! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:04:54'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:04:54'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:04:57'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:05:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:05:35'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:05:38'!
PASSED!

----STARTUP---- (12 June 2022 19:06:04) as /Users/sebascantini/Downloads/macos64/CuisUniversity-5096.image!


TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'scb 6/12/2022 19:07:25'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/12/2022 19:07:43'!
Object subclass: #ObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'no messages' stamp: 'scb 6/12/2022 19:07:40' overrides: 16961394!
setUp

	factory := ObjectFactory new! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:09:56'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:10:15'!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := TusLibrosInterface with: Dictionary new.
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:10:19'!
ERROR!
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:10:30'!
with: aDictionary 
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:10:57' prior: 50500369!
with: credentials
	
	^ self new initializeWith: credentials! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:11:01'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:11:08'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:11:08'!
initializeWith: credentials 
	self shouldBeImplemented.
	credentials_CHANGE_ME := credentials.! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:11:19' prior: 50500390!
initializeWith: credentials 

	credentials_CHANGE_ME := credentials.! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:11:36' prior: 50500396!
initializeWith: aCredentials 

	credentials_CHANGE_ME := aCredentials.! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:11:36'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:11:36'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:11:46'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:11:46' prior: 50500402!
initializeWith: aCredentials 

	credentials := aCredentials.! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:11:50'!
ERROR!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:12:01'!
invalidCredentialsErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:12:13' prior: 50500432!
invalidCredentialsErrorMessage
	
	^ 'invalid username or password'! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:12:14'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:12:14'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:12:17'!
ERROR!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:12:22'!
createCartWithUsername: aString withPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:12:27' prior: 50500453!
createCartWithUsername: aString withPassword: aString2 
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:12:52'!
FAILURE!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:13:21' prior: 50500459!
createCartWithUsername: aUsername withPassword: aPassword
	
	! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:14:00' prior: 50500468!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self invalidCredentialsErrorMessage ].
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:14:00'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:14:00'!
FAILURE!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:15:09' prior: 50500473!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:15:10'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:15:26'!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := TusLibrosInterface with: Dictionary new.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:15:51' prior: 50500501!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := TusLibrosInterface with: Dictionary new.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:16:01'!
initializeCredentials

	^ Dictionary new! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:16:01' prior: 50500515!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:16:01' prior: 50500352!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:16:20' prior: 50500528!
initializeCredentials

	^ Dictionary with: 'valid username' -> 'valid password'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:16:23' prior: 50500561!
initializeCredentials

	^ Dictionary with: 'valid username' -> 'valid password'! !

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:16:27'!
FAILURE!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:17:22' prior: 50500489!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:17:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:17:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:17:37'!
test02CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:17:48'!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !

!methodRemoval: TusLibrosInterfaceTest #test02CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:17:48'!
test02CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:18:28' prior: 50500609!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self shouldnt: [ interface createCartWithUsername: 'valid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood! !

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:18:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:18:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:18:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:18:29'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:22:45'!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface add: 1 of: 'valid book' to: 'invalid cart' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:22:47'!
ERROR!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:22:52'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:23:02' prior: 50500678!
invalidCartErrorMessage
	
	^ 'invalid cart'! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:23:04' prior: 50500683!
invalidCartErrorMessage
	
	^ 'invalid cart'! !

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:23:17'!
ERROR!

----SNAPSHOT----(12 June 2022 19:23:36) CuisUniversity-5096.image priorSource: 5397219!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:23:40'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:23:51' prior: 50500663!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!ObjectFactory methodsFor: 'no messages' stamp: 'scb 6/12/2022 19:24:05'!
validBook

	^ 'valid book'! !

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:24:15'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:24:26'!
add: aSmallInteger of: aString to: aString3 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:24:39' prior: 50500722!
add: anAmount of: aProduct to: aCart 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:24:48' prior: 50500728!
add: anAmount of: aProduct to: aCart 
	! !

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:24:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:24:51'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:25:41'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:25:38' prior: 50500423!
initializeWith: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:26:09' prior: 50500733!
add: anAmount of: aProduct to: aCartID
	
	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:26:10'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:28:14'!
test05CanAddItemToValidCart

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:28:43' prior: 50500780!
test05CanAddItemToValidCart

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	interface add: 1 of: factory validBook to: 'valid cart id'
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:28:48' prior: 50500703!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !

	| interface aCartI|!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:31:14' prior: 50500793!
test05CanAddItemToValidCart

	| interface aCartID|
	
	interface := TusLibrosInterface with: self initializeCredentials.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:31:15'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:33:40'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:33:48' prior: 50500577!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: factory createCart.
	! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:34:48'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:34:47'!
nextCartID
	
	currentID := currentID + 1.
	^currentID! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:35:00' prior: 50500752!
initializeWith: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:35:11' prior: 50500867!
initializeWith: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	factory := ObjectFactory new.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:37:10' prior: 50500816!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface with: self initializeCredentials.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:37:18' prior: 50500874!
initializeWith: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 19:37:49'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:37:47' prior: 50500841!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart with: catalog)
	! !
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:38:06'!
initializeWithCredentials: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:38:06' prior: 50500374!
with: credentials
	
	^ self new initializeWithCredentials: credentials! !

!methodRemoval: TusLibrosInterface #initializeWith: stamp: 'scb 6/12/2022 19:38:06'!
initializeWith: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:39:15'!
initializeWithCredentials: aCredentials withCatalog: aCatalog  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:39:15' prior: 50500932!
with: credentials
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new! !

!methodRemoval: TusLibrosInterface #initializeWithCredentials: stamp: 'scb 6/12/2022 19:39:15'!
initializeWithCredentials: aCredentials 

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 19:39:24' prior: 50500943!
initializeWithCredentials: aCredentials withCatalog: aCatalog  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	catalog := aCatalog.! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:40:15' prior: 50500951!
with: credentials
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:40:25'!
withCredentials: credentials
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:40:25' prior: 50500911!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart withCredentials: catalog)
	! !

!methodRemoval: TusLibrosInterface class #with: stamp: 'scb 6/12/2022 19:40:25'!
with: credentials
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:40:36' prior: 50500547!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:40:46' prior: 50500533!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:40:52' prior: 50500637!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	
	self shouldnt: [ interface createCartWithUsername: 'valid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:40:56' prior: 50500802!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:01' prior: 50500882!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:04' prior: 50501059!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:07' prior: 50501073!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:41:39'!
withCredentials: credentials withCatalog: aCatalog 
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50501020!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50501006!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50500986!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart withCredentials: catalog withCatalog: Dictionary new)
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50501046!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50501087!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:41:39' prior: 50501034!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	
	self shouldnt: [ interface createCartWithUsername: 'valid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood! !

!methodRemoval: TusLibrosInterface class #withCredentials: stamp: 'scb 6/12/2022 19:41:39'!
withCredentials: credentials
	
	^ self new initializeWithCredentials: credentials withCatalog: Dictionary new!
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:41:45' prior: 50501101!
withCredentials: aCredentials withCatalog: aCatalog 
	
	^ self new initializeWithCredentials: aCredentials withCatalog: Dictionary new! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/12/2022 19:41:51' prior: 50501204!
withCredentials: aCredentials withCatalog: aCatalog 
	
	^ self new initializeWithCredentials: aCredentials withCatalog: aCatalog! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:42:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:42:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:42:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:42:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:42:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:42:25'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:42:59' prior: 50501139!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart with: catalog)
	! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:43:26'!
initiateWith: aCollection 

	^ self new checkout: aCollection.
	! !
!Cart methodsFor: 'configuration' stamp: 'scb 6/12/2022 19:43:26'!
initiateWith: aCollection

	catalog := aCollection! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:43:26' prior: 50492994!
checkout: aCollection 

	^ self new initiateWith: aCollection.
	! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:43:26' prior: 50501253!
initiateWith: aCollection 

	^ self new initiateWith: aCollection.
	! !

!methodRemoval: Cart class #checkout: stamp: 'scb 6/12/2022 19:43:26'!
checkout: aCollection 

	^ self new initiateWith: aCollection.
	!

!methodRemoval: Cart #checkout: stamp: 'scb 6/12/2022 19:43:26'!
checkout: aCollection

	catalog := aCollection!
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:43:36'!
checkout: aCollection 

	^ self new initiateWith: aCollection.
	! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:43:44'!
with: aCollection 

	^ self new initiateWith: aCollection.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:43:44' prior: 50499914!
initializeCartWithCatalogAndAnAmountOfBooks: anAmount

	| aCart |
	
	aCart := Cart with: self initializeCatalog.
	anAmount timesRepeat: [aCart add: 1 of: self book].
	^aCart! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:43:44' prior: 50492988!
initializeCartWithCollectionOfBooks

	^ Cart with: self initializeCatalogOfBooks! !

!methodRemoval: Cart class #checkout: stamp: 'scb 6/12/2022 19:43:44'!
checkout: aCollection 

	^ self new initiateWith: aCollection.
	!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 19:43:46'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 19:43:46'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 19:43:46'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 19:43:46'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 19:43:46'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 19:43:47'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 19:43:47'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 19:43:47'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 19:43:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:43:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:43:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:43:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:43:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:43:50'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:43:50'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:43:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:43:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:43:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:43:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:43:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:43:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:44:36'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:45:24' prior: 50501240!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart with: catalog).
	^currentID 
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:45:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:45:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:45:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:45:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:45:26'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:45:55'!
test06CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !

!methodRemoval: TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:45:55'!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:46:28'!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !

!methodRemoval: TusLibrosInterfaceTest #test06CanAddItemToValidCart stamp: 'scb 6/12/2022 19:46:28'!
test06CanAddItemToValidCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:47:40'!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: Cart invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:47:55' prior: 50501476!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:48:08'!
invalidBook

	^ 'invalid book'! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:48:49'!
invalidBookErrorMessage
	
	^ Cart! !
!Cart methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:49:56' prior: 50492796!
invalidAmountErrorMessage

	^ self class invalidBookErrorMessage ! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:50:15'!
invalidBookErrorMessage 

	^ 'Amount is invalid'
	! !

!methodRemoval: Cart class #initiateWith: stamp: 'scb 6/12/2022 19:50:24'!
initiateWith: aCollection 

	^ self new initiateWith: aCollection.
	!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 19:50:29'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 19:50:29'!
PASSED!
!Cart methodsFor: 'rise error' stamp: 'scb 6/12/2022 19:50:53' prior: 50492822!
riseInvalidBookError

	^ self error: self class invalidBookErrorMessage! !
!Cart methodsFor: 'rise error' stamp: 'scb 6/12/2022 19:50:57' prior: 50492817!
riseInvalidAmountError

	^ self error: self class invalidAmountErrorMessage! !
!Cart methodsFor: 'rise error' stamp: 'scb 6/12/2022 19:51:13' prior: 50501559!
riseInvalidBookError

	^ self error: self invalidBookErrorMessage! !
!Cart methodsFor: 'rise error' stamp: 'scb 6/12/2022 19:51:17' prior: 50501564!
riseInvalidAmountError

	^ self error: self invalidAmountErrorMessage! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:51:24' prior: 50501522!
invalidBookErrorMessage

	^ 'Book is invalid.'! !
!Cart methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:51:51' prior: 50492800!
invalidBookErrorMessage

	^ self class invalidBookErrorMessage ! !
!Cart class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 19:52:13'!
invalidAmountErrorMessage

	^ 'invalid amount'! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:52:31' prior: 50501513!
invalidBookErrorMessage
	
	^ Cart invalidBookErrorMessage ! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:52:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:52:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:52:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:52:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:52:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:52:40'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:52:40'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:53:01'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:54:32' prior: 50500758!
add: anAmount of: aProduct to: aCartID
	
	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(carts at: aCartID) add: anAmount of: aProduct! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:54:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:54:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:54:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:54:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:54:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:54:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:54:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:54:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:54:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:54:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:54:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:54:38'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:54:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:54:38'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 19:55:31' prior: 50501628!
add: anAmount of: aProduct to: aCartID
	
	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(carts at: aCartID) add: anAmount of: aProduct! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 19:56:07'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 19:56:07'!
PASSED!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 19:56:32' prior: 50501595!
invalidBookErrorMessage
	
	^ Cart invalidBookErrorMessage ! !

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:57:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:57:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:57:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:57:45'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:58:05'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 19:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 19:58:05'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:58:50' prior: 50501493!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := TusLibrosInterface withCredentials: self initializeCredentials withCatalog: Dictionary new.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 19:59:26' prior: 50501786!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:00:07'!
createInterface

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:00:35'!
credentials

	^ Dictionary with: self validUser -> self validPassword! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:00:46'!
validUser

	^ 'valid user'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:00:54'!
validPassword

	^ 'valid Password'! !

!methodRemoval: TusLibrosInterfaceTest #initializeCredentials stamp: 'scb 6/12/2022 20:01:02'!
initializeCredentials

	^ Dictionary with: 'valid username' -> 'valid password'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:16' prior: 50501124!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := factory createInterface .
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:17' prior: 50501843!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: 'invalid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:26' prior: 50501109!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: 'valid username' withPassword: 'invalid password' ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:31' prior: 50501184!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface createCartWithUsername: 'valid username' withPassword: 'valid password' ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:37' prior: 50501155!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:01:43' prior: 50501446!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: 'valid username' withPassword: 'valid password'.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:02:11'!
catalog

	^ Dictionary with: self validBook -> self validBookPrice! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:02:21'!
validBookPrice

	^ 10! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:02:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:02:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:02:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:02:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:02:22'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:02:22'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:02:25'!
FAILURE!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:03:09' prior: 50501832!
validPassword

	^ 'valid password'! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:03:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:03:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:03:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:03:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:03:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:03:10'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:03:49' prior: 50501856!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:04:01'!
invalidUser

	^ 'invalid user'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:04:08'!
invalidPassword

	^ 'invalid password'! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:04:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:04:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:04:11'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:04:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:04:11'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:04:11'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:04:45' prior: 50501882!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface createCartWithUsername: factory validUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:05:03' prior: 50501869!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: factory validUser withPassword: factory invalidPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:05:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:05:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:05:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:05:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:05:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:05:04'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:05:04'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:05:29' prior: 50501905!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:05:35' prior: 50501803!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:05:37'!
PASSED!

----SNAPSHOT----(12 June 2022 20:05:55) CuisUniversity-5096.image priorSource: 5409433!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:06:36'!
test06CantListContentsOfInvalidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:06:46'!
test04CantAddItemToInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !

!methodRemoval: TusLibrosInterfaceTest #test04CantAddItemToInvalidCart stamp: 'scb 6/12/2022 20:06:46'!
test04CantAddItemToInvalidCart

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface add: 1 of: factory validBook to: 'invalid cart id' ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:07:34' prior: 50502124!
test06CantListContentsOfInvalidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: 'invalid cart']
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:07:51'!
test07CantListContentsOfInvalidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: 'invalid cart']
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !

!methodRemoval: TusLibrosInterfaceTest #test06CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:07:51'!
test06CantListContentsOfInvalidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: 'invalid cart']
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:08:04' prior: 50502173!
test07CantListContentsOfInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: 'invalid cart']
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:08:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:08:17'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:08:20'!
showContentsOf: aString 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:08:44' prior: 50502214!
showContentsOf: aCartID
	
	! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:08:57' prior: 50502219!
showContentsOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:08:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:08:57'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 20:10:31'!
test09CartKnowsContents

	| aCart |
	
	aCart := self initializeCartWithCollectionOfBooksAndBookIncluded.
	
	self assert: (OrderedCollection with: 'book') equals: aCart contents
	
	! !

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 20:10:32'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'scb 6/12/2022 20:10:38'!
contents
	self shouldBeImplemented.
	^contents! !
!Cart methodsFor: 'accessing' stamp: 'scb 6/12/2022 20:10:40' prior: 50502265!
contents
	
	^contents! !

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 20:10:43'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'scb 6/12/2022 20:10:57' prior: 50502254!
test09CartKnowsContents

	| aCart |
	
	aCart := self initializeCartWithCollectionOfBooksAndBookIncluded.
	
	self assert: (OrderedCollection with: 'book' with: 'book') equals: aCart contents
	
	! !

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 20:10:58'!
PASSED!

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 20:10:58'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:11:56'!
test08CanListContentsOfValidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: 'invalid cart']
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:12:34' prior: 50502319!
test08CanListContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [interface showContentsOf: aCartID]
	raise: Error - MessageNotUnderstood
	! !

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:12:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:12:35'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:13:06' prior: 50502331!
test08CanListContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:13:07'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:13:33' prior: 50502223!
showContentsOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	^ (carts keys includes: aCartID) contents
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:13:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:13:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:13:34'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:13:46' prior: 50502391!
showContentsOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	^ OrderedCollection new.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:13:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:13:47'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:15:48'!
test08CanListEmptyContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !

!methodRemoval: TusLibrosInterfaceTest #test08CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:15:48'!
test08CanListContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:16:06'!
test09CanListContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) = 0
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:17:29' prior: 50502490!
test09CanListContentsOfValidCartID

	| interface aCartID|
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self assert: 1 equals: ((interface showContentsOf: aCartID) occurrencesOf: factory validBook)
	! !

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:17:30'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:17:52' prior: 50502431!
showContentsOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	^ (carts keys includes: aCartID) contents
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:18:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:18:02'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:18:02'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:18:13' prior: 50502467!
test08CanListEmptyContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:18:16' prior: 50502502!
test09CanListContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self assert: 1 equals: ((interface showContentsOf: aCartID) occurrencesOf: factory validBook)
	! !

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:18:19'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:18:30' prior: 50502520!
showContentsOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	^ (carts at: aCartID) contents
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:18:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:18:31'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:25:31'!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface checkout: 0 ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:25:47' prior: 50502196!
test07CantListContentsOfInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: factory invalidCart]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:01' prior: 50502139!
test04CantAddItemToInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface add: 1 of: factory validBook to: factory invalidCart ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:14' prior: 50502631!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface checkout: factory invalidCart ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:25'!
invalidCart

	^ 'invalid Cart ID'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:30' prior: 50502677!
invalidCart

	^ 'invalid cart id'! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:26:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:26:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:26:32'!
ERROR!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:44'!
invalidCartID

	^ 'invalid cart id'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:44' prior: 50502666!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface checkout: factory invalidCartID ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:44' prior: 50502642!
test07CantListContentsOfInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [interface showContentsOf: factory invalidCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:26:44' prior: 50502654!
test04CantAddItemToInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface add: 1 of: factory validBook to: factory invalidCartID ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !

!methodRemoval: ObjectFactory #invalidCart stamp: 'scb 6/12/2022 20:26:44'!
invalidCart

	^ 'invalid cart id'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:30:35' prior: 50502730!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface
		checkout: factory invalidCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/12/2022 20:31:11'!
Object subclass: #ObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:31:10' overrides: 16920235!
initialize

	today := Date today.! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:31:13' prior: 50502792 overrides: 16920235!
initialize

	today := Date today! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:31:28'!
nextYear

	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:32:39' prior: 50502801!
nextYear

	^ Month month: today monthIndex year: today yearNumber + 1

	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:32:49'!
today

	^ today

	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:33:29'!
validCardNumber

	^ 'valid cardnumber'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:33:42'!
validCardOwner

	^ 'Batman'! !

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:33:53'!
ERROR!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:34:04'!
checkout: aString usingCardNumber: aString2 ownedBy: aString3 expiringOn: aMonth 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:34:34' prior: 50502825!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:36:25' prior: 50502832!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:36:52' prior: 50502839!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:37:03'!
assertExistanceOf: aCartID

	^ (carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ]! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:37:03' prior: 50502845!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	
	! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:37:03' prior: 50502591!
showContentsOf: aCartID

	self assertExistanceOf: aCartID.
	^ (carts at: aCartID) contents
	
	! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 20:37:03' prior: 50501685!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(carts at: aCartID) add: anAmount of: aProduct! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:37:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:37:17'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:38:43'!
test10CanCheckoutValidCartID

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface
		checkout: factory invalidCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:38:56'!
test11CanCheckoutValidCartID

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface
		checkout: factory invalidCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	! !

!methodRemoval: TusLibrosInterfaceTest #test10CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:38:56'!
test10CanCheckoutValidCartID

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface
		checkout: factory invalidCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:39:43' prior: 50502929!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [ interface
		checkout: aCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:40:15' prior: 50502955!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [ interface
		checkout: aCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	! !

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:40:16'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:41:27'!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		usingCardNumber: factory validCardNumber
		ownedBy: factory validCardOwner
		expiringOn: factory nextYear]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 20:41:48'!
emptyCartErrorMessage
	
	^ Cashier emptyCartErrorMessage! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:42:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:42:02'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:42:02'!
FAILURE!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:48:40' prior: 50502861!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: (CreditCard withNumber: aCardNumber ownedBy: anOwner withExpirationDate: anExpirationDate)
	on: self
	using: self
	registerOn: OrderedCollection new.
	
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 20:50:44'!
withNumber: aCreditCardNumber withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:50:44' prior: 50498918!
initializeExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withExpirationDate: (self initializeMonthYearLastYear)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:50:44' prior: 50497643!
initializeNotExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withExpirationDate: (self initializeMonthYearNextYear)! !

!methodRemoval: CreditCard class #withExpirationDate: stamp: 'scb 6/12/2022 20:50:44'!
withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'scb 6/12/2022 20:51:27'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'debitedAmount debitedCreditCard error factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'initialization' stamp: 'scb 6/12/2022 20:51:25' overrides: 16961394!
setUp

	factory := ObjectFactory new.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 20:51:28'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 20:51:28'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 20:52:27'!
withNumber: aCreditCardNumber withOwner: anOwner withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:52:27' prior: 50503117!
initializeExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withOwner: factory validCardOwner withExpirationDate: (self initializeMonthYearLastYear)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:52:27' prior: 50503125!
initializeNotExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withOwner: factory validCardOwner withExpirationDate: (self initializeMonthYearNextYear)! !

!methodRemoval: CreditCard class #withNumber:withExpirationDate: stamp: 'scb 6/12/2022 20:52:27'!
withNumber: aCreditCardNumber withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 20:52:41'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 20:52:41'!
PASSED!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 20:54:32'!
checkout: aCartID using: aCreditCard

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: aCreditCard
	on: self
	using: self
	registerOn: OrderedCollection new.
	
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:55:54'!
createValidCreditCard

	^ CreditCard withNumber: self validCardNumber
	withOwner: self validCardOwner
	withExpirationDate: self nextYear ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:56:25' prior: 50503030!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		using: factory validCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:56:48' prior: 50503247!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		using: factory createValidCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:56:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:56:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:56:50'!
ERROR!

!methodRemoval: TusLibrosInterface #checkout:usingCardNumber:ownedBy:expiringOn: stamp: 'scb 6/12/2022 20:57:16'!
checkout: aCartID usingCardNumber: aCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: (CreditCard withNumber: aCardNumber ownedBy: anOwner withExpirationDate: anExpirationDate)
	on: self
	using: self
	registerOn: OrderedCollection new.
	
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:57:34' prior: 50502971!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [interface
		checkout: aCartID
		using: factory createValidCreditCard]
	raise: Error - MessageNotUnderstood
	! !

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:57:36'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 20:57:59' prior: 50502770!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface
		checkout: factory invalidCartID
		using: factory createValidCreditCard ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:58:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:58:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:58:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:58:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:58:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:58:01'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:58:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:58:01'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:58:46'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 20:58:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 20:58:46'!
ERROR!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 21:00:03' prior: 50503230!
checkout: aCartID using: aCreditCard

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: aCreditCard
	on: Date today
	using: self
	registerOn: OrderedCollection new.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 21:00:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 21:00:04'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 22:24:48' prior: 50503175!
withNumber: aCreditCardNumber withOwner: anOwner withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 22:24:55'!
withNumber: aCreditCardNumber withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:24:55' prior: 50503182!
initializeExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withExpirationDate: (self initializeMonthYearLastYear)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:24:55' prior: 50503191!
initializeNotExpiredCreditCard

	^ CreditCard withNumber: factory validCardNumber withExpirationDate: (self initializeMonthYearNextYear)! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:24:55' prior: 50503239!
createValidCreditCard

	^ CreditCard withNumber: self validCardNumber
	withExpirationDate: self nextYear ! !

!methodRemoval: CreditCard class #withNumber:withOwner:withExpirationDate: stamp: 'scb 6/12/2022 22:24:55'!
withNumber: aCreditCardNumber withOwner: anOwner withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate!
!CreditCard class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 22:25:01'!
withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:25:01' prior: 50503555!
initializeExpiredCreditCard

	^ CreditCard withExpirationDate: (self initializeMonthYearLastYear)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:25:01' prior: 50503563!
initializeNotExpiredCreditCard

	^ CreditCard withExpirationDate: (self initializeMonthYearNextYear)! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:25:01' prior: 50503571!
createValidCreditCard

	^ CreditCard withExpirationDate: self nextYear ! !

!methodRemoval: CreditCard class #withNumber:withExpirationDate: stamp: 'scb 6/12/2022 22:25:01'!
withNumber: aCreditCardNumber withExpirationDate: aDate

	^self new initializeWithExpirationDate: aDate!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:27:25'!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: self
	registerOn: OrderedCollection new.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:27:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:28:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:28:07'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:29:47'!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		using: factory createExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !

!methodRemoval: ObjectFactory #today stamp: 'scb 6/12/2022 22:29:56'!
today

	^ today

	!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:17'!
createNotExpiredCreditCard

	^ CreditCard withExpirationDate: self nextYear ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:17' prior: 50503359!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface
		checkout: factory invalidCartID
		using: factory createNotExpiredCreditCard ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:17' prior: 50503262!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		using: factory createNotExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:17' prior: 50503340!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [interface
		checkout: aCartID
		using: factory createNotExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	! !

!methodRemoval: ObjectFactory #createValidCreditCard stamp: 'scb 6/12/2022 22:30:17'!
createValidCreditCard

	^ CreditCard withExpirationDate: self nextYear !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:24'!
createExpiredCreditCard

	^ CreditCard withExpirationDate: self lastYear ! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:30:34'!
lastYear

	^ Month month: today monthIndex year: today yearNumber - 1

	! !

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:30:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:30:42'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:31:17' prior: 50503717!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		using: factory createExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:31:18'!
ERROR!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 22:31:26'!
expiredCreditCardErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/12/2022 22:31:38' prior: 50503871!
expiredCreditCardErrorMessage
	
	^Cashier expiredCreditCardErrorMessage! !

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:31:46'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:33:35'!
test14CantListPurchasesWithInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		using: factory createExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:34:12'!
test01CantCreateCartForInvalidUsername

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !

!methodRemoval: TusLibrosInterfaceTest #test01CantCreateCartWithInvalidUsername stamp: 'scb 6/12/2022 22:34:12'!
test01CantCreateCartWithInvalidUsername

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartWithUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:34:22'!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		using: factory createExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !

!methodRemoval: TusLibrosInterfaceTest #test14CantListPurchasesWithInvalidUsername stamp: 'scb 6/12/2022 22:34:22'!
test14CantListPurchasesWithInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		using: factory createExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:34:45' prior: 50503974!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		using: factory createNotExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:35:09' prior: 50504010!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface checkout: aCartID using: factory createNotExpiredCreditCard.
	interface createCartWithUsername: factory invalidUser withPassword: factory validPassword
	! !

!methodRemoval: TusLibrosInterface #checkout:using: stamp: 'scb 6/12/2022 22:35:30'!
checkout: aCartID using: aCreditCard

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: aCreditCard
	on: Date today
	using: self
	registerOn: OrderedCollection new.
	
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:37:14' prior: 50503741!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface
		checkout: factory invalidCartID 
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:39:00' prior: 50504054!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface
		checkout: factory invalidCartID 
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !

!methodRemoval: ObjectFactory #createNotExpiredCreditCard stamp: 'scb 6/12/2022 22:39:24'!
createNotExpiredCreditCard

	^ CreditCard withExpirationDate: self nextYear !

!methodRemoval: ObjectFactory #createExpiredCreditCard stamp: 'scb 6/12/2022 22:39:26'!
createExpiredCreditCard

	^ CreditCard withExpirationDate: self lastYear !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:40:19' prior: 50503770!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:40:45' prior: 50503754!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:41:04' prior: 50503850!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory lastYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:13' prior: 50504028!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartWithUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	interface listPurchasesOfUsername: factory invalidUser withPassword: factory validPassword
	! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 22:42:28'!
createCartForUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart with: catalog).
	^currentID 
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50504095!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502031!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartForUsername: factory validUser withPassword: factory invalidPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50504131!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory lastYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502082!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50504113!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502020!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := factory createInterface.
	
	self shouldnt: [ interface createCartForUsername: factory validUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502069!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50503948!
test01CantCreateCartForInvalidUsername

	| interface |
	
	interface := factory createInterface.
	
	self should: [ interface createCartForUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50504151!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	interface listPurchasesOfUsername: factory invalidUser withPassword: factory validPassword
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502561!
test08CanListEmptyContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:42:28' prior: 50502573!
test09CanListContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self assert: 1 equals: ((interface showContentsOf: aCartID) occurrencesOf: factory validBook)
	! !

!methodRemoval: TusLibrosInterface #createCartWithUsername:withPassword: stamp: 'scb 6/12/2022 22:42:28'!
createCartWithUsername: aUsername withPassword: aPassword
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (Cart with: catalog).
	^currentID 
	
	!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:42:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:42:55'!
ERROR!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:43:07'!
listPurchasesOfUsername: aString withPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:46:14' prior: 50504306!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername:factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:46:15'!
FAILURE!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:46:39' prior: 50504373!
listPurchasesOfUsername: aString withPassword: aString2 
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:47:08' prior: 50504406!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:47:09'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:47:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:47:09'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:47:29'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:47:29'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:48:10' prior: 50504380!
test14CantListPurchasesOfInvalidUsername

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:49:35'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:49:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:49:35'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:50:18' prior: 50504185!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	! !

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:50:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:50:19'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:50:44'!
test14CantListPurchasesOfInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:50:51'!
test15CantListPurchasesOfInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!methodRemoval: TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:50:51'!
test14CantListPurchasesOfInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:51:20' prior: 50504705!
test15CantListPurchasesOfInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:51:24'!
FAILURE!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:51:53' prior: 50504411!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:51:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:51:53'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:51:53'!
FAILURE!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 22:52:01' prior: 50504777!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:52:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:52:02'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:52:36'!
test15CantListPurchasesWithInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!methodRemoval: TusLibrosInterfaceTest #test15CantListPurchasesOfInvalidPassword stamp: 'scb 6/12/2022 22:52:36'!
test15CantListPurchasesOfInvalidPassword

	| interface aCartID |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:52:55' prior: 50504529!
test14CantListPurchasesOfInvalidUsername

	| interface |
	
	interface := factory createInterface.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 22:52:59'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 22:53:04' prior: 50504907!
test15CantListPurchasesWithInvalidPassword

	| interface |
	
	interface := factory createInterface.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 22:53:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 22:53:07'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:00:17'!
test16CanListPurchasesOfUserWithoutPurchases

	| interface |
	
	interface := factory createInterface.
		
	self assert: OrderedCollection new  equals: (interface
											listPurchasesOfUsername: factory validUser
											withPassword: factory validPassword)
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:00:20' prior: 50505093!
test16CanListPurchasesOfUserWithoutPurchases

	| interface |
	
	interface := factory createInterface.
		
	self assert: OrderedCollection new equals: (interface
											listPurchasesOfUsername: factory validUser
											withPassword: factory validPassword)
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:00:23' prior: 50505105!
test16CanListPurchasesOfUserWithoutPurchases

	| interface |
	
	interface := factory createInterface.
		
	self assert: OrderedCollection new equals: (interface
										listPurchasesOfUsername: factory validUser
										withPassword: factory validPassword)
	! !

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:00:26'!
FAILURE!

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 23:02:48'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:03:02' prior: 50503617!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	Cashier checkout: (carts at: aCartID)
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: self
	registerOn: ledger.
	
	! !

Object subclass: #Sale
	instanceVariableNames: 'price customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'scb 6/12/2022 23:06:59'!
Object subclass: #Sale
	instanceVariableNames: 'price customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'scb 6/12/2022 23:09:18' prior: 50500052!
updateLedgerWith: price

	ledger add: price! !
!Cashier methodsFor: 'checkout' stamp: 'scb 6/12/2022 23:10:08' prior: 50505170!
updateLedgerWith: price

	ledger add: Sale new! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:10:09'!
FAILURE!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:10:09'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:10:09'!
FAILURE!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:10:45'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:10:48'!
FAILURE!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:10:48'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:10:48'!
FAILURE!
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 23:12:53' prior: 50500307!
assert: aLedger includesOneItemOfPrice: aTicket

	self assert: 1 equals: aLedger size.
	self assert: aTicket equals: aLedger first! !
!CashierTest methodsFor: 'assertions' stamp: 'scb 6/12/2022 23:13:13' prior: 50505242!
assert: aLedger includesOneItemOfPrice: aPrice

	self assert: 1 equals: aLedger size.
	self assert: aPrice equals: aLedger first total! !

Object subclass: #Sale
	instanceVariableNames: 'total customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'scb 6/12/2022 23:13:28'!
Object subclass: #Sale
	instanceVariableNames: 'total customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'no messages' stamp: 'scb 6/12/2022 23:13:35'!
total

	^ total! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:19:08' prior: 50505147!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: self
	registerOn: ledger) checkout.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:19:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:19:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:19:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:19:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:19:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:19:12'!
ERROR!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'scb 6/12/2022 23:19:42'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'no messages' stamp: 'scb 6/12/2022 23:20:16'!
debit: anAmount from: aCreditCard! !

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 23:20:55'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 23:21:10' prior: 50500964!
initializeWithCredentials: aCredentials withCatalog: aCatalog  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessor new.! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:21:35' prior: 50505271!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:21:36'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:21:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:21:36'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:21:38'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:21:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:21:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:21:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:21:50'!
ERROR!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/12/2022 23:22:21' prior: 50505374!
initializeWithCredentials: aCredentials withCatalog: aCatalog  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessor new.
	ledger := OrderedCollection new.! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:22:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:22:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:22:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:22:35'!
FAILURE!
!Sale methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:22:55'!
customer

	^ customer! !
!Cashier methodsFor: 'initialization' stamp: 'scb 6/12/2022 23:23:51'!
initializeCheckoutOf: aCart ownedBy: anOwner with: aCreditCard using: aMerchantProcessor registerOn: aLedger.
	
	merchantProcessor := aMerchantProcessor.
	cart := aCart.
	creditCard := aCreditCard.
	ledger := aLedger.
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:23:51' prior: 50494986!
checkout: aCart with: aCreditCard on: aDate using: aMerchantProcessor registerOn: aLedger 
	
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage ].
	
	^ self new initializeCheckoutOf: aCart ownedBy: factory validUser with: aCreditCard using: aMerchantProcessor registerOn: aLedger.! !

!methodRemoval: Cashier #initializeCheckoutOf:with:using:registerOn: stamp: 'scb 6/12/2022 23:23:51'!
initializeCheckoutOf: aCart with: aCreditCard using: aMerchantProcessor registerOn: aLedger.
	
	merchantProcessor := aMerchantProcessor.
	cart := aCart.
	creditCard := aCreditCard.
	ledger := aLedger.
	!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'scb 6/12/2022 23:24:03'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard ledger merchantProcessor owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'scb 6/12/2022 23:24:01' prior: 50505595!
initializeCheckoutOf: aCart ownedBy: anOwner with: aCreditCard using: aMerchantProcessor registerOn: aLedger.
	
	merchantProcessor := aMerchantProcessor.
	owner := anOwner.
	cart := aCart.
	creditCard := aCreditCard.
	ledger := aLedger.
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 23:25:02' prior: 50505606!
checkout: aCart with: aCreditCard on: aDate using: aMerchantProcessor registerOn: aLedger 
	
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage ].
	
	^ self new initializeCheckoutOf: aCart ownedBy: self with: aCreditCard using: aMerchantProcessor registerOn: aLedger.! !
!Cashier class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 23:26:30'!
checkout: aCart ownedBy: anOwner with: aCreditCard on: aDate using: aMerchantProcessor registerOn: aLedger 
	
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage ].
	
	^ self new initializeCheckoutOf: aCart ownedBy: self with: aCreditCard using: aMerchantProcessor registerOn: aLedger.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:26:30' prior: 50499242!
initializeCashierCheckout: aCart on: aCreditCard registerOn: aLedger 

	^ Cashier checkout: aCart ownedBy: factory validUser with: aCreditCard on: (self initializeMonthYearNow) using: self registerOn: aLedger! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:26:30' prior: 50505384!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	ownedBy: factory validUser with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

!methodRemoval: Cashier class #checkout:with:on:using:registerOn: stamp: 'scb 6/12/2022 23:26:30'!
checkout: aCart with: aCreditCard on: aDate using: aMerchantProcessor registerOn: aLedger 
	
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage ].
	
	^ self new initializeCheckoutOf: aCart ownedBy: self with: aCreditCard using: aMerchantProcessor registerOn: aLedger.!
!Cashier class methodsFor: 'instance creation' stamp: 'scb 6/12/2022 23:26:36' prior: 50505665!
checkout: aCart ownedBy: anOwner with: aCreditCard on: aDate using: aMerchantProcessor registerOn: aLedger 
	
	(aCart isEmpty) ifTrue: [self error: self emptyCartErrorMessage ].
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self expiredCreditCardErrorMessage ].
	
	^ self new initializeCheckoutOf: aCart ownedBy: anOwner with: aCreditCard using: aMerchantProcessor registerOn: aLedger.! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:27:17' prior: 50505691!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	ownedBy: anOwner with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:27:25' prior: 50505736!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	ownedBy: anOwner
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:27:58' prior: 50505750!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID)
	ownedBy: (carts at: aCartID) owner
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:28:11' prior: 50505764!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID) cart
	ownedBy: (carts at: aCartID) owner
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

Object subclass: #CartSession
	instanceVariableNames: 'user cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'scb 6/12/2022 23:29:13'!
Object subclass: #CartSession
	instanceVariableNames: 'user cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'no messages' stamp: 'scb 6/12/2022 23:29:21'!
cart

	^cart! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:29:27'!
user

	^user! !
!CartSession class methodsFor: 'no messages' stamp: 'scb 6/12/2022 23:30:34'!
with: aCart for: aUser! !

!classRenamed: #CartSession as: #ActiveCart stamp: 'scb 6/12/2022 23:30:59'!
Smalltalk renameClassNamed: #CartSession as: #ActiveCart!
!ActiveCart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:31:23' prior: 50505809!
with: aCart for: aUser
	
	self new initializeWith: aCart for: aUser! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:31:47'!
initializeWith: aCart for: aUser

	cart := aCart.
	user := aUser.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 23:32:52' prior: 50502874!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(carts at: aCartID) cart  add: anAmount of: aProduct! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 23:32:55' prior: 50505828!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(carts at: aCartID) cart add: anAmount of: aProduct! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 23:33:55' prior: 50504170!
createCartForUsername: aUser withPassword: aPassword
	
	(credentials keys includes: aUser) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUser) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (ActiveCart with: (Cart with: catalog) for: aUser ).
	^currentID 
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'scb 6/12/2022 23:37:10' prior: 50505174!
updateLedgerWith: price

	ledger add: (Sale for: price madeBy: owner)! !
!Sale class methodsFor: 'no messages' stamp: 'scb 6/12/2022 23:38:04'!
for: aPrice madeBy: aCustomer
	
	self new initializefor: aPrice madeBy: aCustomer.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:38:53'!
initializeFor: aPrice madeBy: aCustomer

	total := aPrice.
	customer := aCustomer.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:39:05'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:39:05'!
ERROR!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:39:05'!
ERROR!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:39:05'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:39:05'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:39:05'!
ERROR!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:39:05'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:39:07'!
ERROR!
!Sale class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:39:20' prior: 50505862!
for: aPrice madeBy: aCustomer
	
	self new initializeFor: aPrice madeBy: aCustomer.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:39:23'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:39:23'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:39:23'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:39:28'!
ERROR!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:39:28'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:39:28'!
ERROR!
!Sale class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:40:10' prior: 50505901!
for: aPrice madeBy: aCustomer
	
	^ self new initializeFor: aPrice madeBy: aCustomer.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:40:15'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:40:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:40:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:40:19'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:40:29'!
ERROR!
!ActiveCart class methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:41:22' prior: 50505818!
with: aCart for: aUser
	
	^ self new initializeWith: aCart for: aUser! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:41:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:41:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:41:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:41:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:41:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:41:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:41:26'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:41:29'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/12/2022 23:41:58' prior: 50502868!
showContentsOf: aCartID

	self assertExistanceOf: aCartID.
	^ (carts at: aCartID) cart contents
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:41:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:41:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:41:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:41:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:41:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:42:01'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:42:08'!
ERROR!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:42:43' prior: 50505778!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID) cart
	ownedBy: (carts at: aCartID) user
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:42:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:42:44'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:42:44'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/12/2022 23:50:28'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:50:26' prior: 50506299!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(purchases at: (carts at: aCartID) user) add:
	(Cashier checkout: (carts at: aCartID) cart
	ownedBy: (carts at: aCartID) user
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !
!TusLibrosInterface methodsFor: 'cashier' stamp: 'scb 6/12/2022 23:51:29' prior: 50506383!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self assertExistanceOf: aCartID.
	(Cashier checkout: (carts at: aCartID) cart
	ownedBy: (carts at: aCartID) user
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:51:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:51:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:51:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:51:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:51:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:51:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:51:31'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:51:31'!
FAILURE!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/12/2022 23:53:31' prior: 50504842!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.

	^ sales! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/12/2022 23:54:40' prior: 50506474!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale user = aUsername ifTrue: [sales add: sale]]
	^ sales! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/12/2022 23:54:43' prior: 50506488!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale user = aUsername ifTrue: [sales add: sale]].
	^ sales! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:54:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:54:46'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/12/2022 23:58:46' prior: 50505117!
test16CanListPurchasesOfUserWithoutPurchases

	| interface aCartID aPurchaseList|
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:58:47'!
ERROR!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/12/2022 23:59:23' prior: 50506504!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale customer = aUsername ifTrue: [sales add: sale]].
	^ sales! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/12/2022 23:59:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/12/2022 23:59:23'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:02:29'!
test17CantAddToExpiredCart

	| interface aCartID aPurchaseList now|
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	now := factory today.
	factory thirtyMinutesFrom: now.
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:02:58' prior: 50506676!
test17CantAddToExpiredCart

	| interface aCartID now thirtyMinutesFromNow |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	now := factory today.
	thirtyMinutesFromNow := factory thirtyMinutesFrom: now.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:07:45' prior: 50506700!
test17CantAddToExpiredCart

	| interface aCartID aPurchaseList now|
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	now := factory now.
	factory thirtyMinutesFrom: now.
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:13:20' prior: 50506713!
test17CantAddToExpiredCart

	| interface aCartID aPurchaseList clock|
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:13:27' prior: 50506737!
test17CantAddToExpiredCart

	| interface aCartID aPurchaseList |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:13:51' prior: 50506760!
test17CantAddToExpiredCart

	| interface aCartID aPurchaseList |
	
	interface := factory createInterface.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'scb 6/13/2022 00:14:19'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'factory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:14:18' prior: 50500340 overrides: 16961394!
setUp

	factory := ObjectFactory new.
	clock := factory now.! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:14:49' prior: 50502797 overrides: 16920235!
initialize

	today := DateAndTime now! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/13/2022 00:14:50'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/13/2022 00:14:50'!
PASSED!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:15:25' prior: 50506820 overrides: 16920235!
initialize

	today := DateAndTime now! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/13/2022 00:15:26'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/13/2022 00:15:26'!
PASSED!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:15:49'!
now
	^ today! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/13/2022 00:15:50'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/13/2022 00:15:50'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:16:08' prior: 50506783!
test17CantAddToExpiredCart

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:16:27' prior: 50506968!
test17CantAddToExpiredCart

	|  |

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:16:59' prior: 50506973!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterface.

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:17:13' prior: 50506979!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterface.

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:17:35' prior: 50506986!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterface.

	self assert: false! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:12'!
createInterface: clock

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:12' prior: 50506993!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterface: clock.

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:12' prior: 50504251!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50506577!
test16CanListPurchasesOfUserWithoutPurchases

	| interface aCartID aPurchaseList|
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504236!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504612!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504069!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterface: clock.
	
	self should: [ interface
		checkout: factory invalidCartID 
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504216!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory lastYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504326!
test08CanListEmptyContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504203!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := factory createInterface: clock.
	
	self should: [ interface createCartForUsername: factory validUser withPassword: factory invalidPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504269!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := factory createInterface: clock.
	
	self shouldnt: [ interface createCartForUsername: factory validUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50502754!
test04CantAddItemToInvalidCartID

	| interface |
	
	interface := factory createInterface: clock.
	
	self should: [ interface add: 1 of: factory validBook to: factory invalidCartID ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50505023!
test15CantListPurchasesWithInvalidPassword

	| interface |
	
	interface := factory createInterface: clock.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504338!
test09CanListContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self assert: 1 equals: ((interface showContentsOf: aCartID) occurrencesOf: factory validBook)
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504953!
test14CantListPurchasesOfInvalidUsername

	| interface |
	
	interface := factory createInterface: clock.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50502742!
test07CantListContentsOfInvalidCartID

	| interface |
	
	interface := factory createInterface: clock.
	
	self should: [interface showContentsOf: factory invalidCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504280!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := factory createInterface: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:13' prior: 50504293!
test01CantCreateCartForInvalidUsername

	| interface |
	
	interface := factory createInterface: clock.
	
	self should: [ interface createCartForUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !

!methodRemoval: ObjectFactory #createInterface stamp: 'scb 6/13/2022 00:18:13'!
createInterface

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507202!
test14CantListPurchasesOfInvalidUsername

	| interface |
	
	interface := factory createInterfaceWith: clock.
		
	self should: [interface
		listPurchasesOfUsername: factory invalidUser
		withPassword: factory validPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507135!
test02CantCreateCartWithInvalidPassword

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self should: [ interface createCartForUsername: factory validUser withPassword: factory invalidPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507228!
test05CanAddItemToValidCart

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self shouldnt: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507161!
test04CantAddItemToInvalidCartID

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self should: [ interface add: 1 of: factory validBook to: factory invalidCartID ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCartErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507031!
test16CanListPurchasesOfUserWithoutPurchases

	| interface aCartID aPurchaseList|
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear.
		
	aPurchaseList := interface listPurchasesOfUsername: factory validUser withPassword: factory validPassword.
	
	self assert: factory validBookPrice equals: (aPurchaseList at: 1) total
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507187!
test09CanListContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self assert: 1 equals: ((interface showContentsOf: aCartID) occurrencesOf: factory validBook)
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507087!
test10CantCheckoutInvalidCartID

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self should: [ interface
		checkout: factory invalidCartID 
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507006!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterfaceWith: clock.

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507216!
test07CantListContentsOfInvalidCartID

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self should: [interface showContentsOf: factory invalidCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507242!
test01CantCreateCartForInvalidUsername

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self should: [ interface createCartForUsername: factory invalidUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidCredentialsErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507013!
test12CantCheckoutEmptyCart

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface emptyCartErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507069!
test11CanCheckoutValidCartID

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self shouldnt: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory nextYear ]
	raise: Error - MessageNotUnderstood
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507173!
test15CantListPurchasesWithInvalidPassword

	| interface |
	
	interface := factory createInterfaceWith: clock.
		
	self should: [interface
		listPurchasesOfUsername: factory validUser
		withPassword: factory invalidPassword]
	raise: Error - MessageNotUnderstood
	withMessageText: interface invalidCredentialsErrorMessage 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507149!
test03CanCreateCartValidCredentials

	| interface |
	
	interface := factory createInterfaceWith: clock.
	
	self shouldnt: [ interface createCartForUsername: factory validUser withPassword: factory validPassword ]
	raise: Error - MessageNotUnderstood! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507102!
test13CantCheckoutWithExpiredCreditCard

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [ interface
		checkout: aCartID
		withCreditCardNumber: factory validCardNumber 
		ownedBy: factory validCardOwner 
		expiringOn: factory lastYear ]
	raise: Error - MessageNotUnderstood
	withMessageText: interface expiredCreditCardErrorMessage
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507122!
test08CanListEmptyContentsOfValidCartID

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self assert: (interface showContentsOf: aCartID) isEmpty 
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:23' prior: 50507054!
test06CantAddInvalidItemToCart

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory invalidBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface invalidBookErrorMessage.
	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:38'!
createInterfaceWith: clock

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog! !

!methodRemoval: ObjectFactory #createInterface: stamp: 'scb 6/13/2022 00:18:38'!
createInterface: clock

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:18:53' prior: 50507515!
createInterfaceWith: clock

	^ TusLibrosInterface withCredentials: self credentials withCatalog: self catalog withClock: clock! !
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/13/2022 00:19:13'!
withCredentials: aCredentials withCatalog: aCatalog withClock: clock  
	
	^ self new initializeWithCredentials: aCredentials withCatalog: aCatalog! !

!methodRemoval: TusLibrosInterface class #withCredentials:withCatalog: stamp: 'scb 6/13/2022 00:19:13'!
withCredentials: aCredentials withCatalog: aCatalog 
	
	^ self new initializeWithCredentials: aCredentials withCatalog: aCatalog!
!TusLibrosInterface class methodsFor: 'intance creation' stamp: 'scb 6/13/2022 00:19:18' prior: 50507535!
withCredentials: aCredentials withCatalog: aCatalog withClock: clock  
	
	^ self new initializeWithCredentials: aCredentials withCatalog: aCatalog withClock: clock  ! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'scb 6/13/2022 00:19:42'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'credentials carts factory currentID catalog ledger merchantProcessor purchases clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialize' stamp: 'scb 6/13/2022 00:19:40'!
initializeWithCredentials: aCredentials withCatalog: aCatalog withClock: aClock  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessor new.
	ledger := OrderedCollection new.
	clock := aClock! !

!methodRemoval: TusLibrosInterface #initializeWithCredentials:withCatalog: stamp: 'scb 6/13/2022 00:19:45'!
initializeWithCredentials: aCredentials withCatalog: aCatalog  

	credentials := aCredentials.
	carts := Dictionary new.
	currentID := 0.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessor new.
	ledger := OrderedCollection new.!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:19:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:19:52'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:19:52'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:21:48' prior: 50507370!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterfaceWith: clock.
	clock := clock + 31 minutes

	self assert: false! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:22:03' prior: 50507656!
test17CantAddToExpiredCart

	| interface |
	
	interface := factory createInterfaceWith: clock.
	clock := clock + 31 minutes

	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:23:03' prior: 50507664!
test17CantAddToExpiredCart

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	clock := clock + 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:23:10'!
ERROR!
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/13/2022 00:23:15'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'error messages' stamp: 'scb 6/13/2022 00:23:29' prior: 50507691!
expiredCartErrorMessage
	
	^ 'this cart is expired'! !

Object subclass: #ActiveCart
	instanceVariableNames: 'user cart timeOfActivation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'scb 6/13/2022 00:24:37'!
Object subclass: #ActiveCart
	instanceVariableNames: 'user cart timeOfActivation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:25:14'!
initializeWith: aCart for: aUser at: aDateAndTime 

	cart := aCart.
	user := aUser.! !
!ActiveCart class methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:25:14' prior: 50506108!
with: aCart for: aUser
	
	^ self new initializeWith: aCart for: aUser at: aDateAndTime! !

!methodRemoval: ActiveCart #initializeWith:for: stamp: 'scb 6/13/2022 00:25:14'!
initializeWith: aCart for: aUser

	cart := aCart.
	user := aUser.!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:25:24' prior: 50507713!
initializeWith: aCart for: aUser at: aDateAndTime 

	cart := aCart.
	user := aUser.
	timeOfActivation := aDateAndTime ! !
!ActiveCart class methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:26:00'!
with: aCart for: aUser at: aDateAndTime 
	
	^ self new initializeWith: aCart for: aUser at: aDateAndTime! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:26:00' prior: 50505842!
createCartForUsername: aUser withPassword: aPassword
	
	(credentials keys includes: aUser) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUser) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (ActiveCart with: (Cart with: catalog) for: aUser at: clock ).
	^currentID 
	
	! !

!methodRemoval: ActiveCart class #with:for: stamp: 'scb 6/13/2022 00:26:00'!
with: aCart for: aUser
	
	^ self new initializeWith: aCart for: aUser at: aDateAndTime!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 00:27:27' prior: 50505835!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(self ) ifTrue: [self error: self expiredCartErrorMessage].
	(carts at: aCartID) cart add: anAmount of: aProduct! !

Object subclass: #Clock
	instanceVariableNames: 'creationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'scb 6/13/2022 00:28:42'!
Object subclass: #Clock
	instanceVariableNames: 'creationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'scb 6/13/2022 00:29:36'!
Object subclass: #Clock
	instanceVariableNames: 'creationTime time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'no messages' stamp: 'scb 6/13/2022 00:29:35'!
initializeWithExpirationDate: aDateAndTime

	time := aDateAndTime! !

Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'scb 6/13/2022 00:29:42'!
Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:30:24'!
isExpiredAfter: aGracePeriod at: aDate 

	^ true! !
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:31:15'!
initializeAt: aDateAndTime

	time := aDateAndTime! !

!methodRemoval: Clock #initializeWithExpirationDate: stamp: 'scb 6/13/2022 00:31:15'!
initializeWithExpirationDate: aDateAndTime

	time := aDateAndTime!
!Clock class methodsFor: 'no messages' stamp: 'scb 6/13/2022 00:31:40' overrides: 16901507!
at: aDateAndTime

	self new initializeAt: aDateAndTime.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:32:21' prior: 50506814 overrides: 16961394!
setUp

	factory := ObjectFactory new.
	clock := factory createClock.! !

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/13/2022 00:32:59'!
Object subclass: #ObjectFactory
	instanceVariableNames: 'today now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:32:57'!
createClock

	^ Clock at: now! !

Object subclass: #ObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/13/2022 00:33:08'!
Object subclass: #ObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'scb 6/13/2022 00:33:12'!
Object subclass: #ObjectFactory
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:33:12' prior: 50506879!
now
	^ now! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:33:12' prior: 50503795!
lastYear

	^ Month month: now monthIndex year: now yearNumber - 1

	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:33:12' prior: 50506850 overrides: 16920235!
initialize

	now := DateAndTime now! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:33:12' prior: 50502805!
nextYear

	^ Month month: now monthIndex year: now yearNumber + 1

	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:33:15'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:33:15'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:33:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:33:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:33:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:33:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:33:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:33:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:33:17'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:33:26'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 00:34:55' prior: 50507764!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(clock hasPassed: 30 minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].
	(carts at: aCartID) cart add: anAmount of: aProduct! !
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:35:22'!
hasPassed: aGracePeriod since: aDate 

	^ true! !

!methodRemoval: Clock #isExpiredAfter:at: stamp: 'scb 6/13/2022 00:35:22'!
isExpiredAfter: aGracePeriod at: aDate 

	^ true!
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:35:30' prior: 50507958!
hasPassed: aGracePeriod since: aDateAndTime 

	^ true! !
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:35:34' prior: 50507967!
hasPassed: aGracePeriod since: aDateAndTime 

	^ false! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:35:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:35:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:35:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:35:47'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:35:49'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:36:09'!
creationTime

	^time! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:36:37'!
creationTime

	^timeOfActivation! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:36:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:36:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:36:46'!
ERROR!
!Clock class methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:37:22' prior: 50507819 overrides: 16901507!
at: aDateAndTime

	^ self new initializeAt: aDateAndTime.! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:37:25'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:37:25'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:37:49' prior: 50507672!
test17CantAddToExpiredCart

	| interface aCartID |
	
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:38:16'!
advance: anAmountOfTime

	time := time + anAmountOfTime! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:38:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:38:20'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:38:20'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:39:27'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:39:27'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:41:48' prior: 50508240!
test17CantAddToExpiredCart

	| interface aCartID |
	clock := factory createClock.
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:41:49'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:44:32' prior: 50508330!
test17CantAddToExpiredCart

	| interface aCartID |
	factory := ObjectFactory new.
	clock := factory createClock.
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:44:33'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:44:43'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:47:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:47:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:47:12'!
ERROR!

!methodRemoval: ObjectFactory #createClock stamp: 'scb 6/13/2022 00:48:47'!
createClock

	^ Clock at: now!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:48:50'!
createClock

	^ Clock at: now! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:48:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:48:55'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:48:55'!
FAILURE!
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:50:26' prior: 50507972!
hasPassed: aGracePeriod since: aDateAndTime 

	^ time > (aDateAndTime + aGracePeriod)! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:50:31'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:50:31'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:50:31'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:50:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:50:31'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:50:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:50:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:50:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:50:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:50:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:50:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:50:34'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test02CartCantAddBookOutsideOfCollection stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test03CartWithBookIsNotEmpty stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test04CartCantAddNonStrictlyPositiveAmountOfBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test04_5CartCantAddNonIntegerAmountOfBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test05CartCantAddMultipleCopiesOfBookOutsideOfCollection stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test06CartDoesntKnowNotAddedBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test07CartKnowsAddedBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test08CartKnowsOccurrancesOfBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CartTest #test09CartKnowsContents stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCalculateCheckoutPriceOfCartWithOneBook stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test03CashierCanCalculateCheckoutPriceOfCartWithMultipleBooks stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithExpiredCard stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutsCart stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test06CashierCheckoutsCartUsingMerchantProcessor stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #CashierTest #test07CashierCantCheckoutWhenCreditCardDoesNotHaveEnoughCredit stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:50:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:50:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:50:43'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:51:44'!
time

	^time! !

!methodRemoval: Clock #creationTime stamp: 'scb 6/13/2022 00:51:44'!
creationTime

	^time!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 00:51:56' prior: 50507744!
createCartForUsername: aUser withPassword: aPassword
	
	(credentials keys includes: aUser) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUser) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	carts at: self nextCartID put: (ActiveCart with: (Cart with: catalog) for: aUser at: clock time ).
	^currentID 
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:51:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:51:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:51:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:52:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:53:12'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:53:44' prior: 50508350!
test17CantAddToExpiredCart

	| interface aCartID |
	factory := ObjectFactory new.
	clock := factory createClock.
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	interface add: 1 of: factory validBook to: aCartID.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:53:44'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:55:53' prior: 50508842!
test17CantAddToExpiredCart

	| interface aCartID |
	factory := ObjectFactory new.
	clock := factory createClock.
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:56:15' prior: 50508865!
test17CantAddToExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	clock advance: 31 minutes.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:56:29' prior: 50508883!
test17CantAddToExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: 31 minutes.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:56:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 00:56:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 00:56:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 00:56:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 00:56:30'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:57:11'!
test17CantListExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: 31 minutes.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:58:13'!
test18CantListContentsOfExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: 31 minutes.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:58:52' prior: 50508994!
test18CantListContentsOfExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: 31 minutes.
	
	self should: [interface showContentsOf: factory aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 00:58:58' prior: 50509010!
test18CantListContentsOfExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: 31 minutes.
	
	self should: [interface showContentsOf: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:00:30'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 01:00:58' prior: 50506229!
showContentsOf: aCartID

	self assertExistanceOf: aCartID.
	(clock hasPassed: 30 minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].
	^ (carts at: aCartID) cart contents
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:01:00'!
PASSED!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 01:01:38' prior: 50509045!
showContentsOf: aCartID

	self assertExistanceOf: aCartID.
	^ (carts at: aCartID) cart contents
	
	! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 01:01:43' prior: 50507947!
add: anAmount of: aProduct to: aCartID
	
	self assertExistanceOf: aCartID.
	(carts at: aCartID) cart add: anAmount of: aProduct! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:01:55' prior: 50502854!
assertExistanceOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: 30 minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:01:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:01:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:01:57'!
PASSED!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:02:12'!
validateCart: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: 30 minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:02:12' prior: 50509122!
showContentsOf: aCartID

	self validateCart: aCartID.
	^ (carts at: aCartID) cart contents
	
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:02:12' prior: 50509128!
add: anAmount of: aProduct to: aCartID
	
	self validateCart: aCartID.
	(carts at: aCartID) cart add: anAmount of: aProduct! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:02:12' prior: 50506399!
checkout: aCartID withCreditCardNumber: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationDate

	self validateCart: aCartID.
	(Cashier checkout: (carts at: aCartID) cart
	ownedBy: (carts at: aCartID) user
	with: (CreditCard withExpirationDate: anExpirationDate)
	on: Date today
	using: merchantProcessor
	registerOn: ledger) checkout.
	
	! !

!methodRemoval: TusLibrosInterface #assertExistanceOf: stamp: 'scb 6/13/2022 01:02:12'!
assertExistanceOf: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: 30 minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:02:24'!
PASSED!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:03:49'!
gracePeriod

	^ 30! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:03:49' prior: 50509213!
validateCart: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: self gracePeriod minutes since: (carts at: aCartID) creationTime) ifTrue: [self error: self expiredCartErrorMessage].! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:04:03'!
creationTimeOf: aCartID

	^ (carts at: aCartID) creationTime! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'scb 6/13/2022 01:04:03' prior: 50509334!
validateCart: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: self gracePeriod minutes since: (self creationTimeOf: aCartID)) ifTrue: [self error: self expiredCartErrorMessage].! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:04:55' prior: 50506603!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	((credentials keys includes: aUsername) and: ((credentials at: aUsername) isEqualTo: aPassword)) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale customer = aUsername ifTrue: [sales add: sale]].
	^ sales! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:04:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:04:57'!
FAILURE!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:05:09' prior: 50509361!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	((credentials keys includes: aUsername) or: ((credentials at: aUsername) isEqualTo: aPassword)) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale customer = aUsername ifTrue: [sales add: sale]].
	^ sales! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:05:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:05:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:05:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:05:12'!
FAILURE!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:05:35' prior: 50509446!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale customer = aUsername ifTrue: [sales add: sale]].
	^ sales! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:05:56'!
AssertExistanceOfUser: aUsername andPassword: aPassword

	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ]! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:05:56' prior: 50509531!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	self AssertExistanceOfUser: aUsername andPassword: aPassword.
	
	sales := OrderedCollection new.
	ledger do: [ :sale | sale customer = aUsername ifTrue: [sales add: sale]].
	^ sales! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:06:01'!
PASSED!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:07:39' prior: 50509559!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	| sales |
	
	self AssertExistanceOfUser: aUsername andPassword: aPassword.
	ledger select: [ :sale | sale customer = aUsername].! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:07:45' prior: 50509637!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	
	
	self AssertExistanceOfUser: aUsername andPassword: aPassword.
	^ ledger select: [ :sale | sale customer = aUsername].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:07:48'!
PASSED!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:07:53' prior: 50509646!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	self AssertExistanceOfUser: aUsername andPassword: aPassword.
	^ ledger select: [ :sale | sale customer = aUsername].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:07:54'!
PASSED!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'scb 6/13/2022 01:08:07'!
assertExistanceOfUser: aUsername andPassword: aPassword

	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:08:07' prior: 50509722!
listPurchasesOfUsername: aUsername withPassword: aPassword 
	
	self assertExistanceOfUser: aUsername andPassword: aPassword.
	^ ledger select: [ :sale | sale customer = aUsername].! !

!methodRemoval: TusLibrosInterface #AssertExistanceOfUser:andPassword: stamp: 'scb 6/13/2022 01:08:07'!
AssertExistanceOfUser: aUsername andPassword: aPassword

	(credentials keys includes: aUsername) ifFalse: [ self error: self invalidCredentialsErrorMessage ].
	((credentials at: aUsername) isEqualTo: aPassword ) ifFalse: [ self error: self invalidCredentialsErrorMessage ]!
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 01:08:52' prior: 50508756!
createCartForUsername: aUser withPassword: aPassword
	
	self assertExistanceOfUser: aUser andPassword: aPassword.
	carts at: self nextCartID put: (ActiveCart with: (Cart with: catalog) for: aUser at: clock time ).
	^currentID 
	
	! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:08:53'!
PASSED!
!TusLibrosInterface methodsFor: 'chrono' stamp: 'scb 6/13/2022 01:09:10' prior: 50509330!
gracePeriod

	^ 30 minutes! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'scb 6/13/2022 01:09:44' prior: 50509350!
validateCart: aCartID

	(carts keys includes: aCartID) ifFalse: [ self error: self invalidCartErrorMessage ].
	(clock hasPassed: self gracePeriod since: (self creationTimeOf: aCartID)) ifTrue: [self error: self expiredCartErrorMessage].! !

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:09:53'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:10:12' prior: 50508978!
test17CantListExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: interface gracePeriod + 1 minutes.
	
	self should: [interface add: 1 of: factory validBook to: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CantCreateCartForInvalidUsername stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CantCreateCartWithInvalidPassword stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanCreateCartValidCredentials stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CantAddItemToInvalidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanAddItemToValidCart stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CantAddInvalidItemToCart stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CantListContentsOfInvalidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CanListEmptyContentsOfValidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanListContentsOfValidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CantCheckoutInvalidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanCheckoutValidCartID stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CantCheckoutEmptyCart stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CantCheckoutWithExpiredCreditCard stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CantListPurchasesOfInvalidUsername stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15CantListPurchasesWithInvalidPassword stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CanListPurchasesOfUserWithoutPurchases stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantAddToExpiredCart stamp: 'scb 6/13/2022 01:10:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CantListExpiredCart stamp: 'scb 6/13/2022 01:10:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CantListContentsOfExpiredCart stamp: 'scb 6/13/2022 01:10:15'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'scb 6/13/2022 01:10:28' prior: 50509026!
test18CantListContentsOfExpiredCart

	| interface aCartID |
	interface := factory createInterfaceWith: clock.
	aCartID := interface createCartForUsername: factory validUser withPassword: factory validPassword.
	clock advance: interface gracePeriod + 1 minutes.
	
	self should: [interface showContentsOf: aCartID]
	raise: Error - MessageNotUnderstood 
	withMessageText: interface expiredCartErrorMessage.
	! !

----SNAPSHOT----(13 June 2022 01:11:31) CuisUniversity-5096.image priorSource: 5455027!